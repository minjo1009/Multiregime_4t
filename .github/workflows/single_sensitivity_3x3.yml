name: Single Sensitivity 3x3 - aggregate

on:
  workflow_dispatch:

env:
  PYTHONUTF8: "1"
  PY_VERSION: "3.10"
  BASE_PARAMS: "conf/params_alt.yml"
  BASE_THR: "0.83"
  BASE_HOLD: "9"
  CSV_GLOB: "**/*ETHUSDT*1min*2020*2025*.csv"
  DATA_ZIP: "ETHUSDT_1min_2020_2025.zip"

jobs:
  sweep:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PY_VERSION }}

      - name: Deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel setuptools
          pip install "numpy==1.26.4" "pandas==2.2.2" "pyyaml"

      - name: Unzip data if present
        run: |
          set -euo pipefail
          if [ -f "${DATA_ZIP}" ]; then unzip -o "${DATA_ZIP}" >/dev/null; fi

      - name: Normalize CSV_GLOB (strip repo and 'Multiregime 4t*')
        run: |
          set -euo pipefail
          ROOTF="$(basename "$GITHUB_WORKSPACE")"
          CSVG_IN="${CSV_GLOB}"
          CSVG="${CSVG_IN#${ROOTF}/}"; CSVG="${CSVG#./}"
          CSVG="$(printf '%s' "$CSVG" | sed -E 's#^(Multiregime[ _]4t[^/]*/)+##')"
          echo "CSVG_SANITIZED=$CSVG" >> "$GITHUB_ENV"
          echo "[glob] in : $CSVG_IN"
          echo "[glob] out: $CSVG"

      - name: Export PYTHONPATH
        run: echo "PYTHONPATH=.:${GITHUB_WORKSPACE}/src" >> $GITHUB_ENV

      - name: Build sweep lists
        run: |
          python - <<'PY'
import os
base_thr=float(os.environ.get('BASE_THR','0.83')); base_hold=int(os.environ.get('BASE_HOLD','9'))
thr = [max(0.3,min(0.95,round(base_thr+d,2))) for d in (-0.02,0.0,0.02)]
hold = [base_hold-1, base_hold, base_hold+1]
open("_thr.txt","w").write(" ".join(f"{t:.2f}" for t in thr))
open("_hold.txt","w").write(" ".join(str(h) for h in hold))
PY

      - name: Run sweep and aggregate to one ZIP
        env:
          CSVG: ${{ env.CSVG_SANITIZED }}
        run: |
          set -euo pipefail
          THR_LIST=$(cat _thr.txt)
          HOLD_LIST=$(cat _hold.txt)
          mkdir -p conf
          for THR in $THR_LIST; do
            for HOLD in $HOLD_LIST; do
              python - <<'PY'
import os, yaml
thr=os.environ['THR']; hold=os.environ['HOLD']; base=os.environ['BASE_PARAMS']
d=yaml.safe_load(open(base,'r',encoding='utf-8')) or {}
d.setdefault('entry',{}).setdefault('p_thr',{})
for k in ('trend','range'):
  d['entry']['p_thr'][k]=float(thr)
d.setdefault('exit',{})
d['exit']['min_hold']=int(hold)
fn=f"conf/params_thr{thr}_h{hold}.yml"
yaml.safe_dump(d, open(fn,'w',encoding='utf-8'), sort_keys=False, allow_unicode=True)
print("WROTE", fn)
PY
              OUT="out_thr${THR}_h${HOLD}"
              python ci/wfo_entry.py --params "conf/params_thr${THR}_h${HOLD}.yml" --data-root "." --csv-glob "$CSVG" --outdir "$OUT"
              # post-enrich each OUT
              python - <<'PY'
import os, json, pandas as pd, numpy as np
outdir=os.environ['OUTDIR']
tp=os.path.join(outdir,"trades.csv"); sp=os.path.join(outdir,"summary.json")
if os.path.exists(tp):
  df=pd.read_csv(tp)
  ev=next((c for c in df.columns if c.lower()=="event"), None)
  if ev is not None:
    df=df[df[ev].astype(str).str.upper()=="EXIT"].copy()
  pnl=None
  for c in ["pnl_close_based","pnl","pnl_value","pnl_usd","pnl_krw","pnl_pct","pnl_percent","ret","return","pnl_close"]:
    if c in df.columns: pnl=c; break
  if pnl is None:
    df["pnl_close_based"]=0.0; pnl="pnl_close_based"
    df.to_csv(tp,index=False)
  s=pd.to_numeric(df[pnl], errors="coerce").fillna(0.0)
  summ={}
  if os.path.exists(sp):
    summ=json.load(open(sp,"r",encoding="utf-8"))
  summ["exits"]=int(len(s))
  summ["win_rate"]=float((s>0).sum())/max(1,len(s))
  pos=float(s[s>0].sum()); neg=float(s[s<0].sum())
  summ["profit_factor"]=(pos/abs(neg)) if neg!=0 else None
  summ["cum_pnl_close_based"]=float(s.sum())
  json.dump(summ, open(sp,"w",encoding="utf-8"), ensure_ascii=False, indent=2)
PY
              ( cd "$OUT" && zip -rq ../sweep_${THR}_${HOLD}.zip . )
            done
          done
          AGG="sweep_3x3_bundle_${GITHUB_SHA::7}.zip"
          zip -rq "$AGG" sweep_*.zip
          mkdir -p _agg && mv "$AGG" _agg/

      - name: Upload aggregated artifact (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: sweep_3x3_bundle
          path: _agg/sweep_3x3_bundle_*.zip