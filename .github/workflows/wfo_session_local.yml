name: WFO All-in-One V2.1.3

on:
  workflow_dispatch:
    inputs:
      PARAMS_FILE:
        description: "params path (dot preferred, fallback underscore)"
        required: false
        default: "conf/params.v2.yml"
      DATA_ZIP:
        description: "data zip at repo root (optional)"
        required: false
        default: "ETHUSDT_1min_2020_2025.zip"
      CSV_GLOB:
        description: "csv glob override (if no zip)"
        required: false
        default: "**/*ETHUSDT*1min*2020*2025*.csv"
      ENTRYPOINTS:
        description: "python entrypoints (| separated)"
        required: false
        default: "run_4u.py|backtest/run_4u.py|run.py|backtest/runner.py"
      PY_VERSION:
        description: "python version"
        required: false
        default: "3.11"
      RUN_SINGLE:
        description: "also run single baseline? (true/false)"
        required: false
        default: "true"
      GRID_THR:
        description: "override thr list (comma)"
        required: false
        default: ""
      GRID_HOLD:
        description: "override hold list (comma)"
        required: false
        default: ""
      GRID_FILTER:
        description: "override filter list (comma)"
        required: false
        default: ""
      BUNDLE_NAME:
        description: "final single zip name (no .zip)"
        required: false
        default: "WFO_results_all"

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
      csv_glob: ${{ steps.mk.outputs.csv_glob }}
      params_used: ${{ steps.params_out.outputs.PF }}
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ github.event.inputs.PY_VERSION }}

      - name: Deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install pandas numpy pyyaml

      - name: Resolve params (dot -> underscore fallback)
        id: params_out
        run: |
          set -euo pipefail
          PF="${{ github.event.inputs.PARAMS_FILE }}"
          if [ ! -f "$PF" ] && [ "$PF" = "conf/params.v2.yml" ] && [ -f "conf/params_v2.yml" ]; then
            PF="conf/params_v2.yml"
          fi
          if [ ! -f "$PF" ]; then
            echo "Error: params file not found (conf/params.v2.yml or conf/params_v2.yml)"; exit 3
          fi
          echo "PF=$PF" >> "$GITHUB_OUTPUT"

      - name: Build matrix (+ overrides)
        id: mk
        env:
          PF: ${{ steps.params_out.outputs.PF }}
          CSV_GLOB_IN: ${{ github.event.inputs.CSV_GLOB }}
          GRID_THR: ${{ github.event.inputs.GRID_THR }}
          GRID_HOLD: ${{ github.event.inputs.GRID_HOLD }}
          GRID_FILTER: ${{ github.event.inputs.GRID_FILTER }}
        run: |
          set -euo pipefail
          : > _mk.py
          echo "import os,yaml,json" >> _mk.py
          echo "pf=os.environ['PF']" >> _mk.py
          echo "p=yaml.safe_load(open(pf,'r',encoding='utf-8'))" >> _mk.py
          echo "csvg=os.environ.get('CSV_GLOB_IN') or p.get('csv_glob','**/*.csv')" >> _mk.py
          echo "thr=(p.get('gate',{}) or {}).get('thr',[3.2,3.8])" >> _mk.py
          echo "hold=p.get('hold',[6,8])" >> _mk.py
          echo "filt=p.get('filter',['ema','none'])" >> _mk.py
          echo "def ov(env,cur,cast=float):" >> _mk.py
          echo "  v=os.environ.get(env,'').strip()" >> _mk.py
          echo "  if not v: return cur" >> _mk.py
          echo "  xs=[t.strip() for t in v.split(',') if t.strip()]" >> _mk.py
          echo "  if env!='GRID_FILTER':" >> _mk.py
          echo "    try: xs=[cast(x) for x in xs]" >> _mk.py
          echo "    except Exception: pass" >> _mk.py
          echo "  return xs or cur" >> _mk.py
          echo "thr=ov('GRID_THR',thr,float)" >> _mk.py
          echo "hold=ov('GRID_HOLD',hold,int)" >> _mk.py
          echo "filt=ov('GRID_FILTER',filt,str)" >> _mk.py
          echo "open('matrix.json','w',encoding='utf-8').write(json.dumps({'thr':thr,'hold':hold,'filter':filt}))" >> _mk.py
          echo "open('csv_glob.txt','w',encoding='utf-8').write(str(csvg))" >> _mk.py
          python _mk.py
          echo "matrix=$(cat matrix.json)" >> "$GITHUB_OUTPUT"
          echo "csv_glob=$(cat csv_glob.txt)" >> "$GITHUB_OUTPUT"

  single:
    if: ${{ github.event.inputs.RUN_SINGLE == 'true' }}
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ github.event.inputs.PY_VERSION }}

      - name: Deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install pandas numpy pyyaml

      - name: Unzip data if present
        run: |
          set -euo pipefail
          if [ -f "${{ github.event.inputs.DATA_ZIP }}" ]; then unzip -o "${{ github.event.inputs.DATA_ZIP }}" || true; fi

      - name: Preflight (auto-detect new/legacy)
        run: |
          set -euo pipefail
          PFS=""
          if [ -f "ci/preflight_strict.py" ]; then
            PFS="ci/preflight_strict.py"
          elif [ -f "preflight_strict.py" ]; then
            PFS="preflight_strict.py"
          fi
          if [ -n "${PFS}" ]; then
            if grep -q -- "--data-root" "${PFS}"; then
              mkdir -p _preflight_out
              python "${PFS}" \
                --data-root "${GITHUB_WORKSPACE}" \
                --csv-glob "${{ needs.prep.outputs.csv_glob }}" \
                --outdir "_preflight_out"
            else
              python "${PFS}" "${{ needs.prep.outputs.csv_glob }}"
            fi
          else
            : > _pre.py
            echo "import sys,glob,pandas as pd" >> _pre.py
            echo "g=sys.argv[1]" >> _pre.py
            echo "paths=glob.glob(g,recursive=True)" >> _pre.py
            echo "assert paths, f'No CSV found by glob: {g}'" >> _pre.py
            echo "df=pd.read_csv(paths[0],nrows=5)" >> _pre.py
            echo "req=['open_time','open','high','low','close','volume']" >> _pre.py
            echo "miss=[c for c in req if c not in df.columns]" >> _pre.py
            echo "assert not miss, f'Missing columns: {miss} in {paths[0]}'" >> _pre.py
            python _pre.py "${{ needs.prep.outputs.csv_glob }}"
          fi

      - name: Run single (entrypoint scan)
        env:
          ENTRYPOINTS: ${{ github.event.inputs.ENTRYPOINTS }}
        run: |
          set -euo pipefail
          IFS='|' read -ra EPS <<< "${ENTRYPOINTS}"
          found=0
          for ep in "${EPS[@]}"; do
            if [ -f "$ep" ]; then
              set +e
              python "$ep"
              rc=$?
              set -e
              if [ $rc -eq 0 ]; then found=1; break; fi
            fi
          done
          if [ $found -eq 0 ]; then echo "Warning: no entrypoint succeeded" >&2; fi
          mkdir -p out_single
          [ -f summary.json ] || echo "{}" > summary.json
          [ -f gating_debug.json ] || echo "{}" > gating_debug.json
          [ -f preds_test.csv ] || echo "empty" > preds_test.csv
          [ -f trades.csv ] || echo "empty" > trades.csv
          mv -f summary.json gating_debug.json preds_test.csv trades.csv out_single/
          ( cd out_single && zip -rq ../bundle_single.zip . )

      - name: Upload bundle_single.zip
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: bundle_single
          path: bundle_single.zip
          if-no-files-found: warn

  wfo:
    needs: prep
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix: ${{ fromJson(needs.prep.outputs.matrix) }}
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ github.event.inputs.PY_VERSION }}

      - name: Deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install pandas numpy pyyaml

      - name: Unzip data if present
        run: |
          set -euo pipefail
          if [ -f "${{ github.event.inputs.DATA_ZIP }}" ]; then unzip -o "${{ github.event.inputs.DATA_ZIP }}" || true; fi

      - name: Preflight (auto-detect new/legacy)
        run: |
          set -euo pipefail
          PFS=""
          if [ -f "ci/preflight_strict.py" ]; then
            PFS="ci/preflight_strict.py"
          elif [ -f "preflight_strict.py" ]; then
            PFS="preflight_strict.py"
          fi
          if [ -n "${PFS}" ]; then
            if grep -q -- "--data-root" "${PFS}"; then
              mkdir -p _preflight_out
              python "${PFS}" \
                --data-root "${GITHUB_WORKSPACE}" \
                --csv-glob "${{ needs.prep.outputs.csv_glob }}" \
                --outdir "_preflight_out"
            else
              python "${PFS}" "${{ needs.prep.outputs.csv_glob }}"
            fi
          else
            : > _pre.py
            echo "import sys,glob,pandas as pd" >> _pre.py
            echo "g=sys.argv[1]" >> _pre.py
            echo "paths=glob.glob(g,recursive=True)" >> _pre.py
            echo "assert paths, f'No CSV found by glob: {g}'" >> _pre.py
            echo "df=pd.read_csv(paths[0],nrows=5)" >> _pre.py
            echo "req=['open_time','open','high','low','close','volume']" >> _pre.py
            echo "miss=[c for c in req if c not in df.columns]" >> _pre.py
            echo "assert not miss, f'Missing columns: {miss} in {paths[0]}'" >> _pre.py
            python _pre.py "${{ needs.prep.outputs.csv_glob }}"
          fi

      - name: Run WFO member
        env:
          THR: ${{ matrix.thr }}
          HOLD: ${{ matrix.hold }}
          FILTER: ${{ matrix.filter }}
          ENTRYPOINTS: ${{ github.event.inputs.ENTRYPOINTS }}
        run: |
          set -euo pipefail
          IFS='|' read -ra EPS <<< "${ENTRYPOINTS}"
          found=0
          for ep in "${EPS[@]}"; do
            if [ -f "$ep" ]; then
              set +e
              python "$ep"
              rc=$?
              set -e
              if [ $rc -eq 0 ]; then found=1; break; fi
            fi
          done
          if [ $found -eq 0 ]; then echo "Warning: no entrypoint succeeded" >&2; fi
          OUT="out_${THR}_${HOLD}_${FILTER}"
          mkdir -p "$OUT"
          [ -f summary.json ] || echo "{}" > summary.json
          [ -f gating_debug.json ] || echo "{}" > gating_debug.json
          [ -f preds_test.csv ] || echo "empty" > preds_test.csv
          [ -f trades.csv ] || echo "empty" > trades.csv
          mv -f summary.json gating_debug.json preds_test.csv trades.csv "$OUT"/
          ( cd "$OUT" && zip -rq "../bundle_${THR}_${HOLD}_${FILTER}.zip" . )

      - name: Upload WFO bundle
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: bundle_${{ matrix.thr }}_${{ matrix.hold }}_${{ matrix.filter }}
          path: bundle_${{ matrix.thr }}_${{ matrix.hold }}_${{ matrix.filter }}.zip
          if-no-files-found: warn

  finalize:
    needs: [wfo]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts (pinned)
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          path: all_artifacts

      - name: Debug list (tree + sizes)
        run: |
          set -euo pipefail
          echo "==== all_artifacts tree ===="
          ls -R all_artifacts || true
          echo "============================"
          echo "ZIP files found:"
          find all_artifacts -type f -name "*.zip" -printf "%p (%k KB)\n" | sort || true

      - name: Make FINAL single ZIP
        run: |
          set -euo pipefail
          cd all_artifacts
          zip -rq "../${{ github.event.inputs.BUNDLE_NAME }}.zip" .

      - name: Upload FINAL ZIP (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: ${{ github.event.inputs.BUNDLE_NAME }}
          path: ${{ github.event.inputs.BUNDLE_NAME }}.zip
          if-no-files-found: error
