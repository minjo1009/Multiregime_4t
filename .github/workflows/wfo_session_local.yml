name: WFO Session Local V2.1.3
on:
  workflow_dispatch:
    inputs:
      PARAMS_FILE:
        description: "Path to params file"
        required: false
        default: "conf/params.v2.yml"

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
      csv_glob: ${{ steps.mk.outputs.csv_glob }}
    steps:
      - name: Validate pinned SHAs
        run: |
          set -euo pipefail
          echo "checkout=08c6903cd8c0fde910a37f88322edcfb5dd907a8"
          echo "setup-python=a26af69be951a213d495a4c3e4e4022e16d87065"
          echo "upload-artifact=ea165f8d65b6e75b540449e92b4886f43607fa02"

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Verify params file
        run: |
          set -euo pipefail
          test -f "${{ github.event.inputs.PARAMS_FILE }}" || { echo "Error: conf/params.v2.yml missing in repo root. Add it and rerun."; exit 3; }

      - name: Build matrix from params
        id: mk
        env:
          PARAMS_FILE: ${{ github.event.inputs.PARAMS_FILE }}
        run: |
          set -euo pipefail
          printf '%s\n' \
          'import os, json, yaml' \
          'pf=os.environ.get("PARAMS_FILE","conf/params.v2.yml")' \
          'p=yaml.safe_load(open(pf,"r",encoding="utf-8"))' \
          'thr=p.get("gate",{}).get("thr",[3.2,3.8])' \
          'hold=p.get("hold",[6,8])' \
          'filt=p.get("filter",["ema","none"])' \
          'csvg=p.get("csv_glob","**/*.csv")' \
          'm={"thr":thr,"hold":hold,"filter":filt}' \
          'open("matrix.json","w",encoding="utf-8").write(json.dumps(m))' \
          'open("csv_glob.txt","w",encoding="utf-8").write(str(csvg))' \
          > build_matrix.py
          python build_matrix.py
          echo "matrix=$(cat matrix.json)" >> "$GITHUB_OUTPUT"
          echo "csv_glob=$(cat csv_glob.txt)" >> "$GITHUB_OUTPUT"

  grid:
    needs: prep
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix: ${{ fromJson(needs.prep.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install pandas numpy pyyaml

      - name: Unzip data if present
        run: |
          set -euo pipefail
          if [ -f "ETHUSDT_1min_2020_2025.zip" ]; then
            unzip -o "ETHUSDT_1min_2020_2025.zip" || true
          fi

      - name: Preflight (CSV detect + schema)
        run: |
          set -euo pipefail
          printf '%s\n' \
          'import sys,glob,pandas as pd' \
          'req=["open_time","open","high","low","close","volume"]' \
          'g=sys.argv[1]' \
          'paths=glob.glob(g,recursive=True)' \
          'assert paths, f"No CSV found by glob: {g}"' \
          'df=pd.read_csv(paths[0],nrows=5)' \
          'miss=[c for c in req if c not in df.columns]' \
          'assert not miss, f"Missing columns: {miss} in {paths[0]}"' \
          'print("OK preflight:",paths[0])' \
          > _ci_preflight.py
          python _ci_preflight.py "${{ needs.prep.outputs.csv_glob }}"

      - name: Run backtest (matrix member)
        env:
          THR: ${{ matrix.thr }}
          HOLD: ${{ matrix.hold }}
          FILTER: ${{ matrix.filter }}
        run: |
          set -euo pipefail
          set +e
          python run_4u.py || python backtest/run_4u.py || python run.py || python backtest/runner.py
          rc=$?
          set -e
          mkdir -p out_${{ matrix.thr }}_${{ matrix.hold }}_${{ matrix.filter }}
          [ -f summary.json ] || echo "{}" > summary.json
          [ -f gating_debug.json ] || echo "{}" > gating_debug.json
          [ -f preds_test.csv ] || echo "empty" > preds_test.csv
          [ -f trades.csv ] || echo "empty" > trades.csv
          mv -f summary.json out_${{ matrix.thr }}_${{ matrix.hold }}_${{ matrix.filter }}/
          mv -f gating_debug.json out_${{ matrix.thr }}_${{ matrix.hold }}_${{ matrix.filter }}/
          mv -f preds_test.csv out_${{ matrix.thr }}_${{ matrix.hold }}_${{ matrix.filter }}/
          mv -f trades.csv out_${{ matrix.thr }}_${{ matrix.hold }}_${{ matrix.filter }}/
          cd out_${{ matrix.thr }}_${{ matrix.hold }}_${{ matrix.filter }}
          zip -r ../bundle_${{ matrix.thr }}_${{ matrix.hold }}_${{ matrix.filter }}.zip .
          cd ..
          exit 0

      - name: Upload bundle (this member)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: bundle_${{ matrix.thr }}_${{ matrix.hold }}_${{ matrix.filter }}
          path: bundle_${{ matrix.thr }}_${{ matrix.hold }}_${{ matrix.filter }}.zip
          if-no-files-found: warn
