name: WFO_Session_Local

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP_PATH:
        description: "Path to code zip in repo"
        required: false
        default: "strategy_v2_codepack_v2.1.3.zip"
        type: string
      DATA_ZIP_PATH:
        description: "Path to data zip in repo"
        required: false
        default: "ETHUSDT_1min_2020_2025.zip"
        type: string
      CSV_GLOB:
        description: "CSV glob pattern inside data zip"
        required: false
        default: "**/*ETHUSDT*1min*2020*2025*.csv"
        type: string
      FEES_BPS:
        description: "Trading fee in bps (e.g., 7.5)"
        required: false
        default: "7.5"
        type: string
      CHAMPION_CONFIG:
        description: "Champion config string"
        required: false
        default: "grid_p0.83_tp2.2_sl0.45_cd34_mh12_ofi0.42_thi0.74"
        type: string
      SPLITS:
        description: "Number of WFO splits"
        required: false
        default: "4"
        type: string
      TZ:
        description: "IANA timezone for session split"
        required: false
        default: "Asia/Seoul"
        type: string

jobs:
  validate_shas:
    runs-on: ubuntu-latest
    env:
      CHECKOUT_SHA: "08c6903cd8c0fde910a37f88322edcfb5dd907a8"
      SETUP_PYTHON_SHA: "a26af69be951a213d495a4c3e4e4022e16d87065"
      UPLOAD_ARTIFACT_SHA: "ea165f8d65b6e75b540449e92b4886f43607fa02"
    steps:
      - name: Validate pinned SHAs exist
        run: |
          set -euo pipefail
          echo "[PIN] validating SHAs by fetching commits..."
          mkdir -p _pincheck && cd _pincheck
          git -c init.defaultBranch=main init checkout && cd checkout
          git fetch --depth 1 https://github.com/actions/checkout "${ env.CHECKOUT_SHA }"
          [ "$(git cat-file -t "${ env.CHECKOUT_SHA }")" = "commit" ] || { echo "::error::checkout SHA not a commit"; exit 2; }
          cd ..
          git -c init.defaultBranch=main init setup_python && cd setup_python
          git fetch --depth 1 https://github.com/actions/setup-python "${ env.SETUP_PYTHON_SHA }"
          [ "$(git cat-file -t "${ env.SETUP_PYTHON_SHA }")" = "commit" ] || { echo "::error::setup-python SHA not a commit"; exit 2; }
          cd ..
          git -c init.defaultBranch=main init upload_artifact && cd upload_artifact
          git fetch --depth 1 https://github.com/actions/upload-artifact "${ env.UPLOAD_ARTIFACT_SHA }"
          [ "$(git cat-file -t "${ env.UPLOAD_ARTIFACT_SHA }")" = "commit" ] || { echo "::error::upload-artifact SHA not a commit"; exit 2; }
          cd ..
          echo "[PIN] ok"

  single_run:
    needs: validate_shas
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"
      - name: Install base deps
        run: |
          set -euo pipefail
          python -V
          pip install --upgrade pip
          pip install pandas numpy scikit-learn pyyaml pytz
      - name: Prepare workspace from repo files
        run: |
          set -euo pipefail
          WORK=work
          mkdir -p "${ env.WORK }/code" "${ env.WORK }/data" "${ env.WORK }/out/single" "_out_4u/run"
          cp -f "${ inputs.CODE_ZIP_PATH }" "${ env.WORK }/code.zip"
          cp -f "${ inputs.DATA_ZIP_PATH }" "${ env.WORK }/data.zip"
          unzip -q "${ env.WORK }/code.zip" -d "${ env.WORK }/code"
          unzip -q "${ env.WORK }/data.zip" -d "${ env.WORK }/data"
      - name: Write preflight to work/
        run: |
          set -euo pipefail
          mkdir -p work
          {
            echo 'import os,sys,glob,json'
            echo 'import pandas as pd'
            echo 'def find_csv(root,patt):'
            echo '  g=glob.glob(os.path.join(root,patt),recursive=True)'
            echo '  if not g: raise SystemExit("CSVDetect: no csv")'
            echo '  return g[0]'
            echo 'def read_df(path):'
            echo '  df=pd.read_csv(path)'
            echo '  cols={"open_time","open","high","low","close","volume"}'
            echo '  if not cols.issubset(df.columns):'
            echo '    raise SystemExit("Preflight: missing columns")'
            echo '  ot=df["open_time"]'
            echo '  try:'
            echo '    if pd.api.types.is_numeric_dtype(ot):'
            echo '      dt=pd.to_datetime(ot,unit="ms",utc=True)'
            echo '    else:'
            echo '      dt=pd.to_datetime(ot,utc=True)'
            echo '  except Exception:'
            echo '    dt=pd.to_datetime(ot,utc=True,errors="coerce")'
            echo '  df["dt_utc"]=dt'
            echo '  return df'
            echo 'def write_cfg(path,data_path,fee_bps,champion):'
            echo '  os.makedirs(os.path.dirname(path),exist_ok=True)'
            echo '  with open(path,"w") as f:'
            echo '    f.write("data_path: \"" + data_path + "\"\n")'
            echo '    f.write("fee_bps: " + str(fee_bps) + "\n")'
            echo '    f.write("champion_config: \"" + champion + "\"\n")'
            echo 'if __name__=="__main__":'
            echo '  mode=os.environ.get("MODE","single")'
            echo '  root_csv="work/data"'
            echo '  patt=os.environ.get("CSV_GLOB","**/*.csv")'
            echo '  fee=os.environ.get("FEES_BPS","7.5")'
            echo '  tz=os.environ.get("TZ","Asia/Seoul")'
            echo '  champion=os.environ.get("CHAMPION_CONFIG","")'
            echo '  out_csv="work/input.csv"'
            echo '  p=find_csv(root_csv,patt)'
            echo '  df=read_df(p)'
            echo '  if mode=="single":'
            echo '    df.to_csv(out_csv,index=False)'
            echo '  elif mode=="wfo":'
            echo '    k=int(os.environ.get("K","4"))'
            echo '    i=int(os.environ.get("I","0"))'
            echo '    dt=df["dt_utc"]'
            echo '    t0=dt.min(); t1=dt.max()'
            echo '    edges=pd.date_range(t0,t1,periods=k+1)'
            echo '    s=edges[i]; e=edges[i+1]'
            echo '    m=(dt>=s)&(dt<e)'
            echo '    df[m].to_csv(out_csv,index=False)'
            echo '  elif mode=="session":'
            echo '    sname=os.environ.get("SESSION","ASIA")'
            echo '    dfl=df.copy()'
            echo '    dfl["dt_loc"]=dfl["dt_utc"].dt.tz_convert(tz)'
            echo '    hr=dfl["dt_loc"].dt.hour'
            echo '    if sname=="ASIA":'
            echo '      m=(hr>=9)&(hr<17)'
            echo '    elif sname=="EU":'
            echo '      m=(hr>=17)|(hr<1)'
            echo '    else:'
            echo '      m=(hr>=1)&(hr<9)'
            echo '    dfl[m].drop(columns=["dt_loc"]).to_csv(out_csv,index=False)'
            echo '  else:'
            echo '    raise SystemExit("Runtime: unknown MODE")'
            echo '  write_cfg("conf/config.effective.yml",out_csv,fee,champion)'
          } > work/preflight_strict.py
      - name: Single run
        run: |
          set -euo pipefail
          export MODE=single
          export CSV_GLOB="${ inputs.CSV_GLOB }"
          export FEES_BPS="${ inputs.FEES_BPS }"
          export TZ="${ inputs.TZ }"
          export CHAMPION_CONFIG="${ inputs.CHAMPION_CONFIG }"
          python work/preflight_strict.py || { echo "::error::Preflight failed"; exit 3; }
          EP=""
          [ -f work/code/run_4u.py ] && EP="work/code/run_4u.py"
          [ -z "$EP" ] && [ -f work/code/backtest/run_4u.py ] && EP="work/code/backtest/run_4u.py"
          [ -z "$EP" ] && [ -f work/code/run.py ] && EP="work/code/run.py"
          [ -z "$EP" ] && [ -f work/code/backtest/runner.py ] && EP="work/code/backtest/runner.py"
          echo "[RUN] entrypoint=$EP"
          if [ -n "$EP" ]; then
            PYTHONPATH=work/code:work/code/src:work/code/src/trend4u python "$EP" || true
          else
            echo "::warning::No entrypoint found; skipping run"
          fi
          mkdir -p _out_4u/run work/out/single
          [ -f summary.json ] && cp summary.json work/out/single/ || echo "{}" > work/out/single/summary.json
          [ -f gating_debug.json ] && cp gating_debug.json work/out/single/ || echo "{}" > work/out/single/gating_debug.json
          [ -f preds_test.csv ] && cp preds_test.csv work/out/single/ || printf "" > work/out/single/preds_test.csv
          [ -f trades.csv ] && cp trades.csv work/out/single/ || printf "" > work/out/single/trades.csv
          [ -f summary_cost.json ] && cp summary_cost.json work/out/single/ || true
      - name: Zip single
        run: |
          set -euo pipefail
          cd work/out
          zip -qr ../single_results.zip single
      - name: Upload artifact (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: single_results
          path: work/single_results.zip
          if-no-files-found: warn

  wfo:
    needs: validate_shas
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"
      - name: Install deps and unzip
        run: |
          set -euo pipefail
          pip install --upgrade pip
          pip install pandas numpy scikit-learn pyyaml pytz
          WORK=work
          mkdir -p "${ env.WORK }/code" "${ env.WORK }/data" "${ env.WORK }/out/wfo"
          cp -f "${ inputs.CODE_ZIP_PATH }" "${ env.WORK }/code.zip"
          cp -f "${ inputs.DATA_ZIP_PATH }" "${ env.WORK }/data.zip"
          unzip -q "${ env.WORK }/code.zip" -d "${ env.WORK }/code"
          unzip -q "${ env.WORK }/data.zip" -d "${ env.WORK }/data"
      - name: Write preflight to work/
        run: |
          set -euo pipefail
          mkdir -p work
          {
            echo 'import os,sys,glob,json'
            echo 'import pandas as pd'
            echo 'def find_csv(root,patt):'
            echo '  g=glob.glob(os.path.join(root,patt),recursive=True)'
            echo '  if not g: raise SystemExit("CSVDetect: no csv")'
            echo '  return g[0]'
            echo 'def read_df(path):'
            echo '  df=pd.read_csv(path)'
            echo '  cols={"open_time","open","high","low","close","volume"}'
            echo '  if not cols.issubset(df.columns):'
            echo '    raise SystemExit("Preflight: missing columns")'
            echo '  ot=df["open_time"]'
            echo '  try:'
            echo '    if pd.api.types.is_numeric_dtype(ot):'
            echo '      dt=pd.to_datetime(ot,unit="ms",utc=True)'
            echo '    else:'
            echo '      dt=pd.to_datetime(ot,utc=True)'
            echo '  except Exception:'
            echo '    dt=pd.to_datetime(ot,utc=True,errors="coerce")'
            echo '  df["dt_utc"]=dt'
            echo '  return df'
            echo 'def write_cfg(path,data_path,fee_bps,champion):'
            echo '  os.makedirs(os.path.dirname(path),exist_ok=True)'
            echo '  with open(path,"w") as f:'
            echo '    f.write("data_path: \"" + data_path + "\"\n")'
            echo '    f.write("fee_bps: " + str(fee_bps) + "\n")'
            echo '    f.write("champion_config: \"" + champion + "\"\n")'
            echo 'if __name__=="__main__":'
            echo '  mode=os.environ.get("MODE","single")'
            echo '  root_csv="work/data"'
            echo '  patt=os.environ.get("CSV_GLOB","**/*.csv")'
            echo '  fee=os.environ.get("FEES_BPS","7.5")'
            echo '  tz=os.environ.get("TZ","Asia/Seoul")'
            echo '  champion=os.environ.get("CHAMPION_CONFIG","")'
            echo '  out_csv="work/input.csv"'
            echo '  p=find_csv(root_csv,patt)'
            echo '  df=read_df(p)'
            echo '  if mode=="single":'
            echo '    df.to_csv(out_csv,index=False)'
            echo '  elif mode=="wfo":'
            echo '    k=int(os.environ.get("K","4"))'
            echo '    i=int(os.environ.get("I","0"))'
            echo '    dt=df["dt_utc"]'
            echo '    t0=dt.min(); t1=dt.max()'
            echo '    edges=pd.date_range(t0,t1,periods=k+1)'
            echo '    s=edges[i]; e=edges[i+1]'
            echo '    m=(dt>=s)&(dt<e)'
            echo '    df[m].to_csv(out_csv,index=False)'
            echo '  elif mode=="session":'
            echo '    sname=os.environ.get("SESSION","ASIA")'
            echo '    dfl=df.copy()'
            echo '    dfl["dt_loc"]=dfl["dt_utc"].dt.tz_convert(tz)'
            echo '    hr=dfl["dt_loc"].dt.hour'
            echo '    if sname=="ASIA":'
            echo '      m=(hr>=9)&(hr<17)'
            echo '    elif sname=="EU":'
            echo '      m=(hr>=17)|(hr<1)'
            echo '    else:'
            echo '      m=(hr>=1)&(hr<9)'
            echo '    dfl[m].drop(columns=["dt_loc"]).to_csv(out_csv,index=False)'
            echo '  else:'
            echo '    raise SystemExit("Runtime: unknown MODE")'
            echo '  write_cfg("conf/config.effective.yml",out_csv,fee,champion)'
          } > work/preflight_strict.py
      - name: Run WFO splits
        run: |
          set -euo pipefail
          export CSV_GLOB="${ inputs.CSV_GLOB }"
          export FEES_BPS="${ inputs.FEES_BPS }"
          export TZ="${ inputs.TZ }"
          export CHAMPION_CONFIG="${ inputs.CHAMPION_CONFIG }"
          K="${ inputs.SPLITS }"
          EP=""
          [ -f work/code/run_4u.py ] && EP="work/code/run_4u.py"
          [ -z "$EP" ] && [ -f work/code/backtest/run_4u.py ] && EP="work/code/backtest/run_4u.py"
          [ -z "$EP" ] && [ -f work/code/run.py ] && EP="work/code/run.py"
          [ -z "$EP" ] && [ -f work/code/backtest/runner.py ] && EP="work/code/backtest/runner.py"
          echo "[RUN] entrypoint=$EP"
          for i in $(seq 0 $((K-1))); do
            echo "[WFO] split $i/$((K-1))"
            export MODE=wfo
            export K="$K"
            export I="$i"
            python work/preflight_strict.py || { echo "::error::Preflight failed"; exit 3; }
            if [ -n "$EP" ]; then
              PYTHONPATH=work/code:work/code/src:work/code/src/trend4u python "$EP" || true
            fi
            outdir="work/out/wfo/split_${i}"
            mkdir -p "$outdir"
            [ -f summary.json ] && mv -f summary.json "$outdir/" || echo "{}" > "$outdir/summary.json"
            [ -f gating_debug.json ] && mv -f gating_debug.json "$outdir/" || echo "{}" > "$outdir/gating_debug.json"
            [ -f preds_test.csv ] && mv -f preds_test.csv "$outdir/" || printf "" > "$outdir/preds_test.csv"
            [ -f trades.csv ] && mv -f trades.csv "$outdir/" || printf "" > "$outdir/trades.csv"
            [ -f summary_cost.json ] && mv -f summary_cost.json "$outdir/" || true
          done
      - name: Zip WFO
        run: |
          set -euo pipefail
          cd work/out
          zip -qr ../wfo_results.zip wfo
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: wfo_results
          path: work/wfo_results.zip
          if-no-files-found: warn

  sessions:
    needs: validate_shas
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"
      - name: Install deps and unzip
        run: |
          set -euo pipefail
          pip install --upgrade pip
          pip install pandas numpy scikit-learn pyyaml pytz
          WORK=work
          mkdir -p "${ env.WORK }/code" "${ env.WORK }/data" "${ env.WORK }/out/sessions"
          cp -f "${ inputs.CODE_ZIP_PATH }" "${ env.WORK }/code.zip"
          cp -f "${ inputs.DATA_ZIP_PATH }" "${ env.WORK }/data.zip"
          unzip -q "${ env.WORK }/code.zip" -d "${ env.WORK }/code"
          unzip -q "${ env.WORK }/data.zip" -d "${ env.WORK }/data"
      - name: Write preflight to work/
        run: |
          set -euo pipefail
          mkdir -p work
          {
            echo 'import os,sys,glob,json'
            echo 'import pandas as pd'
            echo 'def find_csv(root,patt):'
            echo '  g=glob.glob(os.path.join(root,patt),recursive=True)'
            echo '  if not g: raise SystemExit("CSVDetect: no csv")'
            echo '  return g[0]'
            echo 'def read_df(path):'
            echo '  df=pd.read_csv(path)'
            echo '  cols={"open_time","open","high","low","close","volume"}'
            echo '  if not cols.issubset(df.columns):'
            echo '    raise SystemExit("Preflight: missing columns")'
            echo '  ot=df["open_time"]'
            echo '  try:'
            echo '    if pd.api.types.is_numeric_dtype(ot):'
            echo '      dt=pd.to_datetime(ot,unit="ms",utc=True)'
            echo '    else:'
            echo '      dt=pd.to_datetime(ot,utc=True)'
            echo '  except Exception:'
            echo '    dt=pd.to_datetime(ot,utc=True,errors="coerce")'
            echo '  df["dt_utc"]=dt'
            echo '  return df'
            echo 'def write_cfg(path,data_path,fee_bps,champion):'
            echo '  os.makedirs(os.path.dirname(path),exist_ok=True)'
            echo '  with open(path,"w") as f:'
            echo '    f.write("data_path: \"" + data_path + "\"\n")'
            echo '    f.write("fee_bps: " + str(fee_bps) + "\n")'
            echo '    f.write("champion_config: \"" + champion + "\"\n")'
            echo 'if __name__=="__main__":'
            echo '  mode=os.environ.get("MODE","single")'
            echo '  root_csv="work/data"'
            echo '  patt=os.environ.get("CSV_GLOB","**/*.csv")'
            echo '  fee=os.environ.get("FEES_BPS","7.5")'
            echo '  tz=os.environ.get("TZ","Asia/Seoul")'
            echo '  champion=os.environ.get("CHAMPION_CONFIG","")'
            echo '  out_csv="work/input.csv"'
            echo '  p=find_csv(root_csv,patt)'
            echo '  df=read_df(p)'
            echo '  if mode=="single":'
            echo '    df.to_csv(out_csv,index=False)'
            echo '  elif mode=="wfo":'
            echo '    k=int(os.environ.get("K","4"))'
            echo '    i=int(os.environ.get("I","0"))'
            echo '    dt=df["dt_utc"]'
            echo '    t0=dt.min(); t1=dt.max()'
            echo '    edges=pd.date_range(t0,t1,periods=k+1)'
            echo '    s=edges[i]; e=edges[i+1]'
            echo '    m=(dt>=s)&(dt<e)'
            echo '    df[m].to_csv(out_csv,index=False)'
            echo '  elif mode=="session":'
            echo '    sname=os.environ.get("SESSION","ASIA")'
            echo '    dfl=df.copy()'
            echo '    dfl["dt_loc"]=dfl["dt_utc"].dt.tz_convert(tz)'
            echo '    hr=dfl["dt_loc"].dt.hour'
            echo '    if sname=="ASIA":'
            echo '      m=(hr>=9)&(hr<17)'
            echo '    elif sname=="EU":'
            echo '      m=(hr>=17)|(hr<1)'
            echo '    else:'
            echo '      m=(hr>=1)&(hr<9)'
            echo '    dfl[m].drop(columns=["dt_loc"]).to_csv(out_csv,index=False)'
            echo '  else:'
            echo '    raise SystemExit("Runtime: unknown MODE")'
            echo '  write_cfg("conf/config.effective.yml",out_csv,fee,champion)'
          } > work/preflight_strict.py
      - name: Run sessions
        run: |
          set -euo pipefail
          export CSV_GLOB="${ inputs.CSV_GLOB }"
          export FEES_BPS="${ inputs.FEES_BPS }"
          export TZ="${ inputs.TZ }"
          export CHAMPION_CONFIG="${ inputs.CHAMPION_CONFIG }"
          EP=""
          [ -f work/code/run_4u.py ] && EP="work/code/run_4u.py"
          [ -z "$EP" ] && [ -f work/code/backtest/run_4u.py ] && EP="work/code/backtest/run_4u.py"
          [ -z "$EP" ] && [ -f work/code/run.py ] && EP="work/code/run.py"
          [ -z "$EP" ] && [ -f work/code/backtest/runner.py ] && EP="work/code/backtest/runner.py"
          for S in ASIA EU US; do
            echo "[SESSION] $S"
            export MODE=session
            export SESSION="$S"
            python work/preflight_strict.py || { echo "::error::Preflight failed"; exit 3; }
            if [ -n "$EP" ]; then
              PYTHONPATH=work/code:work/code/src:work/code/src/trend4u python "$EP" || true
            fi
            outdir="work/out/sessions/${S}"
            mkdir -p "$outdir"
            [ -f summary.json ] && mv -f summary.json "$outdir/" || echo "{}" > "$outdir/summary.json"
            [ -f gating_debug.json ] && mv -f gating_debug.json "$outdir/" || echo "{}" > "$outdir/gating_debug.json"
            [ -f preds_test.csv ] && mv -f preds_test.csv "$outdir/" || printf "" > "$outdir/preds_test.csv"
            [ -f trades.csv ] && mv -f trades.csv "$outdir/" || printf "" > "$outdir/trades.csv"
            [ -f summary_cost.json ] && mv -f summary_cost.json "$outdir/" || true
          done
      - name: Bundle all and upload
        run: |
          set -euo pipefail
          cd work
          zip -qr bundle_results.zip out
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: bundle_results
          path: work/bundle_results.zip
          if-no-files-found: warn
