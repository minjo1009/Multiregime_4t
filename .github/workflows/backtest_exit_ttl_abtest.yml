name: Exit/TTL Aâ€“B (param v2, pinned)

on:
  workflow_dispatch:
    inputs:
      CODEPACK_ZIP:
        description: "Path to code pack zip (repo-relative)"
        required: true
        default: "trade_v1.1.4.zip"
      CSV_GLOB:
        description: "Glob for CSV under data/ or tmp/data/"
        required: true
        default: "**/*ETHUSDT*1min*2020*2025*.csv"
      TTL_A:
        description: "Exit TTL for run A"
        required: true
        default: "1"
      TTL_B:
        description: "Exit TTL for run B"
        required: true
        default: "5000"

jobs:
  abtest:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@11bd71901b5b5b1630b4b23b5b2ac60a8a6e3f2

      - name: Setup Python 3.11 (pinned)
        uses: actions/setup-python@a26af69be951a213e376a39fc6824e9f5b089bc5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Prepare workspace
        env:
          CODEPACK_ZIP: ${{ github.event.inputs.CODEPACK_ZIP }}
          CSV_GLOB: ${{ github.event.inputs.CSV_GLOB }}
        run: |
          set -euo pipefail
          mkdir -p _out_4u tmp/trade tmp/data
          echo "[prep] unzip ${CODEPACK_ZIP} -> tmp/trade"
          unzip -o "${CODEPACK_ZIP}" -d tmp/trade >/dev/null
          echo "[prep] search CSV with glob: ${CSV_GLOB}"
          SEL=$(python -c "import glob,os; pat=os.environ.get('CSV_GLOB','**/*.csv'); c=sorted(glob.glob('tmp/data/'+pat, recursive=True) or glob.glob('data/'+pat, recursive=True)); print(c[0] if c else '')")
          if [ -z "${SEL}" ]; then
            echo "No CSV found under tmp/data or data"
            exit 1
          fi
          echo "${SEL}" > _out_4u/CSV_PATH.txt
          echo "[prep] CSV selected: ${SEL}"

      - name: Patch TTL in config (A)
        env:
          TTL: ${{ github.event.inputs.TTL_A }}
        run: |
          set -euo pipefail
          CONF=tmp/trade/conf/config.effective.yml
          mkdir -p tmp/trade/conf
          if [ ! -f "$CONF" ]; then echo "exit: { ttl: 0 }" > "$CONF"; fi
          python - <<'PY'
import os, yaml, pathlib
p=pathlib.Path("tmp/trade/conf/config.effective.yml")
cfg={}
if p.exists():
    try: cfg=yaml.safe_load(p.read_text()) or {}
    except Exception: cfg={}
cfg.setdefault('exit',{})
cfg['exit']['ttl']=int(os.environ.get('TTL','0'))
p.write_text(yaml.safe_dump(cfg, sort_keys=False))
print("[patchA] ttl ->", cfg['exit']['ttl'])
PY

      - name: Run A (TTL=A)
        run: |
          set -euo pipefail
          DAT=$(cat _out_4u/CSV_PATH.txt)
          CONF=tmp/trade/conf/config.effective.yml
          OUT=_out_4u
          if [ -f tmp/trade/run_4u.py ]; then
            python -u tmp/trade/run_4u.py --data_path "$DAT" --config "$CONF" --out_dir "$OUT" || true
          elif [ -f tmp/trade/backtest/runner.py ]; then
            python -u tmp/trade/backtest/runner.py --data_path "$DAT" --config "$CONF" --out_dir "$OUT" || true
          elif [ -f tmp/trade/backtest/engine.py ]; then
            python -u tmp/trade/backtest/engine.py --data_path "$DAT" --config "$CONF" --out_dir "$OUT" || true
          else
            echo "No engine entry found"; exit 1
          fi
          TR=$(python -c "import glob; c=sorted(glob.glob('_out_4u/trades.csv')+glob.glob('_out_4u/*trades*.csv')+glob.glob('**/trades.csv', recursive=True)); print(c[0] if c else '')")
          if [ -z "$TR" ]; then echo "WARN: trades.csv not found after A"; else cp -f "$TR" _out_4u/trades_A.csv; fi

      - name: Clean BETWEEN runs
        run: |
          set -euo pipefail
          rm -f _out_4u/trades.csv

      - name: Patch TTL in config (B)
        env:
          TTL: ${{ github.event.inputs.TTL_B }}
        run: |
          set -euo pipefail
          python - <<'PY'
import os, yaml, pathlib
p=pathlib.Path("tmp/trade/conf/config.effective.yml")
cfg={}
if p.exists():
    try: cfg=yaml.safe_load(p.read_text()) or {}
    except Exception: cfg={}
cfg.setdefault('exit',{})
cfg['exit']['ttl']=int(os.environ.get('TTL','0'))
p.write_text(yaml.safe_dump(cfg, sort_keys=False))
print("[patchB] ttl ->", cfg['exit']['ttl'])
PY

      - name: Run B (TTL=B)
        run: |
          set -euo pipefail
          DAT=$(cat _out_4u/CSV_PATH.txt)
          CONF=tmp/trade/conf/config.effective.yml
          OUT=_out_4u
          if [ -f tmp/trade/run_4u.py ]; then
            python -u tmp/trade/run_4u.py --data_path "$DAT" --config "$CONF" --out_dir "$OUT" || true
          elif [ -f tmp/trade/backtest/runner.py ]; then
            python -u tmp/trade/backtest/runner.py --data_path "$DAT" --config "$CONF" --out_dir "$OUT" || true
          elif [ -f tmp/trade/backtest/engine.py ]; then
            python -u tmp/trade/backtest/engine.py --data_path "$DAT" --config "$CONF" --out_dir "$OUT" || true
          else
            echo "No engine entry found"; exit 1
          fi
          TR=$(python -c "import glob; c=sorted(glob.glob('_out_4u/trades.csv')+glob.glob('_out_4u/*trades*.csv')+glob.glob('**/trades.csv', recursive=True)); print(c[0] if c else '')")
          if [ -z "$TR" ]; then echo "WARN: trades.csv not found after B"; else cp -f "$TR" _out_4u/trades_B.csv; fi

      - name: Assert A != B (TTL effect)
        run: |
          set -euo pipefail
          python - <<'PY'
import hashlib, sys, pathlib
pA=pathlib.Path('_out_4u/trades_A.csv')
pB=pathlib.Path('_out_4u/trades_B.csv')
if not pA.exists() or not pB.exists():
    print("MISSING one of outputs"); sys.exit(2)
def h(p): return hashlib.sha256(p.read_bytes()).hexdigest()
ha, hb = h(pA), h(pB)
print("SHA_A", ha); print("SHA_B", hb)
if ha == hb:
    print("Error: Exit/TTL not applied (A==B)"); sys.exit(3)
PY

      - name: Upload artifacts (pinned SHA)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: exit_ttl_abtest_outputs
          path: |
            _out_4u/trades_A.csv
            _out_4u/trades_B.csv
            _out_4u/CSV_PATH.txt
