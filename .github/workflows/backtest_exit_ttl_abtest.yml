name: Exit/TTL A-B (param v2, pinned)

on:
  workflow_dispatch:
    inputs:
      CODEPACK_ZIP:
        description: "Path to code pack zip (repo-relative)"
        required: true
        default: "trade_v1.1.4.zip"
      CSV_GLOB:
        description: "Glob for CSV under repo (or inside code pack /data)"
        required: true
        default: "**/*ETHUSDT*1min*2020*2025*.csv"
      TTL_A:
        description: "TTL for run A"
        required: true
        default: "1"
      TTL_B:
        description: "TTL for run B"
        required: true
        default: "5000"

jobs:
  abtest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@11bd71901bbe5b1630b4b23b5b2ac60a8a6e3f2

      - name: Setup Python 3.11 (pinned)
        uses: actions/setup-python@a26af69be951a213e376a39fc6824e9f5b089bc5
        with:
          python-version: "3.11"

      - name: Prepare workspace (unpack & pick CSV)
        env:
          CODEPACK_ZIP: ${{ github.event.inputs.CODEPACK_ZIP }}
          CSV_GLOB: ${{ github.event.inputs.CSV_GLOB }}
        run: |
          set -euo pipefail
          mkdir -p tmp/trade tmp/data _out_4u
          python - <<'PY'
          import os, glob, shutil, sys, zipfile, pathlib
          root = os.getcwd()
          z = os.environ['CODEPACK_ZIP']
          d_trade = 'tmp/trade'
          if os.path.isfile(z) and zipfile.is_zipfile(z):
            with zipfile.ZipFile(z) as zf:
              zf.extractall(d_trade)
          elif os.path.isdir(z):
            shutil.copytree(z, d_trade, dirs_exist_ok=True)
          # find csv (repo)
          pat = os.environ['CSV_GLOB']
          cand = sorted(glob.glob(pat, recursive=True))
          # fallback: inside codepack /data
          if not cand:
            cand = sorted(glob.glob(os.path.join(d_trade,'data','*.csv')))
          if not cand:
            print("No CSV found under repo or codepack", file=sys.stderr)
            sys.exit(2)
          sel = cand[0]
          os.makedirs('tmp/data', exist_ok=True)
          dst = os.path.join('tmp/data', os.path.basename(sel))
          shutil.copy2(sel, dst)
          open('_out_4u/CSV_PATH.txt','w').write(dst)
          print("[prep] selected CSV:", dst)
          PY

      - name: Write apply_config_patch.py
        run: |
          set -euo pipefail
          mkdir -p tmp/trade/conf
          python - <<'PY'
          import sys, os, yaml
          eff = 'tmp/trade/conf/config.effective.yml'
          src = 'tmp/trade/conf/config.yml'
          cfg = {}
          if os.path.exists(src):
            cfg = yaml.safe_load(open(src)) or {}
          cfg.setdefault('exit', {})
          ttl = int(os.environ.get('TTL','0'))
          cfg['exit']['ttl'] = ttl
          with open(eff,'w') as f:
            yaml.safe_dump(cfg, f, sort_keys=False)
          print(f"[patch] wrote {eff} ttl={ttl}")
          PY

      - name: Run A (TTL=${{ github.event.inputs.TTL_A }})
        env:
          TTL: ${{ github.event.inputs.TTL_A }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, sys, glob, subprocess, shlex
          from pathlib import Path
          # ensure patched config for A
          os.system("TTL=${TTL} python - <<'PATCH'
import os, yaml
p='tmp/trade/conf/config.effective.yml'
c=yaml.safe_load(open(p)) or {}
c.setdefault('exit',{})['ttl']=int(os.environ.get('TTL','0'))
yaml.safe_dump(c, open(p,'w'), sort_keys=False)
print('[exit-ttl] set to', c['exit']['ttl'])
PATCH")
          data_path = next(iter(Path('tmp/data').glob('*.csv')), None)
          conf = Path('tmp/trade/conf/config.effective.yml')
          candidates = [
            ('run_4u', 'tmp/trade/run_4u.py'),
            ('runner', 'tmp/trade/backtest/runner.py'),
            ('engine', 'tmp/trade/backtest/engine.py'),
          ]
          args = []
          for name,path in candidates:
            if Path(path).exists():
              args = ['python','-u',path,'--data_path',str(data_path),'--config',str(conf),'--out_dir','_out_4u']
              break
          if not args:
            print("No engine entry found", file=sys.stderr); sys.exit(3)
          env = os.environ.copy()
          env['PYTHONPATH']=f"tmp/trade:tmp/trade/backtest:{env.get('PYTHONPATH','')}"
          print("[RUN]", ' '.join(shlex.quote(a) for a in args))
          subprocess.run(args, check=False, env=env)
          got = None
          for p in glob.glob('_out_4u/*.csv')+glob.glob('**/trades.csv', recursive=True)+glob.glob('**/*trades*.csv', recursive=True):
            if p.endswith('.csv') and 'MACOSX' not in p:
              got = p; break
          if got and Path(got).exists():
            Path('_out_4u/trades_A.csv').write_bytes(Path(got).read_bytes())
          PY
          if [ -f _out_4u/trades_A.csv ]; then
            sha256sum _out_4u/trades_A.csv | awk '{print $1}' > _out_4u/sha_A.txt
          else
            echo "MISSING _out_4u/trades_A.csv" && exit 2
          fi

      - name: Clean BETWEEN runs
        run: rm -f _out_4u/trades.csv || true

      - name: Run B (TTL=${{ github.event.inputs.TTL_B }})
        env:
          TTL: ${{ github.event.inputs.TTL_B }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, sys, glob, subprocess, shlex, yaml
          from pathlib import Path
          # rewrite ttl for B
          conf = Path('tmp/trade/conf/config.effective.yml')
          cfg = yaml.safe_load(open(conf)) or {}
          cfg.setdefault('exit',{})['ttl']=int(os.environ.get('TTL','0'))
          yaml.safe_dump(cfg, open(conf,'w'), sort_keys=False)
          data_path = next(iter(Path('tmp/data').glob('*.csv')), None)
          candidates = [
            ('run_4u', 'tmp/trade/run_4u.py'),
            ('runner', 'tmp/trade/backtest/runner.py'),
            ('engine', 'tmp/trade/backtest/engine.py'),
          ]
          args = []
          for name,path in candidates:
            if Path(path).exists():
              args = ['python','-u',path,'--data_path',str(data_path),'--config',str(conf),'--out_dir','_out_4u']
              break
          if not args:
            print("No engine entry found", file=sys.stderr); sys.exit(3)
          env = os.environ.copy()
          env['PYTHONPATH']=f"tmp/trade:tmp/trade/backtest:{env.get('PYTHONPATH','')}"
          print("[RUN]", ' '.join(shlex.quote(a) for a in args))
          subprocess.run(args, check=False, env=env)
          got = None
          for p in glob.glob('_out_4u/*.csv')+glob.glob('**/trades.csv', recursive=True)+glob.glob('**/*trades*.csv', recursive=True):
            if p.endswith('.csv') and 'MACOSX' not in p:
              got = p; break
          if got and Path(got).exists():
            Path('_out_4u/trades_B.csv').write_bytes(Path(got).read_bytes())
          PY
          if [ -f _out_4u/trades_B.csv ]; then
            sha256sum _out_4u/trades_B.csv | awk '{print $1}' > _out_4u/sha_B.txt
          else
            echo "MISSING _out_4u/trades_B.csv" && exit 2
          fi

      - name: Assert A != B (TTL effect)
        run: |
          set -euo pipefail
          echo "SHA_A $(cat _out_4u/sha_A.txt || true)"
          echo "SHA_B $(cat _out_4u/sha_B.txt || true)"
          if cmp -s _out_4u/sha_A.txt _out_4u/sha_B.txt; then
            echo "Error: Exit/TTL not applied (A==B)"; exit 3;
          fi

      - name: Upload artifacts (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: exit_ttl_abtest_outputs
          path: |
            _out_4u/trades_A.csv
            _out_4u/trades_B.csv
            _out_4u/sha_A.txt
            _out_4u/sha_B.txt
