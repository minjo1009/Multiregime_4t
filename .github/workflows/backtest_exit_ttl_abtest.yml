name: Exit/TTL A-B (param v2, pinned)

on:
  workflow_dispatch:
    inputs:
      CODEPACK_ZIP:
        description: "Path to code pack zip (repo-root relative)"
        required: true
        default: "trade_v1.1.4.zip"
      CSV_GLOB:
        description: "Glob for CSV under data/ or tmp/data/"
        required: true
        default: "**/*ETHUSDT*1min*2020*2025*.csv"
      TTL_A:
        description: "TTL for run A"
        required: true
        default: "1"
      TTL_B:
        description: "TTL for run B"
        required: true
        default: "5000"

jobs:
  abtest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned SHA)
        uses: actions/checkout@11bd71901bbe5b1630b4b23b5b2ac60a8a6e3f2

      - name: Setup Python 3.11 (pinned SHA)
        uses: actions/setup-python@a26af69be951a213e376a39fc6824e9f5b089bc5
        with:
          python-version: "3.11"

      - name: Install Python deps (PyYAML)
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Prepare workspace
        env:
          CODEPACK_ZIP: ${{ github.event.inputs.CODEPACK_ZIP }}
          CSV_GLOB: ${{ github.event.inputs.CSV_GLOB }}
        run: |
          set -euo pipefail
          mkdir -p tmp/trade tmp/data _out_4u
          echo "[prep] unzip $CODEPACK_ZIP -> tmp/trade"
          unzip -o "$CODEPACK_ZIP" -d tmp/trade >/dev/null
          echo "[prep] search CSV with glob: $CSV_GLOB"
          SEL=$(python - <<'PY'
          import glob,os,sys
          pat=os.environ.get("CSV_GLOB","**/*.csv")
          c=sorted(glob.glob("tmp/data/"+pat,recursive=True)+glob.glob("data/"+pat,recursive=True))
          print(c[0] if c else "")
PY
          )
          if [ -z "$SEL" ]; then
            echo "No CSV found under tmp/data or data matching: $CSV_GLOB"
            exit 1
          fi
          echo "$SEL" > _out_4u/CSV_PATH.txt
          echo "[prep] CSV selected: $SEL"

      - name: Create run_engine.py (bridge)
        run: |
          set -euo pipefail
          python - <<'PY'
          import sys, os, glob, subprocess
          from pathlib import Path
          root=Path("tmp/trade")
          (root/"conf").mkdir(parents=True, exist_ok=True)
          eff=root/"conf"/"config.effective.yml"
          if not eff.exists():
              eff.write_text("exit: {ttl: 0}\n", encoding="utf-8")
          candidates=[
              ("run_4u", root/"run_4u.py"),
              ("runner", root/"backtest"/"runner.py"),
              ("engine", root/"backtest"/"engine.py"),
          ]
          found=[(n,p) for n,p in candidates if p.exists()]
          if not found:
              print("No engine entry found (run_4u.py or backtest/runner.py or backtest/engine.py)")
              sys.exit(1)
          name,path=found[0]
          shim=Path("run_engine.py")
          shim.write_text(f'''#!/usr/bin/env python3
          import sys, os, subprocess
          from pathlib import Path
          DATA=open("_out_4u/CSV_PATH.txt").read().strip()
          CONF=Path("tmp/trade/conf/config.effective.yml")
          OUT="_out_4u"
          Path(OUT).mkdir(parents=True, exist_ok=True)
          entry="{name}"
          target="{path.as_posix()}"
          def run_try(args):
              try:
                  subprocess.run(args, check=True)
                  return True
              except Exception:
                  return False
          if entry=="run_4u":
              # prefer keyword signature
              if not run_try(["python","-u",target,"--data_path",DATA,"--config",str(CONF),"--out_dir",OUT]):
                  if not run_try(["python","-u",target,DATA,str(CONF),OUT]):
                      sys.exit(2)
          elif entry in ("runner","engine"):
              if not run_try(["python","-u",target,"--data_path",DATA,"--config",str(CONF)]):
                  if not run_try(["python","-u",target,DATA,str(CONF)]):
                      sys.exit(2)
          # normalize trades.csv to _out_4u/trades.csv
          import shutil
          for c in [Path("_out_4u")/"trades.csv", Path("trades.csv"),
                    Path("tmp")/"trades.csv", Path("tmp")/"out"/"trades.csv"]:
              if c.exists():
                  shutil.copyfile(c, Path("_out_4u")/"trades.csv")
                  break
          ''', encoding="utf-8")
          os.chmod("run_engine.py", 0o755)
          print("[bridge] created run_engine.py; entry:", name, "->", path)
PY

      - name: Run A (TTL=${{ github.event.inputs.TTL_A }})
        env:
          TTL: ${{ github.event.inputs.TTL_A }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, yaml
          from pathlib import Path
          p=Path("tmp/trade/conf/config.effective.yml")
          c=yaml.safe_load(p.read_text()) if p.exists() else {}
          c.setdefault("exit",{})["ttl"]=int(os.environ.get("TTL","0"))
          p.write_text(yaml.safe_dump(c, sort_keys=False))
          PY
          python -u run_engine.py
          cp -f _out_4u/trades.csv _out_4u/trades_A.csv

      - name: Clean BETWEEN runs
        run: |
          rm -f _out_4u/trades.csv

      - name: Run B (TTL=${{ github.event.inputs.TTL_B }})
        env:
          TTL: ${{ github.event.inputs.TTL_B }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, yaml
          from pathlib import Path
          p=Path("tmp/trade/conf/config.effective.yml")
          c=yaml.safe_load(p.read_text()) if p.exists() else {}
          c.setdefault("exit",{})["ttl"]=int(os.environ.get("TTL","0"))
          p.write_text(yaml.safe_dump(c, sort_keys=False))
          PY
          python -u run_engine.py
          cp -f _out_4u/trades.csv _out_4u/trades_B.csv

      - name: Assert A != B (TTL effect)
        run: |
          set -euo pipefail
          python - <<'PY'
          import hashlib, sys, pathlib
          a=pathlib.Path("_out_4u/trades_A.csv"); b=pathlib.Path("_out_4u/trades_B.csv")
          if not a.exists() or not b.exists():
              print("MISSING trades_A.csv or trades_B.csv"); sys.exit(2)
          h=lambda p: hashlib.sha256(open(p,'rb').read()).hexdigest()
          sa, sb = h(a), h(b)
          print("SHA_A", sa); print("SHA_B", sb)
          if sa==sb:
              print("Error: Exit/TTL not applied (A==B)"); sys.exit(3)
          PY

      - name: Upload artifacts (pinned SHA)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: exit_ttl_abtest_outputs
          path: |
            _out_4u/trades_A.csv
            _out_4u/trades_B.csv
            tmp/trade/conf/config.effective.yml
            run_engine.py
