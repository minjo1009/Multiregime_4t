name: Exit/TTL A-B (param v2, pinned)

on:
  workflow_dispatch:
    inputs:
      CODEPACK_ZIP:
        description: "Path to code pack zip (repo-root path)"
        required: true
        default: "trade_v1.1.4.zip"
      CSV_GLOB:
        description: "Glob for CSV under data/ or tmp/data/"
        required: true
        default: "**/*ETHUSDT*1min*2020*2025*.csv"
      TTL_A:
        description: "TTL for run A"
        required: true
        default: "1"
      TTL_B:
        description: "TTL for run B"
        required: true
        default: "5000"

jobs:
  abtest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@11bd71901bbe5b1630b4b23b5b2ac60a8a6e3f2

      - name: Setup Python 3.11 (pinned)
        uses: actions/setup-python@a26af69be951a213e376a39fc6824e9f5b089bc5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Prepare workspace
        env:
          CODEPACK_ZIP: ${{ github.event.inputs.CODEPACK_ZIP }}
          CSV_GLOB: ${{ github.event.inputs.CSV_GLOB }}
        run: |
          set -euo pipefail
          mkdir -p tmp/trade tmp/data _out_4u
          unzip -o "$CODEPACK_ZIP" -d tmp/trade >/dev/null
          if compgen -G "tmp/trade/data/*" > /dev/null; then
            mv -f tmp/trade/data/* tmp/data/ || true
          fi
          SEL=$(python -c "import glob,os;pat=os.environ.get('CSV_GLOB','**/*.csv');c=sorted(glob.glob('tmp/data/'+pat,recursive=True));print(c[0] if c else '')")
          [ -n "$SEL" ] || { echo 'No CSV found under tmp/data'; exit 1; }
          echo "$SEL" > _out_4u/CSV_PATH.txt
          echo "[prep] using CSV: $SEL"

      - name: Run A (TTL=${{ github.event.inputs.TTL_A }})
        env:
          TTL: ${{ github.event.inputs.TTL_A }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, sys, glob, shutil, importlib
          from pathlib import Path
          import yaml
          data_path = Path(Path('_out_4u/CSV_PATH.txt').read_text().strip())
          eff = Path('tmp/trade/conf/config.effective.yml')
          eff.parent.mkdir(parents=True, exist_ok=True)
          cfg = {}
          if eff.exists():
            try:
              cfg = yaml.safe_load(eff.read_text()) or {}
            except Exception:
              cfg = {}
          cfg.setdefault('exit', {})['ttl'] = int(os.environ.get('TTL','0'))
          eff.write_text(yaml.safe_dump(cfg, sort_keys=False))
          sys.path[:0] = ['tmp/trade','tmp/trade/backtest']
          candidates = [
            ('run_4u', 'tmp/trade/run_4u.py', 'main'),
            ('backtest.runner', 'tmp/trade/backtest/runner.py', 'main'),
            ('backtest.engine', 'tmp/trade/backtest/engine.py', None),
          ]
          fn = None
          for modname, path, preferred in candidates:
            if Path(path).exists():
              mod = importlib.import_module(modname.replace('/','.'))
              if preferred and hasattr(mod, preferred):
                fn = getattr(mod, preferred)
                break
              for name in ('run_backtest','main'):
                if hasattr(mod, name):
                  fn = getattr(mod, name)
                  break
              if fn: break
          if not fn:
            raise SystemExit("No engine entry found (run_4u.py or backtest/runner.py or backtest/engine.py)")
          called = False
          for kw in [
            dict(data_path=str(data_path), config_path=str(eff), out_dir='_out_4u'),
            dict(data_path=str(data_path), config=str(eff), out_dir='_out_4u'),
          ]:
            try:
              fn(**kw); called=True; break
            except TypeError:
              pass
          if not called:
            try:
              fn(str(data_path), str(eff), '_out_4u'); called=True
            except TypeError:
              pass
          if not called:
            try:
              fn(str(data_path), str(eff)); called=True
            except TypeError:
              pass
          out = None
          for g in ('_out_4u/trades.csv','tmp/trade/out/trades.csv','tmp/trade/backtest/trades.csv','trades.csv'):
            p=Path(g)
            if p.exists(): out=p; break
          if not out:
            c = glob.glob('**/trades*.csv', recursive=True)
            out = Path(sorted(c)[0]) if c else None
          if not out:
            raise SystemExit('trades.csv not produced')
          Path('_out_4u').mkdir(exist_ok=True)
          shutil.copyfile(out, '_out_4u/trades_A.csv')
          print('[A] wrote _out_4u/trades_A.csv')
          PY

      - name: Clean BETWEEN runs
        run: |
          rm -f _out_4u/trades.csv || true

      - name: Run B (TTL=${{ github.event.inputs.TTL_B }})
        env:
          TTL: ${{ github.event.inputs.TTL_B }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, sys, glob, shutil, importlib
          from pathlib import Path
          import yaml
          data_path = Path(Path('_out_4u/CSV_PATH.txt').read_text().strip())
          eff = Path('tmp/trade/conf/config.effective.yml')
          eff.parent.mkdir(parents=True, exist_ok=True)
          cfg = {}
          if eff.exists():
            try:
              cfg = yaml.safe_load(eff.read_text()) or {}
            except Exception:
              cfg = {}
          cfg.setdefault('exit', {})['ttl'] = int(os.environ.get('TTL','0'))
          eff.write_text(yaml.safe_dump(cfg, sort_keys=False))
          sys.path[:0] = ['tmp/trade','tmp/trade/backtest']
          candidates = [
            ('run_4u', 'tmp/trade/run_4u.py', 'main'),
            ('backtest.runner', 'tmp/trade/backtest/runner.py', 'main'),
            ('backtest.engine', 'tmp/trade/backtest/engine.py', None),
          ]
          fn = None
          for modname, path, preferred in candidates:
            if Path(path).exists():
              mod = importlib.import_module(modname.replace('/','.'))
              if preferred and hasattr(mod, preferred):
                fn = getattr(mod, preferred)
                break
              for name in ('run_backtest','main'):
                if hasattr(mod, name):
                  fn = getattr(mod, name)
                  break
              if fn: break
          if not fn:
            raise SystemExit('No engine entry found')
          called = False
          for kw in [
            dict(data_path=str(data_path), config_path=str(eff), out_dir='_out_4u'),
            dict(data_path=str(data_path), config=str(eff), out_dir='_out_4u'),
          ]:
            try:
              fn(**kw); called=True; break
            except TypeError:
              pass
          if not called:
            try:
              fn(str(data_path), str(eff), '_out_4u'); called=True
            except TypeError:
              pass
          if not called:
            try:
              fn(str(data_path), str(eff)); called=True
            except TypeError:
              pass
          out = None
          for g in ('_out_4u/trades.csv','tmp/trade/out/trades.csv','tmp/trade/backtest/trades.csv','trades.csv'):
            p=Path(g)
            if p.exists(): out=p; break
          if not out:
            c = glob.glob('**/trades*.csv', recursive=True)
            out = Path(sorted(c)[0]) if c else None
          if not out:
            raise SystemExit('trades.csv not produced')
          Path('_out_4u').mkdir(exist_ok=True)
          shutil.copyfile(out, '_out_4u/trades_B.csv')
          print('[B] wrote _out_4u/trades_B.csv')
          PY

      - name: Assert A != B (TTL effect)
        run: |
          python - <<'PY'
          from pathlib import Path
          import hashlib, sys
          def sha(p):
            h=hashlib.sha256(); h.update(Path(p).read_bytes()); return h.hexdigest()
          a=sha('_out_4u/trades_A.csv'); b=sha('_out_4u/trades_B.csv')
          print('SHA_A',a); print('SHA_B',b)
          if a==b:
            print('Error: Exit/TTL not applied (A==B)')
            sys.exit(3)
          PY

      - name: Upload artifacts (pinned SHA)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: exit_ttl_abtest_outputs
          path: _out_4u/*
