name: exit_ttl_abtest_param

on:
  workflow_dispatch:
    inputs:
      CODE_PACK:
        description: "Repo-root code pack zip filename (e.g., trade_v1.1.4.zip)"
        required: true
        default: "trade_v1.1.4.zip"
      DATA_CSV:
        description: "Data CSV path under repo (optional). If omitted, auto-discover under tmp/data/**"
        required: false
        default: ""
      TTL_A:
        description: "A-run TTL"
        required: true
        default: "1"
      TTL_B:
        description: "B-run TTL"
        required: true
        default: "5000"

permissions:
  contents: read

jobs:
  abtest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned SHA)
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Init workspace (unpack code pack)
        run: |
          set -Eeuo pipefail
          mkdir -p tmp/trade tmp/data _out_4u
          CODE_PACK="${{ github.event.inputs.CODE_PACK }}"
          test -f "$CODE_PACK" || { echo "::error::CODE_PACK not found: $CODE_PACK"; exit 1; }
          cp -f "$CODE_PACK" tmp/code.zip
          unzip -oq tmp/code.zip -d tmp/trade
          # optional dataset
          if [ -n "${{ github.event.inputs.DATA_CSV }}" ] && [ -f "${{ github.event.inputs.DATA_CSV }}" ]; then
            cp -f "${{ github.event.inputs.DATA_CSV }}" tmp/data/
          fi
          echo "--- tree(tmp/trade, depth 2) ---"; find tmp/trade -maxdepth 2 -type f | sed 's/^/  /' || true

      - name: Ensure Python 3.11 (no external action)
        run: |
          set -Eeuo pipefail
          if ! python3 - <<'PY'
          import sys
          v=sys.version_info
          assert (v.major,v.minor)==(3,11)
          PY
          then
            sudo apt-get update
            sudo apt-get install -y software-properties-common
            sudo add-apt-repository -y ppa:deadsnakes/ppa
            sudo apt-get update
            sudo apt-get install -y python3.11 python3.11-venv python3-pip
          fi
          python3 -V
          python3 -m pip install --upgrade pip
          # best-effort requirements
          if [ -f tmp/trade/requirements.txt ]; then python3 -m pip install -r tmp/trade/requirements.txt || true; fi
          python3 -m pip install pyyaml

      - name: Create run_engine.py (bridge & normalizer)
        run: |
          cat > run_engine.py <<'PY'
          import os, sys, glob, json, shutil, runpy, hashlib
          from pathlib import Path

          ROOT = Path(".")
          TR = Path("tmp/trade")
          OUT = Path("_out_4u"); OUT.mkdir(parents=True, exist_ok=True)
          CFG_BASE = TR/"conf"/"config.yml"
          CFG_EFF  = TR/"conf"/"config.effective.yml"

          def select_csv():
              env = os.environ.get("DATA_CSV","").strip()
              if env and Path(env).exists():
                  return env
              pats = ["tmp/data/**/*.csv", "data/**/*.csv"]
              paths = []
              for pat in pats:
                  paths.extend([Path(p) for p in glob.glob(pat, recursive=True)])
              paths = [p for p in paths if p.is_file()]
              if not paths:
                  raise FileNotFoundError("No CSV found under tmp/data or data")
              # prefer ETHUSDT
              for p in paths:
                  if "ETHUSDT" in p.name.upper():
                      return str(p)
              return str(paths[0])

          def overlay_cfg(ttl_val: int):
              import yaml
              base = {}
              if CFG_BASE.exists():
                  try:
                      base = yaml.safe_load(CFG_BASE.read_text()) or {}
                  except Exception:
                      base = {}
              # ensure sections & overlay both styles
              base.setdefault("trade", {})
              base.setdefault("exit", {})
              base["trade"]["hold_bars"] = ttl_val
              base["exit"]["ttl"] = ttl_val
              CFG_EFF.parent.mkdir(parents=True, exist_ok=True)
              CFG_EFF.write_text(yaml.safe_dump(base, sort_keys=False))
              print(f"[exit_bridge] wrote {CFG_EFF} (ttl={ttl_val})")

          def find_runner():
              # priority: tmp/trade/runner.py -> tmp/trade/run_4u.py -> backtest/runner.py -> backtest/engine.py
              cands = [TR/"runner.py", TR/"run_4u.py", Path("backtest")/"runner.py", Path("backtest")/"engine.py"]
              for c in cands:
                  if c.exists():
                      return c
              raise FileNotFoundError("No engine entry found")

          def call_runner(runner, data_path):
              argv = [str(runner),
                      "--data_path", str(data_path),
                      "--config", str(CFG_EFF),
                      "--out_dir", "_out_4u"]
              sys.argv = argv
              print("[RUNNER]", runner, "argv=", argv[1:])
              runpy.run_path(str(runner), run_name="__main__")

          def normalize_trades():
              # prefer OUT first
              for p in [OUT/"trades.csv"]:
                  if p.exists(): return p
              # otherwise search tree
              for p in ROOT.rglob("trades.csv"):
                  if p.is_file():
                      tgt = OUT/"trades.csv"
                      if p.resolve()!=tgt.resolve():
                          shutil.copy2(p, tgt)
                      return tgt
              return None

          def sha256(p):
              h=hashlib.sha256()
              with open(p,"rb") as f:
                  for b in iter(lambda: f.read(1<<20), b""):
                      h.update(b)
              return h.hexdigest()

          if __name__=="__main__":
              ttl = int(os.environ.get("EXIT_TTL","0"))
              data = select_csv()
              overlay_cfg(ttl)
              runner = find_runner()
              call_runner(runner, data)
              t = normalize_trades()
              print("[collect] trades path:", t, "exists:", bool(t and Path(t).exists()))
              if not t:
                  raise SystemExit(2)
              print("TRADES_SHA256", sha256(t))
          PY

      - name: Run A (TTL=${{ github.event.inputs.TTL_A }})
        env:
          EXIT_TTL: ${{ github.event.inputs.TTL_A }}
          DATA_CSV: ${{ github.event.inputs.DATA_CSV }}
        run: |
          set -Eeuo pipefail
          # base config (kept small; overlay will set TTL & hold_bars)
          mkdir -p tmp/trade/conf
          cat > tmp/trade/conf/config.yml <<'YML'
          trade:
            tp_pct: 0.010
            sl_pct: 0.005
            be_on: false
            trail_on: false
          YML
          python3 -u run_engine.py
          cp -f _out_4u/trades.csv _out_4u/trades_A.csv
          sha256sum _out_4u/trades_A.csv | awk '{print $1}' > _out_4u/trades_A.sha256

      - name: Clean BETWEEN runs
        run: rm -f _out_4u/trades.csv

      - name: Run B (TTL=${{ github.event.inputs.TTL_B }})
        env:
          EXIT_TTL: ${{ github.event.inputs.TTL_B }}
          DATA_CSV: ${{ github.event.inputs.DATA_CSV }}
        run: |
          set -Eeuo pipefail
          python3 -u run_engine.py
          cp -f _out_4u/trades.csv _out_4u/trades_B.csv
          sha256sum _out_4u/trades_B.csv | awk '{print $1}' > _out_4u/trades_B.sha256

      - name: Assert A != B (TTL effect)
        run: |
          set -Eeuo pipefail
          A=$(cat _out_4u/trades_A.sha256 2>/dev/null || echo "")
          B=$(cat _out_4u/trades_B.sha256 2>/dev/null || echo "")
          echo "SHA_A $A"; echo "SHA_B $B"
          if [ -z "$A" ] || [ -z "$B" ]; then
            echo "Error: missing trades_A/B.sha256"; exit 2
          fi
          if [ "$A" = "$B" ]; then
            echo "Error: Exit/TTL not applied (A==B)"; exit 3
          fi

      - name: Upload artifacts (pinned SHA)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: exit_ttl_abtest_outputs
          path: |
            _out_4u/trades_A.csv
            _out_4u/trades_B.csv
            _out_4u/trades_A.sha256
            _out_4u/trades_B.sha256
            tmp/trade/conf/config.yml
            tmp/trade/conf/config.effective.yml
