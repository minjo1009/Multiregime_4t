name: backtest_grid (v1.1.8, regime-first, no-forced-coverage)

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Repo path to code zip (e.g., trade_v1.1.8.zip)
        required: true
        default: trade_v1.1.8.zip
      DATA_ZIP:
        description: Repo path to data zip (e.g., ETHUSDT_1min_2020_2025.zip)
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_FILE:
        description: CSV filename after unzip (e.g., ETHUSDT_1min_2020_2025.csv)
        required: true
        default: ETHUSDT_1min_2020_2025.csv

jobs:
  grid:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        THR:   [3.2, 3.8]
        TP:    [0.0038]
        SL:    [0.0022]
        HOLD:  [6, 8]
        FILTER: [ema, none]
        BE:    [0, 5]
    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_DIR: _out_4u/run
      PYVER: '3.11'

    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PYVER }}

      - name: Resolve ZIPs (root or nested)
        shell: bash
        run: |
          set -euo pipefail
          resolve() {
            local in="$1" outvar="$2" path=""
            if [[ -f "$in" ]]; then path="${GITHUB_WORKSPACE}/$in"
            elif [[ -f "${GITHUB_WORKSPACE}/$in" ]]; then path="${GITHUB_WORKSPACE}/$in"
            else
              local base="$(basename "$in")"
              if [[ -f "${GITHUB_WORKSPACE}/$base" ]]; then path="${GITHUB_WORKSPACE}/$base"
              else
                path="$(find "${GITHUB_WORKSPACE}" -maxdepth 2 -type f -name "$base" -print -quit || true)"
              fi
            fi
            [[ -n "$path" && -f "$path" ]] || { echo "::error::ZIP not found: $in"; exit 66; }
            echo "${outvar}=${path}" >> "$GITHUB_ENV"
            echo "[resolved] $in -> $path"
          }
          resolve "${{ github.event.inputs.CODE_ZIP }}" CODE_ZIP_ABS
          resolve "${{ github.event.inputs.DATA_ZIP }}" DATA_ZIP_ABS

      - name: Unpack code and data
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"
          unzip -q "${CODE_ZIP_ABS}" -d "${RUN_DIR}"
          unzip -q "${DATA_ZIP_ABS}" -d "${DATA_DIR}"
          # run_4u.py가 하위폴더에 있으면 RUN_DIR 보정
          if [ ! -f "${RUN_DIR}/run_4u.py" ]; then
            CAND="$(find "${RUN_DIR}" -maxdepth 2 -type f -name 'run_4u.py' -print -quit || true)"
            [ -n "$CAND" ] || { echo "::error::run_4u.py not found in code zip"; exit 67; }
            echo "RUN_DIR=$(dirname "$CAND")" >> "$GITHUB_ENV"
            echo "[debug] RUN_DIR corrected -> $(dirname "$CAND")"
          fi
          echo "[debug] data files:"; find "${DATA_DIR}" -maxdepth 2 -type f -name '*.csv' -print || true

      - name: Install deps
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install pandas numpy scikit-learn pyyaml; fi

      - name: Detect CSV (ABS)
        shell: bash
        run: |
          set -euo pipefail
          CSV="${GITHUB_WORKSPACE}/${{ env.DATA_DIR }}/${{ github.event.inputs.CSV_FILE }}"
          if [ ! -f "$CSV" ]; then
            F="$(find "${{ env.DATA_DIR }}" -type f -name "${{ github.event.inputs.CSV_FILE }}" -print -quit || true)"
            [ -n "$F" ] || { echo "::error::CSV not found: ${{ github.event.inputs.CSV_FILE }}"; exit 64; }
            CSV="${GITHUB_WORKSPACE}/${F}"
          fi
          echo "CSV_PATH=$CSV" >> "$GITHUB_ENV"

      - name: Override config (regime-first, no forced coverage)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          # 인자(행렬 값)를 파이썬에 전달: 인자는 <<'PY' 리다이렉션 "앞"에 둔다
          python - "${{ matrix.THR }}" "${{ matrix.HOLD }}" "${{ matrix.TP }}" "${{ matrix.SL }}" "${{ matrix.FILTER }}" "${{ matrix.BE }}" <<'PY'
          import os, sys, pathlib, yaml
          thr = float(sys.argv[1]); hold = int(sys.argv[2]); tp = float(sys.argv[3]); sl = float(sys.argv[4]); flt = sys.argv[5]; be = int(sys.argv[6])
          RUN = pathlib.Path(os.environ['RUN_DIR'])
          CONF = RUN/'conf'; CONF.mkdir(parents=True, exist_ok=True)
          eff = CONF/'config.effective.yml'
          cfg = {
              'gate':   {'beta': 1.6, 'temp': 6.0, 'thr_by_session': {'US':thr, 'EU':thr, 'ASIA':thr}},
              'trade':  {'hold_bars': hold, 'tp_pct': tp, 'sl_pct': sl},
              'policy': {'allow_long': True, 'allow_short': True},
              'entry_filters': {'ema_50_200': (flt=='ema')},
              'costs': {'taker_bps': 3, 'slippage_bps': 0},
              'calibration': {'method':'isotonic'}
          }
          if be > 0:
              cfg['breakeven'] = {'bars': be, 'lock_pct': 0.0}
          eff.write_text(yaml.safe_dump(cfg, sort_keys=False), encoding='utf-8')
          print("[override] wrote", eff)
          PY

      - name: Preflight
        shell: bash
        run: |
          set -euo pipefail
          python "${{ env.RUN_DIR }}/scripts/preflight_strict.py" "${{ env.CSV_PATH }}"

      - name: Run backtest (v1.1.8)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          export PYTHONPATH="${PWD}"
          echo "[grid] THR=${{ matrix.THR }} TP=${{ matrix.TP }} SL=${{ matrix.SL }} HOLD=${{ matrix.HOLD }} FILTER=${{ matrix.FILTER }} BE=${{ matrix.BE }}"
          python run_4u.py --data_path "${{ env.CSV_PATH }}" --out_dir "${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}"
          ls -l "${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}"

      - name: Upload artifacts (tagged)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: out_thr${{ matrix.THR }}_tp${{ matrix.TP }}_sl${{ matrix.SL }}_h${{ matrix.HOLD }}_f${{ matrix.FILTER }}_be${{ matrix.BE }}
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/preds_test.csv
            ${{ env.OUT_DIR }}/trades.csv
            ${{ env.OUT_DIR }}/preflight.json