name: backtest12-grid

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Repo path to code zip (at repo root)
        required: true
        default: trade_v1.1.9.zip
      DATA_ZIP:
        description: Repo path to data zip (at repo root)
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_FILE:
        description: CSV filename after unzip
        required: true
        default: ETHUSDT_1min_2020_2025.csv

jobs:
  grid:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        include:
          # === Percent 모드(고정 TP/SL) ===
          - {MODE: pct, THR_US: 4.0, THR_EU: 3.8, THR_ASIA: 3.5, HOLD: 6, BE: 3, TP: 0.0035, SL: 0.0018, FILTER: ema}
          - {MODE: pct, THR_US: 4.0, THR_EU: 3.8, THR_ASIA: 3.5, HOLD: 8, BE: 5, TP: 0.0035, SL: 0.0018, FILTER: none}
          - {MODE: pct, THR_US: 4.2, THR_EU: 3.9, THR_ASIA: 3.6, HOLD: 6, BE: 5, TP: 0.0042, SL: 0.0020, FILTER: ema}
          - {MODE: pct, THR_US: 4.2, THR_EU: 3.9, THR_ASIA: 3.6, HOLD: 8, BE: 3, TP: 0.0042, SL: 0.0020, FILTER: none}
          # === ATR 모드(ATR 비율*계수 → 퍼센트 환산) ===
          - {MODE: atr, K1: 1.2, K2: 0.7, THR_US: 4.0, THR_EU: 3.8, THR_ASIA: 3.5, HOLD: 6, BE: 3, FILTER: ema}
          - {MODE: atr, K1: 1.6, K2: 0.9, THR_US: 4.0, THR_EU: 3.8, THR_ASIA: 3.5, HOLD: 8, BE: 5, FILTER: none}
          - {MODE: atr, K1: 1.2, K2: 0.7, THR_US: 4.2, THR_EU: 3.9, THR_ASIA: 3.6, HOLD: 6, BE: 5, FILTER: ema}
          - {MODE: atr, K1: 1.6, K2: 0.9, THR_US: 4.2, THR_EU: 3.9, THR_ASIA: 3.6, HOLD: 8, BE: 3, FILTER: none}

    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_DIR: _out_4u/run
      PYVER: '3.11'

    steps:
      # ✅ pinned (checkout v5.0.0)
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0

      # ✅ pinned (setup-python v5.6.0)
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PYVER }}

      - name: Resolve ZIPs
        shell: bash
        run: |
          set -euo pipefail
          res() { local in="$1" out="$2" path=""; local base="$(basename "$in")"; if [[ -f "$in" ]]; then path="${GITHUB_WORKSPACE}/$in"; else path="$(find "${GITHUB_WORKSPACE}" -maxdepth 2 -type f -name "$base" -print -quit || true)"; fi; [[ -n "$path" && -f "$path" ]] || { echo "::error::ZIP not found: $in"; exit 66; }; echo "${out}=${path}" >> "$GITHUB_ENV"; echo "[resolved] $in -> $path"; }
          res "${{ github.event.inputs.CODE_ZIP }}" CODE_ZIP_ABS
          res "${{ github.event.inputs.DATA_ZIP }}" DATA_ZIP_ABS

      - name: Unpack code and data
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$RUN_DIR" "$DATA_DIR" "${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}"
          unzip -q "$CODE_ZIP_ABS" -d "$RUN_DIR"
          unzip -q "$DATA_ZIP_ABS" -d "$DATA_DIR"
          if [ ! -f "$RUN_DIR/run_4u.py" ]; then CAND="$(find "$RUN_DIR" -maxdepth 2 -type f -name 'run_4u.py' -print -quit || true)"; [ -n "$CAND" ] || { echo "::error::run_4u.py not found in code zip"; exit 67; }; echo "RUN_DIR=$(dirname "$CAND")" >> "$GITHUB_ENV"; echo "[debug] RUN_DIR -> $(dirname "$CAND")"; fi
          echo "[debug] CSV files:"; find "$DATA_DIR" -maxdepth 2 -type f -name '*.csv' -print || true

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip >/dev/null
          if [ -f "$RUN_DIR/requirements.txt" ]; then pip install -r "$RUN_DIR/requirements.txt"; else pip install pandas numpy pyyaml >/dev/null; fi

      - name: Detect CSV (ABS)
        shell: bash
        run: |
          set -euo pipefail
          CSV="${GITHUB_WORKSPACE}/${{ env.DATA_DIR }}/${{ github.event.inputs.CSV_FILE }}"
          if [ ! -f "$CSV" ]; then F="$(find "${{ env.DATA_DIR }}" -type f -name "${{ github.event.inputs.CSV_FILE }}" -print -quit || true)"; [ -n "$F" ] || { echo "::error::CSV not found: ${{ github.event.inputs.CSV_FILE }}"; exit 64; }; CSV="${GITHUB_WORKSPACE}/${F}"; fi
          echo "CSV_PATH=$CSV" >> "$GITHUB_ENV"
          echo "[csv] $CSV"

      - name: Preflight (schema + ATR ratio)
        shell: bash
        run: |
          set -euo pipefail
          python -c "import os,json,pandas as pd,numpy as np; csv=os.environ['CSV_PATH']; cols=['open_time','high','low','close']; df=pd.read_csv(csv,usecols=cols,nrows=400000); need=['open_time','open','high','low','close','volume']; miss=[c for c in need if c not in df.columns]; pc=df['close'].shift(1); tr=(df['high']-df['low']).abs(); tr=np.maximum(tr,(df['high']-pc).abs()); tr=np.maximum(tr,(df['low']-pc).abs()); atr=pd.Series(tr).rolling(14,min_periods=14).mean(); ratio=float(np.nanmedian((atr/df['close']).values)); hint='ms' if pd.to_numeric(df['open_time'],errors='coerce').max()>1e12 else 's'; print(json.dumps({'path':csv,'rows_scanned':int(len(df)),'columns':list(df.columns),'missing':miss,'open_time_hint':hint,'atr_ratio_median':ratio}))" | tee "${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}/preflight.json"
          echo "ATR_RATIO=$(jq