name: backtest12-grid-v120

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Repo path to code zip (at repo root)
        required: true
        default: trade_v1.2.0.zip
      DATA_ZIP:
        description: Repo path to data zip (at repo root)
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_FILE:
        description: CSV filename after unzip
        required: true
        default: ETHUSDT_1min_2020_2025.csv

jobs:
  grid:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        include:
          - {MODE: pct, K1: 0,   K2: 0,   THR_US: 4.0, THR_EU: 3.8, THR_ASIA: 3.5, HOLD: 6, BE: 3, TP: 0.0035, SL: 0.0018, FILTER: ema}
          - {MODE: pct, K1: 0,   K2: 0,   THR_US: 4.0, THR_EU: 3.8, THR_ASIA: 3.5, HOLD: 8, BE: 5, TP: 0.0035, SL: 0.0018, FILTER: none}
          - {MODE: pct, K1: 0,   K2: 0,   THR_US: 4.2, THR_EU: 3.9, THR_ASIA: 3.6, HOLD: 6, BE: 5, TP: 0.0042, SL: 0.0020, FILTER: ema}
          - {MODE: pct, K1: 0,   K2: 0,   THR_US: 4.2, THR_EU: 3.9, THR_ASIA: 3.6, HOLD: 8, BE: 3, TP: 0.0042, SL: 0.0020, FILTER: none}
          - {MODE: atr, K1: 1.2, K2: 0.7, THR_US: 4.0, THR_EU: 3.8, THR_ASIA: 3.5, HOLD: 6, BE: 3, FILTER: ema}
          - {MODE: atr, K1: 1.6, K2: 0.9, THR_US: 4.0, THR_EU: 3.8, THR_ASIA: 3.5, HOLD: 8, BE: 5, FILTER: none}
          - {MODE: atr, K1: 1.2, K2: 0.7, THR_US: 4.2, THR_EU: 3.9, THR_ASIA: 3.6, HOLD: 6, BE: 5, FILTER: ema}
          - {MODE: atr, K1: 1.6, K2: 0.9, THR_US: 4.2, THR_EU: 3.9, THR_ASIA: 3.6, HOLD: 8, BE: 3, FILTER: none}

    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_BASE: _out_4u
      PYVER: '3.11'

    steps:
      - name: "Checkout"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0

      - name: "Setup Python"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PYVER }}

      - name: "Resolve ZIPs"
        shell: bash
        run: |
          set -euo pipefail
          res() {
            local in="$1" out="$2" path=""
            local base="$(basename "$in")"
            if [[ -f "$in" ]]; then path="${GITHUB_WORKSPACE}/$in"
            else path="$(find "${GITHUB_WORKSPACE}" -maxdepth 2 -type f -name "$base" -print -quit || true)"; fi
            [[ -n "$path" && -f "$path" ]] || { echo "::error::ZIP not found: $in"; exit 66; }
            echo "${out}=${path}" >> "$GITHUB_ENV"; echo "[resolved] $in -> $path"
          }
          res "${{ github.event.inputs.CODE_ZIP }}" CODE_ZIP_ABS
          res "${{ github.event.inputs.DATA_ZIP }}" DATA_ZIP_ABS

      - name: "Unpack code and data"
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$RUN_DIR" "$DATA_DIR" "${GITHUB_WORKSPACE}/${{ env.OUT_BASE }}"
          unzip -q "$CODE_ZIP_ABS" -d "$RUN_DIR"
          unzip -q "$DATA_ZIP_ABS" -d "$DATA_DIR"
          if [[ ! -f "$RUN_DIR/run_4u.py" ]]; then
            CAND="$(find "$RUN_DIR" -maxdepth 3 -type f -name 'run_4u.py' -print -quit || true)"
            [[ -n "$CAND" ]] || { echo "::error::run_4u.py not found in code zip"; exit 67; }
            echo "RUN_DIR=$(dirname "$CAND")" >> "$GITHUB_ENV"
            echo "[debug] RUN_DIR -> $(dirname "$CAND")"
          fi
          echo "[debug] CSV files:"; find "$DATA_DIR" -maxdepth 2 -type f -name '*.csv' -print || true

      - name: "Install deps"
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip >/dev/null
          pip install pandas numpy pyyaml >/dev/null

      # 🔧 FIX: here-doc를 파일 리다이렉션으로 마무리 (YAML 충돌 방지)
      - name: "Detect CSV (ABS) + Preflight"
        shell: bash
        run: |
          set -euo pipefail
          CSV="${GITHUB_WORKSPACE}/${{ env.DATA_DIR }}/${{ github.event.inputs.CSV_FILE }}"
          if [[ ! -f "$CSV" ]]; then
            F="$(find "${{ env.DATA_DIR }}" -type f -name "${{ github.event.inputs.CSV_FILE }}" -print -quit || true)"
            [[ -n "$F" ]] || { echo "::error::CSV not found: ${{ github.event.inputs.CSV_FILE }}"; exit 64; }
            CSV="${GITHUB_WORKSPACE}/${F}"
          fi
          echo "CSV_PATH=$CSV" >> "$GITHUB_ENV"; echo "[csv] $CSV"

          python - <<'PY' > "${GITHUB_WORKSPACE}/${{ env.OUT_BASE }}/preflight.json"
import os, json, pandas as pd, numpy as np
csv=os.environ['CSV_PATH']
need=['open_time','open','high','low','close','volume']
df=pd.read_csv(csv, nrows=200000)
missing=[c for c in need if c not in df.columns]
max_ot = pd.to_numeric(df.get('open_time', pd.Series(dtype='float64')), errors='coerce').max()
hint='ms' if (pd.notna(max_ot) and max_ot>1e12) else 's'
print(json.dumps({"path":csv,"rows_scanned":int(len(df)),"columns":list(df.columns),"missing":missing,"open_time_hint":hint}))
PY

          cat "${GITHUB_WORKSPACE}/${{ env.OUT_BASE }}/preflight.json"
          miss=$(jq -r '.missing|length' "${GITHUB_WORKSPACE}/${{ env.OUT_BASE }}/preflight.json")
          [[ "$miss" == "0" ]] || { echo "::error::Required columns missing"; exit 65; }

      - name: "Set params & OUT_DIR"
        shell: bash
        run: |
          set -euo pipefail
          echo "MODE=${{ matrix.MODE }}" >> "$GITHUB_ENV"
          if [[ "${{ matrix.MODE }}" == "atr" ]]; then
            TP_EFF="${{ matrix.TP || '0' }}"; SL_EFF="${{ matrix.SL || '0' }}"
          else
            TP_EFF="${{ matrix.TP }}"; SL_EFF="${{ matrix.SL }}"
          fi
          echo "TP_EFF=$TP_EFF" >> "$GITHUB_ENV"
          echo "SL_EFF=$SL_EFF" >> "$GITHUB_ENV"
          TAG="mode${{ matrix.MODE }}_us${{ matrix.THR_US }}_eu${{ matrix.THR_EU }}_as${{ matrix.THR_ASIA }}_h${{ matrix.HOLD }}_be${{ matrix.BE }}_f${{ matrix.FILTER }}"
          echo "RUN_TAG=$TAG" >> "$GITHUB_ENV"
          echo "OUT_DIR=${{ env.OUT_BASE }}/$TAG" >> "$GITHUB_ENV"
          mkdir -p "${GITHUB_WORKSPACE}/${OUT_DIR}"

      - name: "Override conf/config.effective.yml"
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$RUN_DIR/conf"
          cat > "$RUN_DIR/conf/config.effective.yml" <<EOF
thr_by_session:
  US: ${{ matrix.THR_US }}
  EU: ${{ matrix.THR_EU }}
  ASIA: ${{ matrix.THR_ASIA }}
tp_pct: ${TP_EFF}
sl_pct: ${SL_EFF}
hold_bars: ${{ matrix.HOLD }}
allow_long: true
allow_short: true
EOF
          echo "[conf] wrote $RUN_DIR/conf/config.effective.yml"
          sha256sum "$RUN_DIR/conf/config.effective.yml" | awk '{print "[conf] sha256="$1}'

      - name: "Run backtest (v1.2.0)"
        shell: bash
        run: |
          set -euo pipefail
          export PYTHONPATH="$RUN_DIR"
          python "$RUN_DIR/run_4u.py" --data_path "$CSV_PATH" --out_dir "${GITHUB_WORKSPACE}/${OUT_DIR}"

      - name: "Validate summary/trades (no placeholders, metrics present)"
        shell: bash
        run: |
          set -euo pipefail
          S="${GITHUB_WORKSPACE}/${OUT_DIR}/summary.json"
          T="${GITHUB_WORKSPACE}/${OUT_DIR}/trades.csv"
          test -s "$S" && test -s "$T" || { echo "::error::missing outputs"; exit 77; }
          jq -e '(.placeholders|not) and (.hit_rate!=null) and (.profit_factor!=null) and (.n_trades!=null)' "$S" >/dev/null \
            || { echo "::error::invalid summary"; cat "$S"; exit 79; }
          echo "[ok] metrics: hit_rate=$(jq -r .hit_rate "$S") pf=$(jq -r .profit_factor "$S") n=$(jq -r .n_trades "$S")"

      - name: "Upload artifacts (per-run)"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: out_${{ env.RUN_TAG }}
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/trades.csv
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/_*.json
            ${{ env.OUT_DIR }}/*.log
          if-no-files-found: ignore

  aggregate:
    needs: [grid]
    runs-on: ubuntu-latest
    steps:
      - name: "Download all artifacts"
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          path: all_runs

      - name: "Ensure jq"
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: "Guard: expected run count"
        shell: bash
        run: |
          set -euo pipefail
          EXPECT=8
          FOUND=$(find all_runs -type f -name summary.json | wc -l | tr -d ' ')
          echo "[guard] expected=$EXPECT found=$FOUND"
          [ "$FOUND" -eq "$EXPECT" ] || { echo "::error::per-run artifacts missing"; exit 74; }

      - name: "Build leaderboard.csv"
        shell: bash
        run: |
          set -euo pipefail
          echo "artifact,thr_US,thr_EU,thr_ASIA,tp_pct,sl_pct,hold_bars,hit_rate,profit_factor,mcc,n_trades" > leaderboard.csv
          while IFS= read -r -d '' s; do
            dir="$(dirname "$s")"; tag="$(basename "$dir")"
            gj="$dir/gating_debug.json"
            if [[ -f "$gj" ]]; then
              thr_US="$(jq -r '.thr_by_session.US // empty' "$gj")"
              thr_EU="$(jq -r '.thr_by_session.EU // empty' "$gj")"
              thr_AS="$(jq -r '.thr_by_session.ASIA // empty' "$gj")"
            else
              thr_US=""; thr_EU=""; thr_AS=""
            fi
            tp="$(jq -r '.tp_pct // empty' "$s")"
            sl="$(jq -r '.sl_pct // empty' "$s")"
            hold="$(jq -r '.hold_bars // empty' "$s")"
            hit="$(jq -r '.hit_rate // empty' "$s")"
            pf="$(jq -r '.profit_factor // empty' "$s")"
            mcc="$(jq -r '.mcc // empty' "$s")"
            nt="$(jq -r '.n_trades // empty' "$s")"
            echo "$tag,$thr_US,$thr_EU,$thr_AS,$tp,$sl,$hold,$hit,$pf,$mcc,$nt" >> leaderboard.csv
          done < <(find all_runs -type f -name summary.json -print0)

          { head -n 1 leaderboard.csv; tail -n +2 leaderboard.csv | sort -t, -k9,9nr -k8,8nr -k10,10nr; } > leaderboard.sorted.csv
          echo "== Top 10 =="
          ( head -n 1 leaderboard.sorted.csv && tail -n +2 leaderboard.sorted.csv | head -n 10 ) | column -s, -t | sed 's/^/  /'

      - name: "Upload leaderboard"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest12_grid_v120_results
          path: |
            leaderboard.csv
            leaderboard.sorted.csv