name: Backtest-V2-Tuned
on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: 'V2 code zip (repo root filename ok)'
        required: true
        default: strategy_v2_codepack_v2.1.3.zip
      DATA_ZIP:
        description: 'Data zip (repo root filename ok)'
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_GLOB:
        description: 'CSV glob'
        required: false
        default: "**/*ETHUSDT*1min*2020*2025*.csv"

      # Consolidated tunables (<=10 inputs total)
      PARAMS:
        description: 'key=value pairs (comma/semicolon separated). e.g. ofi_thr=0.25,p_thr_trend=0.65,cooldown=10,tp_atr=0.90,sl_atr=0.50,min_hold=5,r_lo=0.40,t_hi=0.60'
        required: false
        default: "ofi_thr=0.25,p_thr_trend=0.65,cooldown=10,tp_atr=0.90,sl_atr=0.50,min_hold=5,r_lo=0.40,t_hi=0.60"

      # Optional costs
      FEES_BPS:
        description: 'fees per side (bps), e.g. 10 = 0.10%'
        required: false
        default: "0"
      SLIP_BPS:
        description: 'slippage per side (bps)'
        required: false
        default: "0"

jobs:
  backtest:
    runs-on: ubuntu-latest
    steps:
      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip || true
          pip install pandas numpy pyyaml numba || true

      - name: Acquire code/data (file / URL / repo raw)
        env:
          CODE_ZIP: "${{ github.event.inputs.CODE_ZIP }}"
          DATA_ZIP: "${{ github.event.inputs.DATA_ZIP }}"
        run: |
          set -euo pipefail
          mkdir -p tmp/trade tmp/data _out_4u/run
          # CODE_ZIP
          if [ -f "$CODE_ZIP" ]; then CSRC="$CODE_ZIP";           elif echo "$CODE_ZIP" | grep -qiE '^https\?://'; then curl -fL "$CODE_ZIP" -o tmp/trade/code.zip; CSRC="tmp/trade/code.zip";           else RCODE="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/$CODE_ZIP"; curl -fL "$RCODE" -o tmp/trade/code.zip; CSRC="tmp/trade/code.zip"; fi
          unzip -q "$CSRC" -d tmp/trade
          # DATA_ZIP
          if [ -f "$DATA_ZIP" ]; then DSRC="$DATA_ZIP";           elif echo "$DATA_ZIP" | grep -qiE '^https\?://'; then curl -fL "$DATA_ZIP" -o tmp/data/data.zip; DSRC="tmp/data/data.zip";           else RDATA="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/$DATA_ZIP"; curl -fL "$RDATA" -o tmp/data/data.zip; DSRC="tmp/data/data.zip"; fi
          unzip -q "$DSRC" -d tmp/data
          # namespace guards
          touch tmp/trade/strategy/__init__.py || true
          touch tmp/trade/strategy/v2/__init__.py || true

      - name: Patch params (from PARAMS string; one-liner)
        env:
          PARAMS: "${{ github.event.inputs.PARAMS }}"
        run: |
          set -euo pipefail
          python -c "import os,yaml; p='tmp/trade/conf/params.v2.yml'; c=yaml.safe_load(open(p)); kv={}; raw=os.environ.get('PARAMS',''); for token in [t for t in raw.replace(';',',').split(',') if t.strip()]:     k,v=[x.strip() for x in token.split('=',1)]; kv[k]=v; def fget(k,d):     try: return float(kv.get(k,d))     except: return float(d) def iget(k,d):     try: return int(float(kv.get(k,d)))     except: return int(float(d)) c.setdefault('orderflow',{})['ofi_thr']=fget('ofi_thr',0.25); c.setdefault('entry',{}).setdefault('p_thr',{})['trend']=fget('p_thr_trend',0.65); c.setdefault('entry',{})['cooldown_bars']=iget('cooldown',10); c.setdefault('exit',{})['tp_atr']=fget('tp_atr',0.90); c['exit']['sl_atr']=fget('sl_atr',0.50); c['exit']['min_hold']=iget('min_hold',5); c.setdefault('regime',{}); c['regime']['range_lo_pctile']=fget('r_lo',0.40); c['regime']['trend_hi_pctile']=fget('t_hi',0.60); yaml.safe_dump(c, open(p,'w'), sort_keys=False)"
          echo '---- params.v2.yml ----'
          cat tmp/trade/conf/params.v2.yml

      - name: Preflight strict
        env:
          CSV_GLOB: "${{ github.event.inputs.CSV_GLOB }}"
        run: |
          set -euo pipefail
          python tmp/trade/preflight_strict.py --data-root tmp/data --csv-glob "$CSV_GLOB" --outdir _out_4u/run

      - name: Detect entrypoint and run (V2.1.3)
        env:
          CSV_GLOB: "${{ github.event.inputs.CSV_GLOB }}"
        run: |
          set -euo pipefail
          ENTRY=""
          for c in "tmp/trade/run_4u.py" "tmp/trade/backtest/run_4u.py" "tmp/trade/backtest/runner.py"; do
            if [ -f "$c" ]; then ENTRY="$c"; break; fi
          done
          if [ -z "$ENTRY" ]; then echo 'No entrypoint found'; exit 1; fi
          echo "ENTRY=$ENTRY"
          python "$ENTRY" --data-root tmp/data --csv-glob "$CSV_GLOB" --outdir _out_4u/run --params tmp/trade/conf/params.v2.yml

      - name: (Optional) Cost-adjust summary
        if: ${{ github.event.inputs.FEES_BPS != '0' || github.event.inputs.SLIP_BPS != '0' }}
        env:
          FEES_BPS: "${{ github.event.inputs.FEES_BPS }}"
          SLIP_BPS: "${{ github.event.inputs.SLIP_BPS }}"
        run: |
          set -euo pipefail
          python -c "import os,json; s=json.load(open('_out_4u/run/summary.json')); entries=int(s.get('entries',0)); fee=float(os.environ.get('FEES_BPS','0')); slip=float(os.environ.get('SLIP_BPS','0')); rt=2.0*(fee+slip)/10000.0; s['cost_model']={'fees_bps_per_side':fee,'slip_bps_per_side':slip,'roundtrip_cost':rt}; s['cum_pnl_cost_adj']=float(s.get('cum_pnl_close_based',0.0))-entries*rt; open('_out_4u/run/summary_cost.json','w').write(json.dumps(s,indent=2))"

      - name: Upload artifacts (pinned SHA)
        uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097
        with:
          name: "backtest-tuned"
          path: |
            _out_4u/run/gating_debug.json
            _out_4u/run/summary.json
            _out_4u/run/summary_cost.json
            _out_4u/run/preds_test.csv
            _out_4u/run/trades.csv
