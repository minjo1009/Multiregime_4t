name: Backtest

on:
  workflow_dispatch:
    inputs:
      trade_zip_path:
        description: "Path to trade pack zip"
        type: string
        default: "trade_v1.0.4a.zip"
      data_zip_path:
        description: "Path to data zip (CSV inside)"
        type: string
        default: "ETHUSDT_1min_2020_2025.zip"

permissions:
  contents: read

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    env:
      TRADE_ZIP: ${{ inputs.trade_zip_path }}
      DATA_ZIP:  ${{ inputs.data_zip_path }}
      RUN_DIR:   tmp/trade
      DATA_DIR:  tmp/data
      OUT_DIR:   _out_4u/run
      CSV_PATH:  tmp/data/ETHUSDT_1min_2020_2025.csv
      OMP_NUM_THREADS: "2"
      OPENBLAS_NUM_THREADS: "2"
      MKL_NUM_THREADS: "2"
      NUMEXPR_NUM_THREADS: "2"

    steps:
      # --- Pinned SHAs
      - name: Checkout (pinned SHA)
        uses: actions/checkout@b4ffde65f46336ab0f6b50b3e0e66170ea7b5f59

      - name: Setup Python 3.11 (pinned SHA)
        uses: actions/setup-python@39cd8d4002104aeda3945c78209b8e84c9700a4e
        with:
          python-version: "3.11"
          cache: "pip"

      # --- Prepare dirs & unzip
      - name: Prepare working dirs
        run: |
          set -euo pipefail
          rm -rf "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"

      - name: Unzip trade pack
        run: |
          set -euo pipefail
          test -f "${TRADE_ZIP}" || { echo "❌ trade zip not found: ${TRADE_ZIP}"; exit 1; }
          unzip -q "${TRADE_ZIP}" -d "${RUN_DIR}"

      - name: Unzip data pack
        run: |
          set -euo pipefail
          test -f "${DATA_ZIP}" || { echo "❌ data zip not found: ${DATA_ZIP}"; exit 1; }
          unzip -q "${DATA_ZIP}" -d "${DATA_DIR}"

      # --- Deps
      - name: Install requirements
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python -c 'import sys; print("Python", sys.version)'
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -c 'import sklearn; print("sklearn", sklearn.__version__)'

      # --- Sklearn ctor signature smoke test (1.4/1.5 호환)
      - name: CalibratedClassifierCV smoke test
        run: |
          python -c 'from sklearn.calibration import CalibratedClassifierCV as C; from sklearn.linear_model import LogisticRegression as L; import inspect; s=str(inspect.signature(C.__init__)); print("CalibratedClassifierCV.__init__", s); (("estimator" in s) and C(estimator=L())) or (("base_estimator" in s) and C(base_estimator=L())); print("OK: ctor signature supported")'

      # --- Fingerprint (v1.0.4a gating & cutoff)
      - name: Fingerprint check (v1.0.4a gating & cutoff)
        run: |
          set -euo pipefail
          grep -n "Coverage-aligned gating" "${RUN_DIR}/backtest/runner.py"
          grep -n "S1 probability floor cutoff" "${RUN_DIR}/backtest/runner.py"

      # --- CSV preflight (columns & taker_buy volume hint)
      - name: Preflight CSV
        run: |
          python -c 'import os,sys,pandas as pd; csv=os.environ["CSV_PATH"]; df=pd.read_csv(csv,nrows=2); need={"open_time","open","high","low","close","volume","number_of_trades"}; miss=need-set(df.columns); 
import sys
; 
( len(miss)==0 ) or (_ for _ in ()).throw(SystemExit("❌ Missing base columns: "+str(miss))); hints={"taker_buy_base_asset_volume","taker_buy_quote_asset_volume"}; 
( len(hints & set(df.columns))>0 ) or (_ for _ in ()).throw(SystemExit("❌ Need taker_buy_* volume columns")); print("✅ CSV OK")'

      # --- Run backtest
      - name: Run backtest
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python run_4u.py --data_path "${{ env.CSV_PATH }}" --out_dir "${{ env.OUT_DIR }}"
          echo "---- gating debug ----"
          cat "${{ env.OUT_DIR }}/gating_debug.json" || true

      # --- Upload artifacts (pinned SHA)
      - name: Upload artifacts (pinned SHA)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/charts/
            ${{ env.OUT_DIR }}/gating_debug.json
          if-no-files-found: warn
          retention-days: 30
          compression-level: 6