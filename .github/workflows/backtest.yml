name: Backtest

on:
  workflow_dispatch:
    inputs:
      TRADE_ZIP:
        description: Code zip at repo root
        required: true
        default: trade_v1.0.7.zip
      DATA_ZIP:
        description: Data zip at repo root
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_GLOB:
        description: CSV glob pattern inside data zip folder
        required: true
        default: "*ETHUSDT*1min*2020*2025*.csv"
      PYVER:
        description: Python version
        required: true
        default: "3.11"

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_DIR: _out_4u/run
      OMP_NUM_THREADS: 2
      OPENBLAS_NUM_THREADS: 2
      MKL_NUM_THREADS: 2
      NUMEXPR_NUM_THREADS: 2

    steps:
      - name: Checkout (pinned SHA)
        uses: actions/checkout@b4ffde65f46336ab0f6b50b3e0e66170ea7b5f59

      - name: Ensure dirs
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"

      - name: Unpack code & data
        shell: bash
        run: |
          set -euo pipefail
          unzip -q "${{ github.workspace }}/${{ github.event.inputs.TRADE_ZIP }}" -d "${RUN_DIR}"
          unzip -q "${{ github.workspace }}/${{ github.event.inputs.DATA_ZIP }}"  -d "${DATA_DIR}"
          echo "---- RUN_DIR ----"
          ls -al "${RUN_DIR}" | sed -n '1,120p'
          echo "---- DATA_DIR ----"
          ls -al "${DATA_DIR}" | sed -n '1,120p'

      - name: Setup Python (pinned SHA; after unzip so cache path exists)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ github.event.inputs.PYVER }}
          cache: pip
          cache-dependency-path: |
            ${{ env.RUN_DIR }}/requirements.txt
            **/pyproject.toml

      - name: Install dependencies (graceful if no requirements.txt)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python3 -m pip install -U pip
          if [ -f requirements.txt ]; then
            python3 -m pip install -r requirements.txt
          else
            python3 -m pip install pandas numpy scikit-learn pyyaml
          fi
          python3 - <<'PY'
import sklearn, pandas, yaml, sys
print("sklearn", sklearn.__version__, "| python", sys.version.split()[0])
PY

      - name: Detect CSV & export absolute CSV_PATH
        shell: bash
        env:
          CSV_GLOB_IN: ${{ github.event.inputs.CSV_GLOB }}
        run: |
          set -euo pipefail
          CANDIDATE="$(ls ${DATA_DIR}/${CSV_GLOB_IN} 2>/dev/null | head -n 1 || true)"
          if [ -z "${CANDIDATE}" ]; then
            CANDIDATE="$(ls ${DATA_DIR}/*.csv 2>/dev/null | head -n 1 || true)"
          fi
          if [ -z "${CANDIDATE}" ]; then
            echo "❌ No CSV found in ${DATA_DIR}" >&2
            exit 1
          fi
          ABS="$(python3 -c 'import os,sys;print(os.path.abspath(sys.argv[1]))' "$CANDIDATE")"
          echo "CSV_PATH=${ABS}" | tee -a "$GITHUB_ENV"
          echo "Using CSV_PATH=${ABS}"

      - name: Preflight CSV (columns check)
        shell: bash
        run: |
          set -euo pipefail
          python3 - "$CSV_PATH" <<'PY'
import os, sys
import pandas as pd
p = sys.argv[1] if len(sys.argv)>1 else os.environ.get("CSV_PATH")
if not p or not os.path.exists(p):
    print("❌ CSV_PATH missing or not exists:", p); sys.exit(1)
df = pd.read_csv(p, nrows=2)
need = {'open_time','open','high','low','close','volume'}
miss = need - set(df.columns)
if miss:
    print("❌ Missing base columns:", sorted(miss)); sys.exit(1)
print("✅ Columns OK:", sorted(df.columns))
PY

      - name: Run backtest
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        env:
          OUT_DIR_ABS: ${{ github.workspace }}/${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          python3 -V
          python3 run_4u.py --data_path "${CSV_PATH}" --out_dir "${OUT_DIR_ABS}"
          echo "---- gating debug (head) ----"
          if [ -f "${OUT_DIR_ABS}/gating_debug.json" ]; then
            head -n 60 "${OUT_DIR_ABS}/gating_debug.json" || true
          else
            echo "{}" > "${OUT_DIR_ABS}/gating_debug.json"
          fi
          ls -al "${OUT_DIR_ABS}"

      - name: Upload artifacts (pinned SHA)
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/preds_test.csv
            ${{ env.OUT_DIR }}/trades.csv
            ${{ env.OUT_DIR }}/charts/
