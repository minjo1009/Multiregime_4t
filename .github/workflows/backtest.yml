name: backtest (v1.1.7 hard-safe)
on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Repo path to code zip
        required: true
        default: zips/trade_v1.1.7.zip
      DATA_ZIP:
        description: Repo path to data zip
        required: true
        default: zips/ETHUSDT_1min_2020_2025.zip
      CSV_FILE:
        description: Exact CSV after unzip
        required: true
        default: ETHUSDT_1min_2020_2025.csv

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_DIR: _out_4u/run
      PYVER: '3.11'

    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Assert ZIPs exist (repo path only)
        shell: bash
        run: |
          set -euo pipefail
          CODE="${{ github.event.inputs.CODE_ZIP }}"
          DATA="${{ github.event.inputs.DATA_ZIP }}"
          echo "[debug] workspace top:"; ls -la || true
          echo "[debug] search zips/:"; find zips -maxdepth 2 -type f -print 2>/dev/null || true
          if [ ! -f "${CODE}" ]; then echo "::error::CODE_ZIP not found: ${CODE}"; exit 66; fi
          if [ ! -f "${DATA}" ]; then echo "::error::DATA_ZIP not found: ${DATA}"; exit 66; fi
          echo "CODE_ZIP_ABS=${GITHUB_WORKSPACE}/${CODE}" >> "$GITHUB_ENV"
          echo "DATA_ZIP_ABS=${GITHUB_WORKSPACE}/${DATA}" >> "$GITHUB_ENV"

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PYVER }}

      - name: Unpack code and data
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"
          unzip -q "${CODE_ZIP_ABS}" -d "${RUN_DIR}"
          unzip -q "${DATA_ZIP_ABS}" -d "${DATA_DIR}"
          echo "[debug] code top:"; ls -la "${RUN_DIR}" || true
          echo "[debug] conf:"; ls -la "${RUN_DIR}/conf" || true
          echo "[debug] data:"; find "${DATA_DIR}" -maxdepth 2 -type f -name '*.csv' -print || true

      # effective config 사전 보장(엔트리 호출 전)
      - name: Ensure effective config (outside ZIP)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          mkdir -p conf
          if [ -f conf/config.yml ]; then
            cp -f conf/config.yml conf/config.effective.yml
          else
            cat > conf/config.effective.yml <<'CFG'
calibration:
  method: isotonic
coverage_target_min: 0.03
coverage_target_max: 0.08
gate:
  beta: 1.2
  temp: 10.0
costs:
  taker_bps: 7
  slippage_bps: 0
trade:
  hold_bars: 5
  tp_pct: 0.004
  sl_pct: 0.003
policy:
  allow_long: true
  allow_short: true
CFG
          fi
          echo "[debug] effective cfg ready:"; ls -la conf/config.effective.yml
          head -n 10 conf/config.effective.yml || true

      - name: Install deps
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy scikit-learn pyyaml
          fi

      - name: Detect CSV and preflight (ABS)
        shell: bash
        run: |
          set -euo pipefail
          CSV_ABS="${GITHUB_WORKSPACE}/${{ env.DATA_DIR }}/${{ github.event.inputs.CSV_FILE }}"
          if [ ! -f "${CSV_ABS}" ]; then
            FOUND="$(find "${{ env.DATA_DIR }}" -type f -name "${{ github.event.inputs.CSV_FILE }}" | head -n 1 || true)"
            if [ -z "${FOUND}" ]; then
              echo "::error::CSV not found: ${{ github.event.inputs.CSV_FILE }}"
              echo "[hint] available CSVs:"; find "${{ env.DATA_DIR }}" -type f -name '*.csv' -print || true
              exit 64
            fi
            CSV_ABS="${GITHUB_WORKSPACE}/${FOUND}"
          fi
          echo "CSV_PATH=${CSV_ABS}" >> "$GITHUB_ENV"
          python "${{ env.RUN_DIR }}/scripts/preflight_strict.py" "${CSV_ABS}"

      - name: Run backtest (v1.1.7 unified entry)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          export PYTHONPATH="${PWD}"
          python run_4u.py --data_path "${{ env.CSV_PATH }}" --out_dir "${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}"
          echo "[debug] out list:"; ls -l "${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/preds_test.csv
            ${{ env.OUT_DIR }}/trades.csv
            ${{ env.OUT_DIR }}/preflight.json