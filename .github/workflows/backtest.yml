name: Run backtest (tagged-min)

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: "Code zip at repo root"
        required: true
        default: "trade_v1.0.8.zip"
      DATA_ZIP:
        description: "Data zip at repo root"
        required: true
        default: "ETHUSDT_1min_2020_2025.zip"
      CSV_GLOB:
        description: "CSV glob inside data dir"
        required: true
        default: "*ETHUSDT*1min*2020*2025*.csv"
      PY:
        description: "Python version"
        required: true
        default: "3.11"

permissions:
  contents: read

env:
  RUN_DIR: tmp/code
  DATA_DIR: tmp/data
  OUT_DIR: _out_4u/run

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout (tagged)
        uses: actions/checkout@v4

      - name: Setup Python (tagged)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.PY }}

      - name: Prepare dirs and unzip code/data
        run: |
          set -euo pipefail
          rm -rf "$RUN_DIR" "$DATA_DIR" "$OUT_DIR"
          mkdir -p "$RUN_DIR" "$DATA_DIR" "$OUT_DIR"
          unzip -q -o "${{ github.event.inputs.CODE_ZIP }}" -d "$RUN_DIR"
          unzip -q -o "${{ github.event.inputs.DATA_ZIP }}" -d "$DATA_DIR"
          [ -f "$OUT_DIR/gating_debug.json" ] || echo '{}' > "$OUT_DIR/gating_debug.json"

      - name: Install deps
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python -m pip -q install -U pip
          if [ -f requirements.txt ]; then
            python -m pip -q install -r requirements.txt
          else
            python -m pip -q install pandas numpy scikit-learn pyyaml
          fi

      - name: Detect CSV and export CSV_PATH
        env:
          CSV_GLOB_IN: ${{ github.event.inputs.CSV_GLOB }}
        run: |
          set -euo pipefail
          cat > detect_csv.py <<'PY'
          import os, sys, glob
          base = sys.argv[1]
          pat  = sys.argv[2]
          m = glob.glob(os.path.join(base, "**", pat), recursive=True)
          if not m: m = glob.glob(os.path.join(base, "**", "*.csv"), recursive=True)
          if not m:
              print(f"ERROR: No CSV found under {base}", file=sys.stderr); sys.exit(12)
          m.sort()
          print(os.path.abspath(m[0]))
          PY
          CSV_PATH=$(python3 detect_csv.py "$DATA_DIR" "$CSV_GLOB_IN")
          echo "CSV_PATH=$CSV_PATH" | tee -a "$GITHUB_ENV"
          echo "Using CSV_PATH=$CSV_PATH"

      - name: Preflight columns (quick)
        run: |
          set -euo pipefail
          cat > preflight.py <<'PY'
          import os, sys, pandas as pd
          p = os.environ.get("CSV_PATH")
          if not p or not os.path.exists(p):
              print("ERROR: CSV_PATH missing or not exists:", p); sys.exit(13)
          df = pd.read_csv(p, nrows=2)
          need = {'open_time','open','high','low','close','volume'}
          cols = {str(c).lower() for c in df.columns}
          miss = need - cols
          if miss:
              print("ERROR: Missing base columns:", sorted(miss)); sys.exit(14)
          print("OK: Columns present:", sorted(need))
          PY
          python3 preflight.py

      - name: Choose entrypoint and run (args fallback)
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          OUT_ABS="$GITHUB_WORKSPACE/$OUT_DIR"
          ENTRY=""
          for c in "run_4u.py" "backtest/run_4u.py" "run.py" "backtest/runner.py"; do
            if [ -f "$c" ]; then ENTRY="$c"; break; fi
          done
          if [ -z "$ENTRY" ]; then
            echo "ERROR: backtest entry not found under $PWD"
            find . -maxdepth 2 -type f -name "*.py" | sed -n '1,120p' || true
            exit 21
          fi
          echo "Using entry: $ENTRY"
          set +e
          python3 "$ENTRY" --csv "$CSV_PATH" --out "$OUT_ABS"
          rc=$?
          if [ $rc -ne 0 ]; then
            echo "WARN: run with --csv/--out failed(rc=$rc). Retrying without args..."
            python3 "$ENTRY"
            rc=$?
          fi
          set -e
          exit $rc

      - name: Upload artifacts (tagged)
        uses: actions/upload-artifact@v4
        with:
          name: backtest-output
          path: |
            _out_4u/run/summary.json
            _out_4u/run/gating_debug.json
            _out_4u/run/preds_test.csv
            _out_4u/run/trades.csv
          if-no-files-found: warn