name: backtest (strict v1.1.6)
on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Code zip
        required: true
        default: trade_v1.1.6.zip
      DATA_ZIP:
        description: Data zip
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_GLOB:
        description: CSV file name
        required: true
        default: ETHUSDT_1min_2020_2025.csv

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_DIR: _out_4u/run
      PYVER: '3.11'

    steps:
      - name: Validate pinned SHAs
        shell: bash
        run: |
          set -euo pipefail
          curl -sSfL -I https://api.github.com/repos/actions/checkout/tarball/08c6903cd8c0fde910a37f88322edcfb5dd907a8 >/dev/null
          curl -sSfL -I https://api.github.com/repos/actions/setup-python/tarball/a26af69be951a213d495a4c3e4e4022e16d87065 >/dev/null
          curl -sSfL -I https://api.github.com/repos/actions/upload-artifact/tarball/ea165f8d65b6e75b540449e92b4886f43607fa02 >/dev/null
          echo "Pinned SHAs OK"

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Unpack code and data
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"
          unzip -q "${{ github.workspace }}/${{ github.event.inputs.CODE_ZIP }}" -d "${RUN_DIR}"
          unzip -q "${{ github.workspace }}/${{ github.event.inputs.DATA_ZIP }}" -d "${DATA_DIR}"

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PYVER }}

      - name: Install deps
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy scikit-learn pyyaml
          fi

      - name: Detect CSV and preflight
        shell: bash
        run: |
          set -euo pipefail
          CSV="${{ env.DATA_DIR }}/${{ github.event.inputs.CSV_GLOB }}"
          if [ ! -f "$CSV" ]; then
            echo "::error::CSV not found: $CSV"
            exit 64
          fi
          echo "CSV_PATH=$CSV" >> "$GITHUB_ENV"
          python "${RUN_DIR}/scripts/preflight_strict.py" "$CSV"

      - name: Run backtest (unified entry)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          export PYTHONPATH="${PWD}"
          python run_4u.py --data_path "${{ env.CSV_PATH }}" --out_dir "${{ github.workspace }}/${{ env.OUT_DIR }}"
          ls -l "${{ github.workspace }}/${{ env.OUT_DIR }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/preds_test.csv
            ${{ env.OUT_DIR }}/trades.csv
            ${{ env.OUT_DIR }}/preflight.jsonDIR }}/preflight.json
