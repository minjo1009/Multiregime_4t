name: Backtest

on:
  workflow_dispatch:
    inputs:
      trade_zip:
        description: trade code zip at repo root
        required: true
        default: trade_v1.0.6_full_patched.zip
      data_zip:
        description: market data zip at repo root
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      csv_glob:
        description: CSV filename glob (inside data zip)
        required: true
        default: "*ETHUSDT*1min*2020*2025*.csv"
      out_dir:
        description: output directory
        required: true
        default: _out_4u/run
      python_version:
        description: Python version
        required: true
        default: "3.11"

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      TRADE_ZIP: ${{ github.event.inputs.trade_zip }}
      DATA_ZIP:  ${{ github.event.inputs.data_zip }}
      CSV_GLOB:  ${{ github.event.inputs.csv_glob }}
      OUT_DIR:   ${{ github.event.inputs.out_dir }}
      PYVER:     ${{ github.event.inputs.python_version }}

    steps:
      # Pinned SHAs (보안 규칙 충족)
      - name: Checkout (pinned)
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PYVER }}
          cache: "pip"

      - name: Prepare & unzip
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"
          test -f "${TRADE_ZIP}" || { echo "❌ missing ${TRADE_ZIP}"; exit 1; }
          test -f "${DATA_ZIP}"  || { echo "❌ missing ${DATA_ZIP}"; exit 1; }
          unzip -q "${TRADE_ZIP}" -d "${RUN_DIR}"
          unzip -q "${DATA_ZIP}"  -d "${DATA_DIR}"

      - name: Detect code root (backtest/engine.py)
        shell: bash
        run: |
          set -euo pipefail
          found=$(find "${RUN_DIR}" -type f -path "*/backtest/engine.py" | head -n1 || true)
          if [ -z "$found" ]; then
            echo "❌ not found: backtest/engine.py under ${RUN_DIR}"
            find "${RUN_DIR}" -maxdepth 3 -type d -print
            exit 1
          fi
          CODE_DIR=$(dirname "$(dirname "$found")")
          echo "CODE_DIR=${CODE_DIR}" | tee -a "$GITHUB_ENV"

      - name: Detect CSV (absolute path)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob globstar
          CAND=( ${DATA_DIR}/${CSV_GLOB} )
          if (( ${#CAND[@]} == 0 )); then CAND=( ${DATA_DIR}/**/*.csv ); fi
          if (( ${#CAND[@]} == 0 )); then echo "❌ No CSV found"; exit 1; fi
          ABS_CSV="$(readlink -f "${CAND[0]}" || echo "${GITHUB_WORKSPACE}/${CAND[0]}")"
          echo "ABS_CSV=${ABS_CSV}" | tee -a "$GITHUB_ENV"

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python3 -V
          python3 -m pip install -U pip
          python3 -m pip install -r "${CODE_DIR}/requirements.txt"

      - name: Run backtest
        working-directory: ${{ env.CODE_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          python3 run_4u.py --data_path "${ABS_CSV}" --out_dir "${GITHUB_WORKSPACE}/${OUT_DIR}"

      - name: Upload artifacts (pinned)
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8
        with:
          name: backtest-output
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/trades.csv
            ${{ env.OUT_DIR }}/preds_test.csv