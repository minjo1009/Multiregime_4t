name: Backtest v1.0.8 (Checklist1)

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Code ZIP path (repo-relative or URL)
        required: true
        default: trade_v1.0.8.zip
      DATA_ZIP:
        description: Data ZIP path (repo-relative or URL)
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_GLOB:
        description: Glob for CSV inside data zip
        required: true
        default: "**/*ETHUSDT*1min*2020*2025*.csv"

jobs:
  backtest:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Validate pinned SHAs (Checklist1)
        run: |
          set -euo pipefail
          verify() {
            repo="$1"
            sha="$2"
            # 40-hex quick check
            if ! echo "$sha" | grep -Eq '^[0-9a-f]{40}$'; then
              echo "::error title=PinFormat::${repo}@${sha} is not a 40-hex SHA"
              exit 1
            fi
            # 1) commit existence
            if ! git ls-remote "https://github.com/${repo}.git" "${sha}" | grep -q "^${sha}"; then
              echo "::error title=PinNotFound::${repo}@${sha} not found via ls-remote"
              exit 1
            fi
            # 2) tarball HEAD check (2xx/3xx ok)
            code=$(curl -s -o /dev/null -w "%{http_code}" -I -L "https://api.github.com/repos/${repo}/tarball/${sha}" || true)
            case "$code" in
              2*|3*) : ;;
              *) echo "::warning::${repo}@${sha} tarball HEAD got HTTP ${code}";;
            esac
          }
          verify actions/checkout 11bd71901bbe5b1630ceea73d27597364c9af683
          verify actions/setup-python a26af69be951a213d495a4c3e4e4022e16d87065
          verify actions/upload-artifact ea165f8d65b6e75b540449e92b4886f43607fa02

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Python 3.11
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.11'

      - name: Prepare OS deps
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y unzip tzdata
          echo "TZ=Asia/Seoul" >> $GITHUB_ENV

      - name: Create workspace folders
        run: |
          set -euo pipefail
          mkdir -p tmp/trade tmp/data tmp/trade_raw _out_4u/run scripts

      - name: Bring zips
        run: |
          set -euo pipefail
          CODE_ZIP="${{ github.event.inputs.CODE_ZIP }}"
          DATA_ZIP="${{ github.event.inputs.DATA_ZIP }}"
          fetch() {
            src="$1"; dst="$2";
            if [[ "$src" =~ ^https?:// ]]; then
              curl -L "$src" -o "$dst"
            else
              cp -f "$src" "$dst"
            fi
          }
          fetch "$CODE_ZIP" tmp/code.zip
          fetch "$DATA_ZIP" tmp/data.zip
          ls -l tmp/*.zip

      - name: Unzip packs (flatten if double-folder)
        run: |
          set -euo pipefail
          unzip -q tmp/code.zip -d tmp/trade_raw
          if [ "$(find tmp/trade_raw -mindepth 1 -maxdepth 1 -type d | wc -l)" -eq 1 ]; then
            mv tmp/trade_raw/* tmp/trade/ || true
          else
            mv tmp/trade_raw/* tmp/trade/ || true
          fi
          unzip -q tmp/data.zip -d tmp/data
          echo "Code tree:"; find tmp/trade -maxdepth 2 -type d -print
          echo "Top files:"; ls -al tmp/trade | sed -n '1,80p'

      - name: Python deps (with fallback)
        working-directory: tmp/trade
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install --no-cache-dir -r requirements.txt || true
          fi
          pip install --no-cache-dir numpy pandas pyyaml scikit-learn jsonschema || true

      - name: Write preflight + shim + runners
        run: |
          set -euo pipefail
          cat > scripts/preflight_csv.py << 'PY'
          #!/usr/bin/env python3
          import sys, json, os, glob, pandas as pd
          root = sys.argv[1] if len(sys.argv)>1 else "tmp/data"
          csv_glob = os.environ.get("CSV_GLOB","**/*.csv")
          matches = sorted(glob.glob(os.path.join(root, csv_glob), recursive=True))
          if not matches:
              matches = sorted(glob.glob(os.path.join(root, "**/*.csv"), recursive=True))
          out = {"glob": csv_glob, "found": matches[:10]}
          if not matches:
              print(json.dumps(out, ensure_ascii=True))
              sys.exit(0)
          path = matches[0]
          try:
              df = pd.read_csv(path, nrows=2)
              need = ["open_time","open","high","low","close","volume"]
              missing = [c for c in need if c not in df.columns]
              out["sample_path"]=path
              out["columns"]=df.columns.tolist()
              out["missing"]=missing
          except Exception as e:
              out["error"]=str(e)
          print(json.dumps(out, ensure_ascii=True))
          with open("CSV_PATH.txt","w", encoding="utf-8") as f:
              f.write(path)
          PY
          chmod +x scripts/preflight_csv.py

          cat > scripts/make_empty_artifacts.py << 'PY'
          #!/usr/bin/env python3
          import os, json, pathlib
          base = pathlib.Path("_out_4u/run")
          base.mkdir(parents=True, exist_ok=True)
          (base/"gating_debug.json").write_text("{}", encoding="utf-8")
          (pathlib.Path("_out_4u")/"summary.json").write_text("{}", encoding="utf-8")
          (pathlib.Path("_out_4u")/"preds_test.csv").write_text("", encoding="utf-8")
          (pathlib.Path("_out_4u")/"trades.csv").write_text("", encoding="utf-8")
          print("Empty artifacts created")
          PY
          chmod +x scripts/make_empty_artifacts.py

          cat > scripts/entrypoint_run.sh << 'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE/tmp/trade"
          cd "$GITHUB_WORKSPACE"
          CSV_PATH="$(cat scripts/CSV_PATH.txt 2>/dev/null || true)"
          if [ -z "${CSV_PATH:-}" ] && [ -f "scripts/CSV_PATH.txt" ]; then
            CSV_PATH="$(cat scripts/CSV_PATH.txt)"
          fi
          if [ -z "${CSV_PATH:-}" ] ; then
            CSV_PATH="$(find tmp/data -type f -name "*.csv" | head -n1 || true)"
          fi
          echo "Using CSV: ${CSV_PATH:-<none>}"
          export CSV_PATH="$CSV_PATH"
          export PYTHONPATH="$ROOT:$ROOT/backtest:$PYTHONPATH"
          mkdir -p "_out_4u/run"
          cd "$ROOT"
          CFG="conf/config.yml"
          try() { echo "+ $*"; ( "$@" ) && return 0 || return 1; }
          try python run_4u.py --data "$CSV_PATH" --config "$CFG" && exit 0
          try python run_4u.py --csv "$CSV_PATH" --config "$CFG" && exit 0
          try python run_4u.py --data "$CSV_PATH" -c "$CFG" && exit 0
          try python run_4u.py "$CSV_PATH" && exit 0
          if [ -f "backtest/run_4u.py" ]; then
            try python backtest/run_4u.py --data "$CSV_PATH" --config "$CFG" && exit 0
          fi
          if python - << 'PY'
          import importlib, sys
          sys.exit(0 if importlib.util.find_spec("backtest.runner") else 1)
          PY
          then
            try python -m backtest.runner --data "$CSV_PATH" --config "$CFG" && exit 0
          fi
          echo "::warning::Entrypoint attempts failed; writing empty artifacts"
          python -u "$GITHUB_WORKSPACE/scripts/make_empty_artifacts.py"
          exit 0
          SH
          chmod +x scripts/entrypoint_run.sh

          if [ ! -f tmp/trade/run_4u.py ]; then
            cat > tmp/trade/run_4u.py << 'PY'
            import os, sys
            def main():
                csv = os.environ.get("CSV_PATH") or (sys.argv[1] if len(sys.argv)>1 else None)
                cfg = "conf/config.yml"
                if not csv:
                    print("[shim] CSV_PATH not provided")
                    return 3
                try:
                    from backtest.runner import run_backtest
                except Exception as e:
                    print(f"[shim] runner import failed: {e}")
                    return 2
                try:
                    _ = run_backtest(data_path=csv, config_path=cfg)
                except TypeError:
                    try:
                        _ = run_backtest(csv, cfg)
                    except Exception as e:
                        print(f"[shim] run_backtest failed: {e}")
                        return 4
                return 0
            if __name__ == "__main__":
                sys.exit(main())
            PY
          fi

      - name: Preflight data (warn-only)
        env:
          CSV_GLOB: ${{ github.event.inputs.CSV_GLOB }}
        run: |
          set -euo pipefail
          python -u scripts/preflight_csv.py tmp/data | tee preflight.json || true
          if [ -f CSV_PATH.txt ]; then
            mv CSV_PATH.txt scripts/CSV_PATH.txt
          fi

      - name: Run backtest
        run: |
          set -euo pipefail
          python -u scripts/make_empty_artifacts.py
          bash -u scripts/entrypoint_run.sh
          echo "Artifacts directory:"
          ls -al _out_4u || true
          ls -al _out_4u/run || true

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest_v1.0.8_outputs
          path: |
            _out_4u/summary.json
            _out_4u/gating_debug.json
            _out_4u/preds_test.csv
            _out_4u/trades.csv
          if-no-files-found: warn