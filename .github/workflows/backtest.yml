name: Backtest

on:
  workflow_dispatch:
    inputs:
      TRADE_ZIP:
        description: "Code zip at repo root (e.g., trade_v1.0.7.zip)"
        required: true
      DATA_ZIP:
        description: "Data zip at repo root (e.g., ETHUSDT_1min_2020_2025.zip)"
        required: true
      CSV_GLOB:
        description: "CSV pattern inside DATA_DIR (e.g., *ETHUSDT*1min*2020*2025*.csv)"
        required: true
      OUT_DIR:
        description: "Output directory"
        default: "_out_4u/run"
        required: true

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      REPO_DIR: repo
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_DIR: ${{ inputs.OUT_DIR }}
      PYTHONUTF8: "1"
      OMP_NUM_THREADS: "2"
      OPENBLAS_NUM_THREADS: "2"
      MKL_NUM_THREADS: "2"
      NUMEXPR_NUM_THREADS: "2"

    steps:
      - name: Validate inputs
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${{ inputs.TRADE_ZIP }}" ] || { echo "TRADE_ZIP empty"; exit 1; }
          [ -n "${{ inputs.DATA_ZIP }}" ]  || { echo "DATA_ZIP empty"; exit 1; }
          [ -n "${{ inputs.CSV_GLOB }}" ]  || { echo "CSV_GLOB empty"; exit 1; }

      # --- Self checkout (조직 정책상 actions/checkout 미사용) ---
      - name: Checkout repo (manual)
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p "${REPO_DIR}"
          cd "${REPO_DIR}"
          git init -q
          git remote add origin "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git -c protocol.version=2 fetch --no-tags --depth=1 origin "${GITHUB_SHA}"
          git checkout -q FETCH_HEAD

      - name: Prepare dirs
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"

      - name: Inflate code & data
        shell: bash
        run: |
          set -euo pipefail
          CODE_ZIP="${{ inputs.TRADE_ZIP }}"
          DATA_ZIP="${{ inputs.DATA_ZIP }}"
          test -f "${REPO_DIR}/${CODE_ZIP}" || { echo "Code zip not found: ${REPO_DIR}/${CODE_ZIP}"; exit 1; }
          test -f "${REPO_DIR}/${DATA_ZIP}" || { echo "Data zip not found: ${REPO_DIR}/${DATA_ZIP}"; exit 1; }
          unzip -q "${REPO_DIR}/${CODE_ZIP}" -d "${RUN_DIR}"
          unzip -q "${REPO_DIR}/${DATA_ZIP}" -d "${DATA_DIR}"

      # === 문제났던 부분: heredoc 제거 ===
      - name: Preflight CSV (robust; no heredoc)
        shell: bash
        env:
          CSV_GLOB_IN: ${{ inputs.CSV_GLOB }}
        run: |
          set -euo pipefail
          CSV_PATH="$(ls ${DATA_DIR}/${CSV_GLOB_IN} 2>/dev/null | head -n1 || true)"
          [ -n "$CSV_PATH" ] || CSV_PATH="$(ls ${DATA_DIR}/*.csv 2>/dev/null | head -n1 || true)"
          [ -n "$CSV_PATH" ] || { echo "No CSV found under ${DATA_DIR}"; exit 1; }
          echo "Using CSV_PATH=${CSV_PATH}"
          echo "CSV_PATH=${CSV_PATH}" >> "$GITHUB_ENV"

          # preflight.py를 printf로 생성 (ASCII만 사용)
          printf "%s\n" \
"import os, sys, pandas as pd" \
"p=os.environ.get('CSV_PATH')" \
"if not p:" \
"    print('CSV_PATH missing'); sys.exit(1)" \
"df=pd.read_csv(p, nrows=2)" \
"need={'open_time','open','high','low','close','volume'}" \
"miss=need - set(df.columns)" \
"if miss:" \
"    print('Missing base columns:', sorted(miss)); sys.exit(1)" \
"print('Columns OK:', sorted(df.columns))" \
> preflight.py

          python3 preflight.py

      - name: Setup Python (no project files required)
        shell: bash
        run: |
          set -euo pipefail
          python3 -V
          python3 -m pip -q install -U pip
          # repo 내부 requirements가 있으면 사용, 없으면 기본세트
          if [ -f "${RUN_DIR}/requirements.txt" ]; then
            python3 -m pip install -r "${RUN_DIR}/requirements.txt"
          else
            python3 -m pip install -q pyyaml pandas numpy scikit-learn
          fi
          python3 - <<'PY'
import sys, sklearn, inspect
from sklearn.calibration import CalibratedClassifierCV as C
print("sklearn", sklearn.__version__, "| py", sys.version.split()[0],
      "| has 'estimator':", 'estimator' in set(inspect.signature(C).parameters))
PY

      - name: Sanity check run files
        shell: bash
        run: |
          set -euo pipefail
          test -f "${RUN_DIR}/run_4u.py" || { echo "run_4u.py missing"; exit 1; }

      - name: Run backtest
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          echo "CSV_PATH=${CSV_PATH}"
          python3 run_4u.py --data_path "${CSV_PATH}" --out_dir "${GITHUB_WORKSPACE}/${OUT_DIR}"
          echo "---- gating debug head ----"
          if [ -f "${GITHUB_WORKSPACE}/${OUT_DIR}/gating_debug.json" ]; then
            head -n 60 "${GITHUB_WORKSPACE}/${OUT_DIR}/gating_debug.json" || true
          else
            echo "{}" > "${GITHUB_WORKSPACE}/${OUT_DIR}/gating_debug.json"
          fi
          ls -al "${GITHUB_WORKSPACE}/${OUT_DIR}"

      - name: Upload artifacts (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/preds_test.csv
            ${{ env.OUT_DIR }}/trades.csv
            ${{ env.OUT_DIR }}/charts/
          if-no-files-found: warn
          retention-days: 30