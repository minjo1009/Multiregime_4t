name: Run backtest (strict-no-checkout)

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Code zip at repo root
        required: true
        default: trade_v1.0.8.zip
      DATA_ZIP:
        description: Data zip at repo root
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_GLOB:
        description: CSV glob inside data dir
        required: true
        default: "*ETHUSDT*1min*2020*2025*.csv"

permissions:
  contents: read

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    env:
      RUN_DIR: _work/code
      DATA_DIR: _work/data
      OUT_DIR: _out_4u/run

    steps:
      # == checkout 대체: 레포 zipball 직접 다운로드 ==
      - name: Fetch repository without actions/checkout
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/zipball/${GITHUB_SHA}" \
            -o repo.zip
          rm -rf __repo && mkdir __repo
          unzip -q repo.zip -d __repo
          shopt -s dotglob nullglob
          src="$(ls -d __repo/* | head -n1)"
          mv "$src"/* .
          rm -rf __repo repo.zip

      # == setup-python 대체: apt로 3.11 설치 + venv ==
      - name: Install Python 3.11 and venv
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y python3.11 python3.11-venv python3-pip
          python3.11 -m venv .venv
          . .venv/bin/activate
          python -V
          python -m pip -q install -U pip

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          . .venv/bin/activate
          if [ -f requirements.txt ]; then
            python -m pip -q install -r requirements.txt
          else
            python -m pip -q install pandas numpy scikit-learn pyyaml
          fi

      - name: Prepare dirs and unzip
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$RUN_DIR" "$DATA_DIR" "$OUT_DIR"
          mkdir -p "$RUN_DIR" "$DATA_DIR" "$OUT_DIR"
          unzip -o "${{ github.event.inputs.CODE_ZIP }}" -d "$RUN_DIR" >/dev/null
          unzip -o "${{ github.event.inputs.DATA_ZIP }}" -d "$DATA_DIR" >/dev/null

      - name: Detect CSV and export CSV_PATH
        shell: bash
        run: |
          set -euo pipefail
          base="$DATA_DIR"
          pat="${{ github.event.inputs.CSV_GLOB }}"
          shopt -s globstar nullglob
          matches=()
          while IFS= read -r -d '' f; do matches+=("$f"); done < <(printf '%s\0' "$base"/**/$pat)
          if [ "${#matches[@]}" -eq 0 ]; then
            while IFS= read -r -d '' f; do matches+=("$f"); done < <(printf '%s\0' "$base"/**/*.csv)
          fi
          if [ "${#matches[@]}" -eq 0 ]; then
            echo "::error::CSVDetect: no CSV found under $base"; exit 64
          fi
          p="${matches[0]}"
          ABS="$(. .venv/bin/activate; python -c 'import os,sys;print(os.path.abspath(sys.argv[1]))' "$p")"
          echo "CSV_PATH=$ABS" >> "$GITHUB_ENV"
          echo "Using CSV_PATH=$ABS"

      - name: Preflight columns (no heredoc)
        shell: bash
        run: |
          set -euo pipefail
          . .venv/bin/activate
          printf '%s\n' \
          "import os, sys, pandas as pd" \
          "p = os.environ.get('CSV_PATH')" \
          "if not p or not os.path.exists(p):" \
          "    print('::error::Preflight: CSV_PATH missing or not exists:', p); raise SystemExit(84)" \
          "df = pd.read_csv(p, nrows=100)" \
          "need = {'open_time','open','high','low','close','volume'}" \
          "cols = set(c.lower() for c in df.columns)" \
          "miss = need - cols" \
          "if miss: print('::error::Preflight missing columns:', sorted(miss)); raise SystemExit(84)" \
          "print('Preflight OK')" \
          > preflight.py
          python preflight.py

      - name: Choose entrypoint and run
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          . ../../.venv/bin/activate
          mkdir -p "${{ env.OUT_DIR }}"
          [ -f "${{ env.OUT_DIR }}/gating_debug.json" ] || echo "{}" > "${{ env.OUT_DIR }}/gating_debug.json"
          entry=""
          for c in run_4u.py backtest/run_4u.py run.py backtest/runner.py; do
            [ -f "$c" ] && entry="$c" && break
          done
          if [ -z "$entry" ]; then echo "::error::Runtime: backtest entry not found"; exit 70; fi
          python "$entry" --csv "$CSV_PATH" --out "${{ env.OUT_DIR }}" || true
          : > "${{ env.OUT_DIR }}/summary.json"
          : > "${{ env.OUT_DIR }}/preds_test.csv"
          : > "${{ env.OUT_DIR }}/trades.csv"

      - name: Upload artifacts (pinned)
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e0b1f71c5e3cd2a1f1e166d0ad2d
        with:
          name: backtest-output
          path: |
            _out_4u/run/gating_debug.json
            _out_4u/run/summary.json
            _out_4u/run/preds_test.csv
            _out_4u/run/trades.csv