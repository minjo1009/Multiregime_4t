name: Run backtest (strict-min)

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Code zip at repo root
        required: true
        default: trade_v1.0.8.zip
      DATA_ZIP:
        description: Data zip at repo root
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_GLOB:
        description: CSV glob inside data dir
        required: true
        default: "*ETHUSDT*1min*2020*2025*.csv"

permissions:
  contents: read

env:
  PY: "3.11"
  CODE_DIR: tmp/code
  DATA_DIR: tmp/data
  OUT_DIR: _out_4u/run

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@11bd71901b2cbc3cb3cbbf5b1b973078d1b96b7a

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PY }}

      - name: Prepare dirs and unzip code and data
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$CODE_DIR" "$DATA_DIR" "$OUT_DIR"
          mkdir -p "$CODE_DIR" "$DATA_DIR" "$OUT_DIR"
          unzip -q -o "${{ github.event.inputs.CODE_ZIP }}" -d "$CODE_DIR"
          unzip -q -o "${{ github.event.inputs.DATA_ZIP }}" -d "$DATA_DIR"
          [ -f "$OUT_DIR/gating_debug.json" ] || echo '{}' > "$OUT_DIR/gating_debug.json"

      - name: Install dependencies
        shell: bash
        working-directory: ${{ env.CODE_DIR }}
        run: |
          set -euo pipefail
          python -m pip -q install -U pip
          if [ -f requirements.txt ]; then
            python -m pip -q install -r requirements.txt
          else
            python -m pip -q install pandas numpy scikit-learn pyyaml
          fi

      - name: Detect CSV and export CSV_PATH
        id: detect_csv
        shell: bash
        env:
          CSV_GLOB_IN: ${{ github.event.inputs.CSV_GLOB }}
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          base="$DATA_DIR"
          files=( $base/**/$CSV_GLOB_IN )
          if [ ${#files[@]} -eq 0 ]; then files=( $base/**/*.csv ); fi
          if [ ${#files[@]} -eq 0 ]; then echo "ERROR: No CSV found under $base"; exit 1; fi
          p="${files[0]}"
          abs="$(python -c 'import os,sys;print(os.path.abspath(sys.argv[1]))' "$p")"
          echo "CSV_PATH=$abs" | tee -a "$GITHUB_ENV"
          echo "Using CSV_PATH=$abs"

      - name: Preflight required columns
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, sys, pandas as pd
          p = os.environ.get("CSV_PATH")
          if not p or not os.path.exists(p):
              print("ERROR: CSV_PATH missing or not exists:", p); sys.exit(2)
          df = pd.read_csv(p, nrows=2)
          need = {'open_time','open','high','low','close','volume'}
          cols = {str(c).lower() for c in df.columns}
          miss = need - cols
          if miss:
              print("ERROR: Missing base columns:", sorted(miss)); sys.exit(3)
          print("OK: Columns present:", sorted(need))
          PY

      - name: Choose entrypoint and run
        shell: bash
        working-directory: ${{ env.CODE_DIR }}
        run: |
          set -euo pipefail
          entry=""
          for c in "run_4u.py" "backtest/run_4u.py" "run.py" "backtest/runner.py"; do
            if [ -f "$c" ]; then entry="$c"; break; fi
          done
          if [ -z "$entry" ]; then
            echo "ERROR: backtest entry not found under $PWD"
            find . -maxdepth 2 -type f -name "*.py" | sed -n '1,80p' || true
            exit 4
          fi
          echo "Using entrypoint: $entry"
          python "$entry" --csv "$CSV_PATH" --out "$GITHUB_WORKSPACE/${{ env.OUT_DIR }}"

      - name: Upload artifacts (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e0b1f71c5e3cd2a1f1e166d0ad2d
        with:
          name: backtest-output
          path: |
            _out_4u/run/summary.json
            _out_4u/run/gating_debug.json
            _out_4u/run/preds_test.csv
            _out_4u/run/trades.csv
          if-no-files-found: warn