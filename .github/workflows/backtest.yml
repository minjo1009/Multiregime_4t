name: Backtest

on:
  workflow_dispatch:
    inputs:
      trade_zip:
        description: trade code zip
        required: true
        default: trade_v1.0.6_override.zip
      data_zip:
        description: market data zip
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      csv_glob:
        description: CSV filename glob (inside data zip)
        required: true
        default: "*ETHUSDT*1min*2020*2025*.csv"
      out_dir:
        description: output directory
        required: true
        default: _out_4u/run
      python_version:
        description: Python version
        required: true
        default: "3.11"
      fail_on_fingerprint:
        description: fail if gating fingerprint missing (true/false)
        required: true
        default: "false"

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    env:
      REPO_DIR: repo
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      TRADE_ZIP: ${{ github.event.inputs.trade_zip }}
      DATA_ZIP:  ${{ github.event.inputs.data_zip }}
      CSV_GLOB:  ${{ github.event.inputs.csv_glob }}
      OUT_DIR:   ${{ github.event.inputs.out_dir }}
      PYVER:     ${{ github.event.inputs.python_version }}
      FAIL_FP:   ${{ github.event.inputs.fail_on_fingerprint }}

    steps:
      # --- pinned SHAs (보안정책 충족)
      - name: Checkout (pinned)
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PYVER }}
          cache: "pip"

      - name: Prepare workspace
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"

      - name: Unzip trade & data
        shell: bash
        run: |
          set -euo pipefail
          test -f "${TRADE_ZIP}" || { echo "missing ${TRADE_ZIP}"; exit 1; }
          test -f "${DATA_ZIP}"  || { echo "missing ${DATA_ZIP}"; exit 1; }
          unzip -q "${TRADE_ZIP}" -d "${RUN_DIR}"
          unzip -q "${DATA_ZIP}"  -d "${DATA_DIR}"
          echo "[data sample]"; find "${DATA_DIR}" -type f -name "*.csv" | head -n 5 || true

      - name: Detect CSV (bash only)
        id: detect_csv
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob globstar
          CAND=( ${DATA_DIR}/${CSV_GLOB} )
          if (( ${#CAND[@]} == 0 )); then
            echo "No CSV matched: ${CSV_GLOB} in ${DATA_DIR}"; exit 1
          fi
          echo "CSV_PATH=${CAND[0]}" >> $GITHUB_ENV
          echo "Using CSV: ${CAND[0]}"

      - name: Install requirements
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python -V
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            python -m pip install numpy pandas scikit-learn scipy matplotlib
          fi

      # --- 과거 fingerprint는 경고만
      - name: Fingerprint check (warn-only)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          F="backtest/runner.py"
          miss=0
          grep -q "Coverage-aligned gating" "$F" || { echo "WARN: missing Coverage-aligned gating"; miss=$((miss+1)); }
          grep -q "S1 probability floor cutoff" "$F" || { echo "WARN: missing S1 probability floor cutoff"; miss=$((miss+1)); }
          if [ "$FAIL_FP" = "true" ] && [ $miss -gt 0 ]; then
            echo "fingerprint mismatch & fail_on_fingerprint=true"; exit 1
          fi
          echo "fingerprint warnings: $miss"

      # --- gate/score 보강 (코드팩 미패치 방지)
      - name: Hotfix runner (inject df['score'] & df['gate'])
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          F="backtest/runner.py"
          # '# Save debug' 라인 바로 아래에 보정 컬럼 생성 코드 주입 (앵커 없어도 sed 0 반환)
          sed -i '/# Save debug/a\    df["score"]=score_series; df["gate"]=gate' "$F" || true
          grep -n "df\\['gate'\\]" "$F" | head -n 1 || echo "WARN: sed injection check could not find df['gate']"

      - name: Preflight CSV schema (bash only)
        shell: bash
        run: |
          set -euo pipefail
          HDR="$(head -n 1 "${CSV_PATH}")"
          for c in open_time open high low close; do
            echo "$HDR" | grep -q "$c" || { echo "Missing column: $c"; exit 1; }
          done
          echo "CSV columns OK"

      - name: Run backtest
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          mkdir -p "${OUT_DIR}"
          python run_4u.py --data_path "${CSV_PATH}" --config "conf/config.yml" --out_dir "${OUT_DIR}"
          echo "---- outputs ----"; ls -al "${OUT_DIR}" || true
          echo "---- summary ----"; head -n 60 "${OUT_DIR}/summary.json" 2>/dev/null || true
          echo "---- gating ----";  head -n 60 "${OUT_DIR}/gating_debug.json" 2>/dev/null || true

      - name: Upload artifacts (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/trades.csv
            ${{ env.OUT_DIR }}/preds_test.csv
          if-no-files-found: error
          retention-days: 30
          compression-level: 6
