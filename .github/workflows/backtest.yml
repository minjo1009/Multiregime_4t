name: Run backtest (strict-min)

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: "Code zip at repo root"
        required: true
        default: "trade_v1.0.8.zip"
      DATA_ZIP:
        description: "Data zip at repo root"
        required: true
        default: "ETHUSDT_1min_2020_2025.zip"
      CSV_GLOB:
        description: "CSV glob inside data dir"
        required: true
        default: "*ETHUSDT*1min*2020*2025*.csv"
      PY:
        description: "Python version"
        required: true
        default: "3.11"

permissions:
  contents: read

env:
  RUN_DIR: tmp/trade
  DATA_DIR: tmp/data
  OUT_DIR: _out_4u/run
  # ----- use SHAs that already worked in a past successful run -----
  CHECKOUT_SHA: 11bd71901b2cbc3cb3cbbf5b1b973078d1b96b7a
  SETUP_PYTHON_SHA: a26af69be951a213d495a4c3e4e4022e16d87065
  UPLOAD_ARTIFACT_SHA: ea165f8d65b6e0b1f71c5e3cd2a1f1e166d0ad2d

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Validate pinned SHAs (exist)
        run: |
          set -euo pipefail
          hex40='^[0-9a-f]{40}$'
          for n in checkout setup-python upload-artifact; do
            s="${n^^}_SHA"; v="${!s}"
            [[ "$v" =~ $hex40 ]] || { echo "PinnedSHA: $n not 40-hex"; exit 86; }
            url="https://api.github.com/repos/actions/${n}/tarball/${v}"
            curl -fsIL "$url" >/dev/null || { echo "PinnedSHA: $n@$v not found on GitHub"; exit 86; }
          done
          echo "OK pinned SHAs"

      - name: Checkout (pinned)
        uses: actions/checkout@${{ env.CHECKOUT_SHA }}

      - name: Setup Python (pinned)
        uses: actions/setup-python@${{ env.SETUP_PYTHON_SHA }}
        with:
          python-version: ${{ github.event.inputs.PY }}

      - name: Prepare dirs and unzip code/data
        run: |
          set -euo pipefail
          rm -rf "$RUN_DIR" "$DATA_DIR" "$OUT_DIR"
          mkdir -p "$RUN_DIR" "$DATA_DIR" "$OUT_DIR"
          unzip -o "${{ github.event.inputs.CODE_ZIP }}" -d "$RUN_DIR" >/dev/null
          unzip -o "${{ github.event.inputs.DATA_ZIP }}" -d "$DATA_DIR" >/dev/null
          [ -f "$OUT_DIR/gating_debug.json" ] || echo '{}' > "$OUT_DIR/gating_debug.json"

      - name: Install deps (requirements.txt if present)
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python3 -m pip -q install -U pip
          if [ -f requirements.txt ]; then
            python3 -m pip -q install -r requirements.txt
          else
            python3 -m pip -q install pandas numpy scikit-learn pyyaml
          fi

      - name: Detect CSV and export CSV_PATH
        run: |
          set -euo pipefail
          cat > detect_csv.py <<'PY'
          import os, sys, glob
          base = sys.argv[1]
          pat  = sys.argv[2]
          matches = glob.glob(os.path.join(base, "**", pat), recursive=True)
          if not matches:
              matches = glob.glob(os.path.join(base, "**", "*.csv"), recursive=True)
          if not matches:
              print(f"ERROR: No CSV found under {base}", file=sys.stderr)
              sys.exit(12)
          # choose the first match deterministically
          matches.sort()
          p = matches[0]
          print(os.path.abspath(p))
          PY
          CSV_PATH=$(python3 detect_csv.py "$DATA_DIR" "${{ github.event.inputs.CSV_GLOB }}")
          echo "CSV_PATH=$CSV_PATH" | tee -a "$GITHUB_ENV"
          echo "Using CSV_PATH=$CSV_PATH"

      - name: Preflight columns (quick)
        run: |
          set -euo pipefail
          cat > preflight.py <<'PY'
          import os, sys, pandas as pd
          p = os.environ.get("CSV_PATH")
          if not p or not os.path.exists(p):
              print("ERROR: CSV_PATH missing or not exists:", p)
              sys.exit(13)
          df = pd.read_csv(p, nrows=2)
          need = {'open_time','open','high','low','close','volume'}
          cols = {str(c).lower() for c in df.columns}
          miss = need - cols
          if miss:
              print("ERROR: Missing base columns:", sorted(miss))
              sys.exit(14)
          print("OK: Columns present:", sorted(cols))
          PY
          python3 preflight.py

      - name: Choose entrypoint and run
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          OUT_ABS="$GITHUB_WORKSPACE/$OUT_DIR"
          ENTRY=""
          for c in "run_4u.py" "backtest/run_4u.py" "run.py" "backtest/runner.py"; do
            if [ -f "$c" ]; then ENTRY="$c"; break; fi
          done
          if [ -z "$ENTRY" ]; then
            echo "ERROR: backtest entry not found in $PWD"
            ls -al
            exit 21
          fi
          echo "Using entry: $ENTRY"
          # if your script accepts args, extend here; default is plain run
          python3 "$ENTRY"

      - name: Upload artifacts (pinned)
        uses: actions/upload-artifact@${{ env.UPLOAD_ARTIFACT_SHA }}
        with:
          name: backtest-output
          path: _out_4u/run/*