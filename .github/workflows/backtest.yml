name: Backtest

on:
  workflow_dispatch:
    inputs:
      trade_zip_path:
        description: "Path to trade pack zip"
        type: string
        default: "trade_v1.0.4b_full.zip"
      data_zip_path:
        description: "Path to data zip (CSV inside)"
        type: string
        default: "ETHUSDT_1min_2020_2025.zip"

permissions:
  contents: read

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    defaults: { run: { shell: bash } }
    env:
      WS:           ${{ github.workspace }}
      REPO_DIR:     ${{ github.workspace }}/repo
      TRADE_ZIP:    ${{ inputs.trade_zip_path }}
      DATA_ZIP:     ${{ inputs.data_zip_path }}
      RUN_DIR:      ${{ github.workspace }}/tmp/trade
      DATA_DIR:     ${{ github.workspace }}/tmp/data
      OUT_DIR:      ${{ github.workspace }}/_out_4u/run
      CSV_PATH:     ${{ github.workspace }}/tmp/data/ETHUSDT_1min_2020_2025.csv
      OMP_NUM_THREADS: "2"
      OPENBLAS_NUM_THREADS: "2"
      MKL_NUM_THREADS: "2"
      NUMEXPR_NUM_THREADS: "2"

    steps:
      # --- 현재 커밋 수동 체크아웃 (외부 액션 불필요)
      - name: Manual checkout (no external action)
        run: |
          set -euo pipefail
          rm -rf "${REPO_DIR}"
          git init "${REPO_DIR}"
          cd "${REPO_DIR}"
          git remote add origin "https://github.com/${GITHUB_REPOSITORY}.git"
          git -c advice.detachedHead=false fetch --depth=1 origin "${GITHUB_SHA}"
          git checkout --detach "${GITHUB_SHA}"

      - name: Prepare working dirs
        run: |
          set -euo pipefail
          rm -rf "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"

      - name: Unzip packs
        run: |
          set -euo pipefail
          test -f "${REPO_DIR}/${TRADE_ZIP}" || { echo "❌ trade zip not found: ${TRADE_ZIP}"; ls -al "${REPO_DIR}"; exit 1; }
          test -f "${REPO_DIR}/${DATA_ZIP}"  || { echo "❌ data zip not found: ${DATA_ZIP}"; ls -al "${REPO_DIR}"; exit 1; }
          unzip -q "${REPO_DIR}/${TRADE_ZIP}" -d "${RUN_DIR}"
          unzip -q "${REPO_DIR}/${DATA_ZIP}"  -d "${DATA_DIR}"

      # 1차: CSV 자동 탐지 (절대경로로 ENV에 주입)
      - name: Detect CSV path
        run: |
          set -euo pipefail
          echo "--- data dir tree ---"
          find "${DATA_DIR}" -maxdepth 4 -type f -name "*.csv" -print | sed 's/^/ - /' || true
          cand=""
          for pat in "*ETHUSDT*1min*2020*2025*.csv" "*ETHUSDT*1m*2020*2025*.csv" "*.csv"; do
            hit=$(find "${DATA_DIR}" -type f -iname "$pat" | sort | head -n1 || true)
            if [ -n "$hit" ]; then cand="$hit"; break; fi
          done
          [ -n "$cand" ] || { echo "❌ No CSV found in ${DATA_DIR}"; exit 1; }
          echo "CSV_PATH=${cand}" | tee -a "$GITHUB_ENV"
          echo "Resolved CSV_PATH=${cand}"

      - name: Install requirements
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python -c 'import sys; print("Python", sys.version)'
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -c 'import sklearn; print("sklearn", sklearn.__version__)'

      - name: CalibratedClassifierCV smoke test
        run: |
          python - <<'PY'
          from sklearn.calibration import CalibratedClassifierCV as C
          from sklearn.linear_model import LogisticRegression as L
          try:
              C(estimator=L()); print("OK: estimator (>=1.5)")
          except TypeError:
              C(base_estimator=L()); print("OK: base_estimator (<=1.4)")
          PY

      - name: Fingerprint check (v1.0.4 family)
        run: |
          set -euo pipefail
          FILE="${RUN_DIR}/backtest/runner.py"
          grep -q "Coverage-aligned gating" "$FILE" || { echo "❌ missing: Coverage-aligned gating"; exit 1; }
          if grep -q "S1 min prob cutoff" "$FILE"; then
            echo "✅ S1 cutoff (comment)"
          elif grep -q "df\\['gate'\\] *= *df\\['gate'\\] *\\* *\\(df\\['p_long'\\] *>= *p_cut\\)" "$FILE"; then
            echo "✅ S1 cutoff (code pattern)"
          else
            echo "❌ missing: S1 cutoff"; exit 1
          fi

      - name: Preflight CSV
        run: |
          python - <<'PY'
          import os, sys, pandas as pd
          csv = os.environ['CSV_PATH']
          print("Using CSV:", csv)
          df  = pd.read_csv(csv, nrows=2)
          need = {'open_time','open','high','low','close','volume','number_of_trades'}
          miss = need - set(df.columns)
          if miss: print('❌ Missing base columns:', miss); sys.exit(1)
          hints = {'taker_buy_base_asset_volume','taker_buy_quote_asset_volume'}
          if not (hints & set(df.columns)): print('❌ Need taker_buy_* volume columns'); sys.exit(1)
          print('✅ CSV OK')
          PY

      # 2차: 실행 직전 재확인(없으면 재탐지) — 절대경로 기준
      - name: Run backtest
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          if [ ! -f "${CSV_PATH}" ]; then
            echo "CSV_PATH not found -> re-detecting…"
            cand=$(find "${DATA_DIR}" -type f \( -iname "*ETHUSDT*1min*2020*2025*.csv" -o -iname "*ETHUSDT*1m*2020*2025*.csv" -o -iname "*.csv" \) | sort | head -n1 || true)
            [ -n "$cand" ] || { echo "❌ No CSV found in ${DATA_DIR}"; exit 1; }
            CSV_PATH="$cand"
          fi
          echo "Using CSV_PATH=${CSV_PATH}"
          python run_4u.py --data_path "${CSV_PATH}" --out_dir "${OUT_DIR}"
          echo "---- gating debug ----"
          cat "${OUT_DIR}/gating_debug.json" || true
          ls -al "${OUT_DIR}"

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/charts/
            ${{ env.OUT_DIR }}/gating_debug.json
          if-no-files-found: warn
          retention-days: 30
          compression-level: 6