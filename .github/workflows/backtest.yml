name: Backtest

on:
  workflow_dispatch:
    inputs:
      TRADE_ZIP:
        description: "Code zip at repo root (e.g., trade_v1.0.7.zip)"
        required: true
        type: string
      DATA_ZIP:
        description: "Data zip at repo root (e.g., ETHUSDT_1min_2020_2025.zip)"
        required: true
        type: string
      CSV_GLOB:
        description: "CSV glob inside DATA_DIR (e.g., *ETHUSDT*1min*2020*2025*.csv)"
        required: true
        type: string
      PYVER:
        description: "Python version (3.10/3.11). Default: 3.11"
        required: false
        default: "3.11"
        type: string
      CHECKOUT_REF:
        description: "actions/checkout ref (full-length commit SHA preferred; fallback v4)"
        required: false
        default: "v4"
        type: string
      SETUP_PYTHON_REF:
        description: "actions/setup-python ref (full-length commit SHA preferred; fallback v5)"
        required: false
        default: "v5"
        type: string
      UPLOAD_ARTIFACT_REF:
        description: "actions/upload-artifact ref (full-length commit SHA preferred; fallback v4)"
        required: false
        default: "v4"
        type: string

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_DIR: _out_4u/run

    steps:
      - name: Checkout (configurable ref)
        uses: actions/checkout@${{ inputs.CHECKOUT_REF }}

      - name: Setup Python (configurable ref)
        uses: actions/setup-python@${{ inputs.SETUP_PYTHON_REF }}
        with:
          python-version: ${{ inputs.PYVER }}
          cache: pip
          update-environment: true

      - name: Prep & unzip code + data
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$RUN_DIR" "$DATA_DIR" "$OUT_DIR"
          test -f "${{ inputs.TRADE_ZIP }}" || { echo "❌ missing code zip: ${{ inputs.TRADE_ZIP }}"; exit 1; }
          test -f "${{ inputs.DATA_ZIP }}" || { echo "❌ missing data zip: ${{ inputs.DATA_ZIP }}"; exit 1; }
          unzip -q "${{ inputs.TRADE_ZIP }}" -d "$RUN_DIR"
          unzip -q "${{ inputs.DATA_ZIP }}" -d "$DATA_DIR"
          echo "✓ unzipped:"
          ls -al "$RUN_DIR" | sed -n '1,80p'
          ls -al "$DATA_DIR" | sed -n '1,80p'

      - name: Detect CSV & export absolute CSV_PATH
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="$(ls ${DATA_DIR}/${{ inputs.CSV_GLOB }} 2>/dev/null | head -n1 || true)"
          if [ -z "${CANDIDATE}" ]; then
            CANDIDATE="$(ls ${DATA_DIR}/*.csv 2>/dev/null | head -n1 || true)"
          fi
          [ -n "${CANDIDATE}" ] || { echo "❌ No CSV found in ${DATA_DIR}"; exit 1; }
          ABS="$(python3 - <<'PY'
import os, sys
print(os.path.abspath(sys.argv[1]))
PY
 "$CANDIDATE")"
          echo "CSV_PATH=${ABS}" | tee -a "$GITHUB_ENV"
          echo "Using CSV_PATH=${ABS}"

      - name: Preflight CSV
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
import os, sys, pandas as pd
p=os.environ.get('CSV_PATH')
if not p or not os.path.exists(p):
    print("❌ CSV_PATH missing or not exists:", p); sys.exit(1)
df=pd.read_csv(p, nrows=2)
need={'open_time','open','high','low','close','volume'}
miss=need - set(df.columns)
if miss:
    print("❌ Missing base columns:", sorted(miss)); sys.exit(1)
print("✅ Columns OK:", sorted(df.columns))
PY

      - name: Install Python deps (optional)
        working-directory: ${{ env.RUN_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          python3 -m pip -q install -U pip
          if [ -f requirements.txt ]; then
            python3 -m pip install -r requirements.txt
          else
            echo "(skip) requirements.txt not found"
          fi

      - name: Run backtest
        working-directory: ${{ env.RUN_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          python3 run_4u.py --data_path "${CSV_PATH}" --out_dir "${OUT_DIR}"

      - name: Upload artifacts (configurable ref)
        if: ${{ always() }}
        uses: actions/upload-artifact@${{ inputs.UPLOAD_ARTIFACT_REF }}
        with:
          name: backtest-output
          path: |
            _out_4u/run/summary.json
            _out_4u/run/gating_debug.json
            _out_4u/run/preds_test.csv
            _out_4u/run/trades.csv
          if-no-files-found: warn
          retention-days: 30
