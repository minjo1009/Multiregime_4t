name: backtest
on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: "Code zip in repo root"
        required: true
        default: "trade_v1.0.8.zip"
      DATA_ZIP:
        description: "Data zip in repo root"
        required: true
        default: "ETHUSDT_1min_2020_2025.zip"
      CSV_GLOB:
        description: "CSV glob inside data zip"
        required: false
        default: "*ETHUSDT*1min*2020*2025*.csv"

permissions:
  contents: read

jobs:
  backtest:
    runs-on: ubuntu-latest
    steps:
      # ① 반드시 풀 SHA로 고정 (표현식/태그 금지)
      - name: Checkout (pinned)
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"

      - name: Show versions
        run: |
          python3 -V
          pip -V

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy scikit-learn pyyaml
          fi

      - name: Unzip data & code
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p _work _out_4u/run
          unzip -o "${{ github.workspace }}/${{ inputs.DATA_ZIP }}" -d _work/data >/dev/null
          unzip -o "${{ github.workspace }}/${{ inputs.CODE_ZIP }}" -d _work/code >/dev/null
          # CSV 탐색 (패턴 → 폴백)
          CSV_PATH="$(ls -1 _work/data/**/${{ inputs.CSV_GLOB }} 2>/dev/null | head -n1 || true)"
          if [ -z "$CSV_PATH" ]; then
            CSV_PATH="$(ls -1 _work/data/**/*.csv 2>/dev/null | head -n1 || true)"
          fi
          if [ -z "$CSV_PATH" ]; then
            echo "::error::CSVDetect: no CSV found by pattern or fallback"; exit 85
          fi
          echo "CSV_PATH=$CSV_PATH" >> $GITHUB_ENV

      - name: Preflight columns
        shell: bash
        run: |
          python3 - <<'PY'
import sys, pandas as pd, os
p=os.environ["CSV_PATH"]
df=pd.read_csv(p, nrows=100)
need={'open_time','open','high','low','close','volume'}
miss=need - set(map(str.lower, df.columns))
# 열 이름을 소문자화하여 비교(대소문자 이슈 회피)
lower_cols=set(c.lower() for c in df.columns)
miss=need - lower_cols
if miss: 
    print(f"::error::Preflight missing columns: {sorted(miss)}"); sys.exit(84)
print("Preflight OK")
PY

      - name: Run backtest
        shell: bash
        run: |
          set -euo pipefail
          # 엔트리포인트 우선순위 탐색
          entry=""
          for c in _work/code/run_4u.py _work/code/backtest/run_4u.py _work/code/run.py _work/code/backtest/runner.py; do
            [ -f "$c" ] && entry="$c" && break
          done
          if [ -z "$entry" ]; then echo "::error::Runtime: no entrypoint found"; exit 83; fi
          python3 "$entry" --csv "$CSV_PATH" --outdir _out_4u/run || true
          # 실패하더라도 최소 디버그 파일 생성
          [ -f _out_4u/run/gating_debug.json ] || echo "{}" > _out_4u/run/gating_debug.json
          # 결과가 없을 때도 빈 파일 생성(업로드 실패 방지)
          touch _out_4u/run/summary.json _out_4u/run/preds_test.csv _out_4u/run/trades.csv

      - name: Upload artifacts (pinned)
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: _out_4u/run/*