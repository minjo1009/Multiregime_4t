name: Backtest

on:
  workflow_dispatch:
    inputs:
      TRADE_ZIP:
        description: 'Code zip at repo root'
        required: true
        default: 'trade_v1.0.7d_full.zip'
      DATA_ZIP:
        description: 'Data zip at repo root'
        required: true
        default: 'ETHUSDT_1min_2020_2025.zip'
      CSV_GLOB:
        description: 'CSV glob inside DATA_DIR'
        required: false
        default: '*ETHUSDT*1min*2020*2025*.csv'

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_DIR: _out_4u/run
      PYVER: '3.11'
      OMP_NUM_THREADS: 2
      OPENBLAS_NUM_THREADS: 2
      MKL_NUM_THREADS: 2
      NUMEXPR_NUM_THREADS: 2

    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@b4ffde65f46336ab0f6b50b3e0e66170ea7b5f59

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PYVER }}
          cache: pip

      - name: Prepare dirs & unzip
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"

          test -f "${{ github.event.inputs.TRADE_ZIP }}" || { echo "code zip not found"; exit 1; }
          unzip -q "${{ github.event.inputs.TRADE_ZIP }}" -d "${RUN_DIR}"

          if [ -f "${{ github.event.inputs.DATA_ZIP }}" ]; then
            unzip -q "${{ github.event.inputs.DATA_ZIP }}" -d "${DATA_DIR}" || true
          fi

          CSV=$(ls ${DATA_DIR}/${{ github.event.inputs.CSV_GLOB }} 2>/dev/null | head -n1 || true)
          if [ -z "$CSV" ]; then
            CSV=$(ls ${DATA_DIR}/*.csv 2>/dev/null | head -n1 || true)
          fi
          [ -n "$CSV" ] || { echo "No CSV found in ${DATA_DIR}"; exit 1; }
          echo "CSV_PATH=$CSV" >> "$GITHUB_ENV"
          echo "Using CSV_PATH=$CSV"

      - name: Install requirements
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python -V
          python -m pip install -U pip
          test -f requirements.txt || { echo "requirements.txt missing in $(pwd)"; ls -al; exit 1; }
          pip install -r requirements.txt

      - name: Sanity check (files)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          test -f run_4u.py || { echo "run_4u.py missing"; exit 1; }
          test -f conf/config.yml || { echo "conf/config.yml missing"; exit 1; }
          python - <<'PY'
          import yaml, json, numpy, pandas, sklearn
          print("deps OK:", "yaml json numpy pandas sklearn")
          PY

      # sklearn 1.4/1.5 호환 스모크 (임시 파일 방식)
      - name: sklearn smoke (1.4/1.5)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          cat > smoke.py <<'PY'
          import inspect, sklearn
          from sklearn.calibration import CalibratedClassifierCV as C
          params = set(getattr(inspect.signature(C), 'parameters', {}))
          print("sklearn", sklearn.__version__, "| C param:",
                "estimator" if "estimator" in params else
                ("base_estimator" if "base_estimator" in params else "unknown"))
          PY
          python smoke.py

      - name: Run backtest
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python run_4u.py --data_path "${CSV_PATH}" --out_dir "${{ env.OUT_DIR }}"
          echo "---- gating debug (head) ----"
          if [ -f "${{ env.OUT_DIR }}/gating_debug.json" ]; then
            head -n 60 "${{ env.OUT_DIR }}/gating_debug.json" || true
          else
            echo "{}" > "${{ env.OUT_DIR }}/gating_debug.json"
          fi
          ls -al "${{ env.OUT_DIR }}"

      - name: Upload artifacts (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/preds_test.csv
            ${{ env.OUT_DIR }}/trades.csv
          if-no-files-found: warn
          retention-days: 30