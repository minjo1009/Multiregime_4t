name: Backtest

on:
  workflow_dispatch:

env:
  REPO_DIR: repo
  TRADE_ZIP: trade_v1.0.5_full.zip        # 레포 루트에 둔 zip
  DATA_ZIP:  ETHUSDT_1min_2020_2025.zip   # 레포 루트에 둔 zip
  RUN_DIR:   tmp/trade
  DATA_DIR:  tmp/data
  OUT_DIR:   _out_4u/run
  CSV_PATH:  tmp/data/ETHUSDT_1min_2020_2025.csv

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    steps:
      # ---- Checkout (no action; 보안정책 회피) ----
      - name: Checkout repository (git)
        shell: bash
        run: |
          set -euo pipefail
          git init "${REPO_DIR}"
          cd "${REPO_DIR}"
          git remote add origin "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git"
          git -c protocol.version=2 fetch --depth=1 origin "${GITHUB_SHA}"
          git checkout --force FETCH_HEAD
          ls -al

      # ---- Prepare & unzip ----
      - name: Prepare workspace
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"
          test -f "${REPO_DIR}/${TRADE_ZIP}" || { echo "❌ trade zip not found: ${TRADE_ZIP}"; exit 1; }
          test -f "${REPO_DIR}/${DATA_ZIP}"  || { echo "❌ data zip not found:  ${DATA_ZIP}";  exit 1; }
          unzip -q "${REPO_DIR}/${TRADE_ZIP}" -d "${RUN_DIR}"
          unzip -q "${REPO_DIR}/${DATA_ZIP}"  -d "${DATA_DIR}"

      # ---- Python deps (시스템 Python 사용; 액션 미사용) ----
      - name: Install requirements
        working-directory: ${{ env.RUN_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          python3 -V
          python3 -m pip install -U pip
          python3 -m pip install -r requirements.txt
          # sklearn 호환 스모크
          python3 - <<'PY'
from sklearn.calibration import CalibratedClassifierCV as C
from sklearn.linear_model import LogisticRegression as L
try:
    C(estimator=L()); print("OK: estimator (>=1.5 계열)")
except TypeError:
    C(base_estimator=L()); print("OK: base_estimator (<=1.4 계열)")
PY

      # ---- Fingerprint: v1.0.4(레거시) + v1.0.5(신규) 겸용 ----
      - name: Fingerprint check (v1.0.4 + v1.0.5)
        shell: bash
        run: |
          set -euo pipefail
          f="${RUN_DIR}/backtest/runner.py"
          if grep -Eq "Coverage-aligned gating" "$f"; then
            echo "OK: legacy marker found"
          elif grep -Eq "rank_session_regime" "$f" && grep -Eq "S1 .*floor" "$f"; then
            echo "OK: v1.0.5 markers found"
          else
            echo "✖ missing: Coverage-aligned gating (legacy) / rank_session_regime + S1 floor (v1.0.5)"
            sed -n '1,140p' "$f" || true
            exit 1
          fi

      # ---- Preflight CSV ----
      - name: Preflight CSV
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "${CSV_PATH}" ]; then
            echo "CSV_PATH not found -> re-detecting…"
            cand=$(find "${DATA_DIR}" -type f \
                     -iname "*ETHUSDT*1min*2020*2025*.csv" -o \
                     -iname "*ETHUSDT*1m*2020*2025*.csv"  -o \
                     -iname "*.csv" | head -n1 || true)
            [ -n "$cand" ] || { echo "❌ No CSV found in ${DATA_DIR}"; exit 1; }
            echo "Detected: $cand"
            echo "CSV_PATH=$cand" >> "$GITHUB_ENV"
          else
            echo "CSV_PATH=${CSV_PATH}" >> "$GITHUB_ENV"
          fi
          python3 - <<'PY'
import os, sys, pandas as pd
csv = os.environ['CSV_PATH']
need = {'open_time','open','high','low','close','volume','number_of_trades'}
df = pd.read_csv(csv, nrows=2)
cols = set(df.columns)
miss = need - cols
if miss:
    print("✖ Missing base columns:", miss); sys.exit(1)
if 'taker_buy_base_asset_volume' in cols:
    print("✅ taker_buy_base_asset_volume present")
elif 'taker_buy_quote_asset_volume' in cols:
    print("ℹ️ Only quote volume present -> loader will synthesize base volume")
else:
    print("ℹ️ No taker_buy_* columns -> loader will synthesize if possible")
print("✅ CSV OK")
PY

      # ---- Run backtest ----
      - name: Run backtest
        working-directory: ${{ env.RUN_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          CSV="${CSV_PATH}"
          if [ ! -f "${CSV}" ]; then
            CSV=$(echo "${{ env.CSV_PATH }}")
          fi
          echo "Using CSV_PATH=${CSV}"
          python3 run_4u.py --data_path "${CSV}" --out_dir "${GITHUB_WORKSPACE}/${OUT_DIR}" --config "conf/config.yml"
          echo "---- gating debug ----"
          cat "${GITHUB_WORKSPACE}/${OUT_DIR}/gating_debug.json" || true
          ls -al "${GITHUB_WORKSPACE}/${OUT_DIR}"

      # ---- Upload artifacts (pinned SHA) ----
      - name: Upload artifacts (pinned SHA)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: |
            _out_4u/run/summary.json
            _out_4u/run/gating_debug.json
            _out_4u/run/trades.csv
            _out_4u/run/preds_test.csv
            _out_4u/run/charts/
          if-no-files-found: error
          retention-days: 30
