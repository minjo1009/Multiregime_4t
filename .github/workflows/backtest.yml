name: Backtest (safe)

on:
  workflow_dispatch:
    inputs:
      TRADE_ZIP:
        description: "Code zip at repo root (optional)"
        required: false
        default: "trade_v1.0.7.zip"
      DATA_ZIP:
        description: "Data zip at repo root (optional)"
        required: false
        default: "ETHUSDT_1min_2020_2025.zip"
      CSV_GLOB:
        description: "CSV glob inside data zip (optional; recursive)"
        required: false
        default: "*ETHUSDT*1min*2020*2025*.csv"
      PYVER:
        description: "Python version"
        required: false
        default: "3.11"

permissions:
  contents: read

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_DIR: _out_4u/run
      OMP_NUM_THREADS: 2
      OPENBLAS_NUM_THREADS: 2
      MKL_NUM_THREADS: 2
      NUMEXPR_NUM_THREADS: 2

    steps:
      # ----- 必須: 리포 체크아웃 (핀고정 SHA) -----
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab0f6b50b3e0e66170ea7b5f59

      # ----- Python 세팅 (핀고정 SHA) -----
      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ github.event.inputs.PYVER || '3.11' }}
          cache: pip
          update-environment: true

      # ----- 작업 디렉터리 준비 + zip 존재 확인 -----
      - name: Prepare workspace
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"
          # 입력값(있으면) 우선, 없으면 기본값
          TRADE_ZIP="${{ github.event.inputs.TRADE_ZIP || 'trade_v1.0.7.zip' }}"
          DATA_ZIP="${{ github.event.inputs.DATA_ZIP  || 'ETHUSDT_1min_2020_2025.zip' }}"
          test -f "${TRADE_ZIP}" || { echo "❌ code zip not found: ${TRADE_ZIP}"; exit 1; }
          test -f "${DATA_ZIP}"  || { echo "❌ data zip not found: ${DATA_ZIP}";  exit 1; }

          echo "✓ Found zips:"
          ls -al "${TRADE_ZIP}" "${DATA_ZIP}"

          # 풀기
          unzip -q "${TRADE_ZIP}" -d "${RUN_DIR}"
          unzip -q "${DATA_ZIP}"  -d "${DATA_DIR}"

          echo "—— code tree ——";  ls -al "${RUN_DIR}" | sed -n '1,120p'
          echo "—— data tree ——";  find "${DATA_DIR}" -maxdepth 2 -type f | sed -n '1,120p'

      # ----- CSV 자동 탐지(재귀) + 절대경로 export -----
      - name: Detect CSV & export CSV_PATH
        id: detect_csv
        shell: bash
        run: |
          set -euo pipefail
          CSV_GLOB_IN="${{ github.event.inputs.CSV_GLOB || '*ETHUSDT*1min*2020*2025*.csv' }}"

          PY='import os,glob,sys
base=os.environ["DATA_DIR"]
pat=os.environ["CSV_GLOB_IN"]
c=glob.glob(os.path.join(base,"**",pat), recursive=True)
if not c:
  c=glob.glob(os.path.join(base,"**","*.csv"), recursive=True)
if not c:
  print("❌ No CSV found under", base); sys.exit(1)
print(os.path.abspath(c[0]))'
          CSV_PATH="$(python3 - <<'PY'
${PY}
PY
)"
          echo "CSV_PATH=${CSV_PATH}" | tee -a "$GITHUB_ENV"
          echo "✓ Using CSV_PATH=${CSV_PATH}"

      # ----- Preflight: 필수 컬럼 점검 + 빠른 실패 메시지 -----
      - name: Preflight CSV
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
import os, sys, pandas as pd
p = os.environ.get("CSV_PATH")
if not p or not os.path.exists(p):
  print("❌ CSV_PATH missing or not exists:", p); sys.exit(1)
df = pd.read_csv(p, nrows=2)
need = {'open_time','open','high','low','close','volume'}
miss = need - set(df.columns)
if miss:
  print("❌ Missing base columns:", sorted(miss)); sys.exit(1)
print("✅ Columns OK:", sorted(df.columns))
PY

      # ----- 의존성 설치 (requirements.txt 있으면 사용, 없으면 기본) -----
      - name: Install Python deps
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python3 -m pip -q install -U pip
          if [ -f requirements.txt ]; then
            python3 -m pip -q install -r requirements.txt
          else
            python3 -m pip -q install pandas numpy scikit-learn pyyaml
          fi
          python3 - <<'PY'
import sklearn, sys
print("sklearn", sklearn.__version__, "| python", sys.version.split()[0])
PY

      # ----- 백테스트 실행 -----
      - name: Run backtest
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        env:
          CSV_PATH: ${{ env.CSV_PATH }}
          OUT_DIR:  ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          python3 run_4u.py --data_path "${CSV_PATH}" --out_dir "${OUT_DIR}"
          echo "—— gating debug (head) ——"
          if [ -f "${OUT_DIR}/gating_debug.json" ]; then head -n 60 "${OUT_DIR}/gating_debug.json"; else echo "{}"; fi
          echo "—— out dir ——"
          ls -al "${OUT_DIR}"

      # ----- 아티팩트 업로드 (핀고정 SHA) -----
      - name: Upload artifacts (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/preds_test.csv
            ${{ env.OUT_DIR }}/trades.csv
          if-no-files-found: warn
          retention-days: 30