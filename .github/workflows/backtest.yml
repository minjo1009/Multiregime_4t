name: backtest (strict v1.1.7, path-or-url only)
on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Code zip (repo path OR https URL)
        required: true
        default: trade_v1.1.7.zip
      DATA_ZIP:
        description: Data zip (repo path OR https URL)
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_GLOB:
        description: CSV file name (exact or glob)
        required: true
        default: ETHUSDT_1min_2020_2025.csv

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_DIR: _out_4u/run
      PYVER: '3.11'

    steps:
      - name: Validate pinned SHAs
        shell: bash
        run: |
          set -euo pipefail
          curl -sSfL -I https://api.github.com/repos/actions/checkout/tarball/08c6903cd8c0fde910a37f88322edcfb5dd907a8 >/dev/null
          curl -sSfL -I https://api.github.com/repos/actions/setup-python/tarball/a26af69be951a213d495a4c3e4e4022e16d87065 >/dev/null
          curl -sSfL -I https://api.github.com/repos/actions/upload-artifact/tarball/ea165f8d65b6e75b540449e92b4886f43607fa02 >/dev/null
          echo "Pinned SHAs OK"

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      # ---- CODE_ZIP: repo path or URL only ----
      - name: Fetch code zip (path or URL)
        shell: bash
        env:
          INPUT_CODE_ZIP: ${{ github.event.inputs.CODE_ZIP }}
        run: |
          set -euo pipefail
          mkdir -p tmp/fetch
          TARGET="tmp/fetch/code.zip"
          if [[ "${INPUT_CODE_ZIP}" =~ ^https?:// ]]; then
            echo "[fetch] URL: ${INPUT_CODE_ZIP}"
            curl -sSfL -o "${TARGET}" "${INPUT_CODE_ZIP}"
          elif [[ -f "${GITHUB_WORKSPACE}/${INPUT_CODE_ZIP}" ]]; then
            echo "[fetch] repo file: ${INPUT_CODE_ZIP}"
            cp -f "${GITHUB_WORKSPACE}/${INPUT_CODE_ZIP}" "${TARGET}"
          else
            echo "::error::CODE_ZIP not found in repo and not a URL. Commit it to the repo or provide a URL."
            exit 66
          fi
          test -s "${TARGET}" || { echo "::error::empty code zip"; exit 66; }
          echo "CODE_ZIP_ABS=${GITHUB_WORKSPACE}/${TARGET}" >> "$GITHUB_ENV"

      # ---- DATA_ZIP: repo path or URL only ----
      - name: Fetch data zip (path or URL)
        shell: bash
        env:
          INPUT_DATA_ZIP: ${{ github.event.inputs.DATA_ZIP }}
        run: |
          set -euo pipefail
          mkdir -p tmp/fetch
          TARGET="tmp/fetch/data.zip"
          if [[ "${INPUT_DATA_ZIP}" =~ ^https?:// ]]; then
            echo "[fetch] URL: ${INPUT_DATA_ZIP}"
            curl -sSfL -o "${TARGET}" "${INPUT_DATA_ZIP}"
          elif [[ -f "${GITHUB_WORKSPACE}/${INPUT_DATA_ZIP}" ]]; then
            echo "[fetch] repo file: ${INPUT_DATA_ZIP}"
            cp -f "${GITHUB_WORKSPACE}/${INPUT_DATA_ZIP}" "${TARGET}"
          else
            echo "::error::DATA_ZIP not found in repo and not a URL. Commit it to the repo or provide a URL."
            exit 66
          fi
          test -s "${TARGET}" || { echo "::error::empty data zip"; exit 66; }
          echo "DATA_ZIP_ABS=${GITHUB_WORKSPACE}/${TARGET}" >> "$GITHUB_ENV"

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PYVER }}

      - name: Unpack code and data
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"
          unzip -q "${CODE_ZIP_ABS}" -d "${RUN_DIR}"
          unzip -q "${DATA_ZIP_ABS}" -d "${DATA_DIR}"
          echo "[debug] data listing:"
          find "${DATA_DIR}" -maxdepth 2 -type f -name "*.csv" -print || true

      - name: Install deps
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy scikit-learn pyyaml
          fi

      - name: Detect CSV and preflight (ABS)
        shell: bash
        run: |
          set -euo pipefail
          FOUND="$(find "${{ env.DATA_DIR }}" -type f -name "${{ github.event.inputs.CSV_GLOB }}" | head -n 1 || true)"
          if [ -z "$FOUND" ]; then
            echo "::error::CSV not found: ${{ github.event.inputs.CSV_GLOB }}"
            exit 64
          fi
          CSV_ABS="${GITHUB_WORKSPACE}/${FOUND}"
          echo "CSV_PATH=${CSV_ABS}" >> "$GITHUB_ENV"
          echo "[debug] CSV_PATH=$CSV_ABS"
          python "${{ env.RUN_DIR }}/scripts/preflight_strict.py" "$CSV_ABS"

      - name: Run backtest (unified entry)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          export PYTHONPATH="${PWD}"
          python run_4u.py --data_path "${{ env.CSV_PATH }}" --out_dir "${{ github.workspace }}/${{ env.OUT_DIR }}"
          ls -l "${{ github.workspace }}/${{ env.OUT_DIR }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/preds_test.csv
            ${{ env.OUT_DIR }}/trades.csv
            ${{ env.OUT_DIR }}/preflight.json