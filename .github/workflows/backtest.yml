name: Backtest v1.0.8 (Checklist2.2)

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Code ZIP path (repo-relative or URL)
        required: true
        default: trade_v1.0.8.zip
      DATA_ZIP:
        description: Data ZIP path (repo-relative or URL)
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_GLOB:
        description: Glob for CSV inside data zip
        required: true
        default: "**/*ETHUSDT*1min*2020*2025*.csv"

jobs:
  backtest:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
    steps:
      - name: Validate pinned SHAs (Checklist2.2)
        run: |
          set -euo pipefail
          verify() {
            repo="$1"; sha="$2"
            [[ "$sha" =~ ^[0-9a-f]{40}$ ]] || { echo "::error title=PinFormat::${repo}@${sha} not 40-hex"; exit 1; }
            url="https://codeload.github.com/${repo}/legacy.tar.gz/${sha}"
            code=$(curl -s -o /dev/null -w "%{http_code}" -I "$url" || true)
            [ "$code" = "200" ] || { echo "::error title=PinUnavailable::${repo}@${sha} codeload=$code"; exit 1; }
          }
          verify actions/checkout 11bd71901bbe5b1630ceea73d27597364c9af683
          verify actions/setup-python a26af69be951a213d495a4c3e4e4022e16d87065
          verify actions/upload-artifact ea165f8d65b6e75b540449e92b4886f43607fa02

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Python 3.11
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.11'

      - name: Prepare OS deps
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -yq --no-install-recommends unzip tzdata
          sudo ln -fs /usr/share/zoneinfo/Asia/Seoul /etc/localtime
          sudo dpkg-reconfigure -f noninteractive tzdata

      - name: Reset workspace folders (clean + precreate logs)
        run: |
          set -euo pipefail
          rm -rf tmp/trade tmp/data tmp/trade_raw _out_4u scripts
          mkdir -p tmp/trade tmp/data tmp/trade_raw _out_4u/run _out_4u/logs scripts
          : > _out_4u/logs/stdout.log

      - name: Bring zips
        run: |
          set -euo pipefail
          CODE_ZIP="${{ github.event.inputs.CODE_ZIP }}"
          DATA_ZIP="${{ github.event.inputs.DATA_ZIP }}"
          fetch() { src="$1"; dst="$2"; [[ "$src" =~ ^https?:// ]] && curl -L "$src" -o "$dst" || cp -f "$src" "$dst"; }
          fetch "$CODE_ZIP" tmp/code.zip
          fetch "$DATA_ZIP" tmp/data.zip
          ls -l tmp/*.zip

      - name: Inspect code.zip for duplicates (warn-only)
        run: |
          set -euo pipefail
          dups=$(unzip -Z1 tmp/code.zip | sort | uniq -d || true)
          if [ -n "$dups" ]; then
            echo "::warning title=ZipDuplicate::Duplicate paths detected in code.zip"
            printf '%s\n' "$dups"
          fi

      - name: Unzip packs (non-interactive, flatten) + sample csv list
        run: |
          set -euo pipefail
          unzip -oq tmp/code.zip -d tmp/trade_raw
          shopt -s nullglob dotglob
          if [ "$(find tmp/trade_raw -mindepth 1 -maxdepth 1 -type d | wc -l)" -eq 1 ] && \
             [ "$(find tmp/trade_raw -mindepth 1 -maxdepth 1 -type f | wc -l)" -eq 0 ]; then
            mv tmp/trade_raw/*/* tmp/trade/ 2>/dev/null || mv tmp/trade_raw/* tmp/trade/
          else
            mv tmp/trade_raw/* tmp/trade/ 2>/dev/null || true
          fi
          unzip -oq tmp/data.zip -d tmp/data
          echo "Code tree:"; find tmp/trade -maxdepth 2 -type d -print
          echo "CSV sample (max 10):"; find tmp/data -type f -name "*.csv" | head -n 10 || true

      - name: Sanitize stdlib shadows (importlib/typing/enum/dataclasses)
        run: |
          set -euo pipefail
          cd tmp/trade
          for f in importlib.py typing.py enum.py dataclasses.py; do
            if [ -f "$f" ]; then
              mv "$f" "${f}.shadowed"
              echo "::warning::Shadowed stdlib detected and renamed: $f -> ${f}.shadowed"
            fi
          done

      - name: Python deps (with fallback)
        working-directory: tmp/trade
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install --no-cache-dir -r requirements.txt || true; fi
          pip install --no-cache-dir numpy pandas pyyaml scikit-learn jsonschema || true

      # ---------- Writers ----------
      - name: Write preflight_csv.py (ABS path writer)
        run: |
          set -euo pipefail
          cat <<'PY_A' > scripts/preflight_csv.py
          #!/usr/bin/env python3
          import sys, json, os, glob, pandas as pd, pathlib
          root = sys.argv[1] if len(sys.argv)>1 else "tmp/data"
          csv_glob = os.environ.get("CSV_GLOB","**/*.csv")
          matches = sorted(glob.glob(os.path.join(root, csv_glob), recursive=True))
          if not matches:
              matches = sorted(glob.glob(os.path.join(root, "**/*.csv"), recursive=True))
          out = {"glob": csv_glob, "found": matches[:10]}
          if not matches:
              print(json.dumps(out, ensure_ascii=True)); sys.exit(0)
          path = pathlib.Path(matches[0]).resolve().as_posix()
          try:
              pd.read_csv(path, nrows=2)
              out["sample_path"]=path
          except Exception as e:
              out["error"]=str(e); out["sample_path"]=path
          print(json.dumps(out, ensure_ascii=True))
          with open("CSV_PATH.txt","w", encoding="utf-8") as f: f.write(path)
          PY_A
          chmod +x scripts/preflight_csv.py

      - name: Write make_empty_artifacts.py (dual gating_debug + logs)
        run: |
          set -euo pipefail
          cat <<'PY_B' > scripts/make_empty_artifacts.py
          #!/usr/bin/env python3
          import pathlib
          base = pathlib.Path("_out_4u/run"); base.mkdir(parents=True, exist_ok=True)
          (base/"gating_debug.json").write_text("{}", encoding="utf-8")
          root = pathlib.Path("_out_4u"); root.mkdir(parents=True, exist_ok=True)
          (root/"gating_debug.json").write_text("{}", encoding="utf-8")
          (root/"summary.json").write_text("{}", encoding="utf-8")
          (root/"preds_test.csv").write_text("", encoding="utf-8")
          (root/"trades.csv").write_text("", encoding="utf-8")
          (root/"logs").mkdir(parents=True, exist_ok=True)
          (root/"logs/stdout.log").write_text("", encoding="utf-8")
          print("Empty artifacts created")
          PY_B
          chmod +x scripts/make_empty_artifacts.py

      - name: Write entrypoint_run.sh (robust CSV resolve + --data_path first)
        run: |
          set -euo pipefail
          cat <<'SH_A' > scripts/entrypoint_run.sh
          #!/usr/bin/env bash
          set -Eeuo pipefail
          ROOT="$GITHUB_WORKSPACE/tmp/trade"
          LOG="$GITHUB_WORKSPACE/_out_4u/logs/stdout.log"
          cd "$GITHUB_WORKSPACE"
          trap 'echo "::group::tail stdout.log"; tail -n 200 "$LOG" 2>/dev/null || true; echo "::endgroup::"' EXIT

          # 1) Read candidate from preflight (strip) â€” may be empty or whitespace-only
          RAW="$(cat scripts/CSV_PATH.txt 2>/dev/null || true)"
          CAND="$(python - <<'PY'
          import sys; print(sys.stdin.read().strip())
          PY
          <<<"$RAW")"

          # 2) If candidate is relative, make absolute; if not a *file*, search tmp/data
          canon() {
            python - <<'PY'
import os, sys, glob
ws = os.environ.get("GITHUB_WORKSPACE")
cand = os.environ.get("CAND","").strip()
def abs1(p): return os.path.abspath(p) if p else ""
p = abs1(cand if os.path.isabs(cand) else os.path.join(ws, cand))
if p and os.path.isfile(p):
    print(p); raise SystemExit
# search under tmp/data
for f in glob.glob(os.path.join(ws, "tmp", "data", "**", "*.csv"), recursive=True):
    print(os.path.abspath(f)); raise SystemExit
print("")  # not found
PY
          }
          export CAND="$CAND"
          CSV_PATH="$(canon)"

          # 3) Final guard: must be a real file
          if [ -z "${CSV_PATH:-}" ] || [ ! -f "$CSV_PATH" ]; then
            echo "::error::No CSV found under tmp/data (got: '${CAND:-<empty>}')" | tee -a "$LOG"
            python -u "$GITHUB_WORKSPACE/scripts/make_empty_artifacts.py" | tee -a "$LOG"
            exit 0
          fi
          echo "Using CSV: $CSV_PATH (exists=$( [ -f "$CSV_PATH" ] && echo yes || echo no ))" | tee -a "$LOG"

          # Safe PYTHONPATH under set -u
          export PYTHONPATH="${ROOT}:${ROOT}/backtest:${PYTHONPATH:-}"

          mkdir -p "_out_4u/run" "_out_4u/logs"
          cd "$ROOT"
          CFG="conf/config.yml"

          py() { python -X faulthandler -u "$@"; }
          try() { echo "+ $*" | tee -a "$LOG"; ( "$@" ) >>"$LOG" 2>&1; return ${PIPESTATUS[0]}; }

          # ---- prefer --data_path first (project signature) ----
          try py run_4u.py --data_path "$CSV_PATH" --config "$CFG" && exit 0
          try py run_4u.py --data "$CSV_PATH" --config "$CFG" && exit 0
          try py run_4u.py "$CSV_PATH" && exit 0
          if [ -f "backtest/run_4u.py" ]; then
            try py backtest/run_4u.py --data_path "$CSV_PATH" --config "$CFG" && exit 0
            try py backtest/run_4u.py --data "$CSV_PATH" --config "$CFG" && exit 0
          fi
          try py -m backtest.runner --data "$CSV_PATH" --config "$CFG" && exit 0 || true

          echo "::warning::Entrypoint attempts failed; writing empty artifacts" | tee -a "$LOG"
          py "$GITHUB_WORKSPACE/scripts/make_empty_artifacts.py" | tee -a "$LOG"
          exit 0
          SH_A
          chmod +x scripts/entrypoint_run.sh

      - name: Write shim source (standalone file)
        run: |
          set -euo pipefail
          cat <<'PY_SHIM' > scripts/run_4u_shim.py
          import os, sys
          def main():
              csv = os.environ.get("CSV_PATH") or (sys.argv[1] if len(sys.argv)>1 else None)
              cfg = "conf/config.yml"
              if not csv:
                  print("[shim] CSV_PATH not provided"); return 3
              try:
                  from backtest.runner import run_backtest
              except Exception as e:
                  print(f"[shim] runner import failed: {e}"); return 2
              try:
                  _ = run_backtest(data_path=csv, config_path=cfg)
              except TypeError:
                  try:
                      _ = run_backtest(csv, cfg)
                  except Exception as e:
                      print(f"[shim] run_backtest failed: {e}"); return 4
              return 0
          if __name__ == "__main__":
              sys.exit(main())
          PY_SHIM
          chmod +x scripts/run_4u_shim.py

      - name: Write calibration shim injector
        run: |
          set -euo pipefail
          cat <<'PY_CAL' > scripts/ensure_calibrator.py
          import sys, re, pathlib
          root = pathlib.Path("tmp/trade/trend4p")
          f = root / "calibration.py"
          if not f.exists():
              sys.exit(0)
          code = f.read_text(encoding="utf-8")
          if re.search(r'\bclass\s+Calibrator\b', code):
              print("Calibrator already exists"); sys.exit(0)
          append = r'''
          # --- Injected Calibrator shim (Checklist2.2) ---
          try:
              import numpy as np
              from sklearn.isotonic import IsotonicRegression
          except Exception:
              class _Identity:
                  def fit(self, *a, **k): return self
                  def transform(self, x): return x
              IsotonicRegression = _Identity
          import numpy as _np
          class Calibrator:
              def __init__(self, method="isotonic", by_session=False, **kwargs):
                  self.method = method; self.by_session = by_session; self.kwargs = kwargs; self._models = {}
              def _fit_one(self, y, p):
                  y = _np.asarray(y).astype(float); p = _np.asarray(p).astype(float)
                  p = _np.clip(p, 1e-6, 1-1e-6)
                  try:
                      ir = IsotonicRegression(out_of_bounds="clip"); ir.fit(p, y); return ir
                  except Exception:
                      return None
              def fit(self, y=None, p=None, **kwargs):
                  if y is None and p is None and "proba" in kwargs and "target" in kwargs: p, y = kwargs["proba"], kwargs["target"]
                  if y is not None and p is None and isinstance(y, (tuple, list)) and len(y)==2: p, y = y
                  if p is not None and y is None and isinstance(p, (tuple, list)) and len(p)==2: y, p = p
                  self._models["global"] = self._fit_one(y, p); return self
              def transform(self, p):
                  m = self._models.get("global"); 
                  if m is None: return p
                  p = _np.asarray(p).astype(float)
                  try: return _np.clip(m.transform(p), 1e-6, 1-1e-6)
                  except Exception: return p
              def __call__(self, p): return self.transform(p)
              def fit_transform(self, y, p, **kwargs): return self.fit(y=y, p=p, **kwargs).transform(p)
          # --- End shim ---
          '''
          f.write_text(code + "\n" + append, encoding="utf-8")
          print("Injected Calibrator shim into trend4p/calibration.py")
          PY_CAL
          chmod +x scripts/ensure_calibrator.py

      - name: Patch calibration if needed
        run: |
          set -euo pipefail
          python -u scripts/ensure_calibrator.py

      - name: Install shim if missing (non-destructive)
        run: |
          set -euo pipefail
          if [ ! -f tmp/trade/run_4u.py ]; then
            mkdir -p tmp/trade
            cp -f scripts/run_4u_shim.py tmp/trade/run_4u.py
            chmod +x tmp/trade/run_4u.py
            echo "Shim installed: tmp/trade/run_4u.py"
          else
            echo "Original run_4u.py present; shim not installed."
          fi

      - name: Preflight data (warn-only)
        env:
          CSV_GLOB: ${{ github.event.inputs.CSV_GLOB }}
        run: |
          set -euo pipefail
          python -u scripts/preflight_csv.py tmp/data | tee preflight.json || true
          [ -f CSV_PATH.txt ] && mv CSV_PATH.txt scripts/CSV_PATH.txt || true
          echo "Preflight path:"; cat scripts/CSV_PATH.txt || true
          echo "Exists?"; [ -f "$(cat scripts/CSV_PATH.txt 2>/dev/null)" ] && echo yes || echo no

      - name: Verify runner & calibrator before run
        run: |
          set -euo pipefail
          export PYTHONPATH="tmp/trade:tmp/trade/backtest:${PYTHONPATH:-}"
          python - <<'PY'
          import sys, os
          p = open("scripts/CSV_PATH.txt").read().strip() if os.path.exists("scripts/CSV_PATH.txt") else ""
          print("CSV_PATH(pre-run):", p, "exists=", os.path.isfile(p))
          try:
              from trend4p.calibration import Calibrator
          except Exception as e:
              print("!! Calibrator import failed:", e); sys.exit(2)
          try:
              from backtest.runner import run_backtest
          except Exception as e:
              print("!! backtest.runner import failed:", e); sys.exit(3)
          print("OK: Calibrator & run_backtest ready")
          PY

      - name: Run backtest
        run: |
          set -euo pipefail
          python -u scripts/make_empty_artifacts.py
          bash scripts/entrypoint_run.sh
          [ -f _out_4u/run/gating_debug.json ] && cp -f _out_4u/run/gating_debug.json _out_4u/gating_debug.json || true
          echo "Artifacts directory:"; ls -al _out_4u || true; ls -al _out_4u/run || true

      - name: Sweep for outputs (if code saved elsewhere)
        run: |
          set -euo pipefail
          for name in summary.json preds_test.csv trades.csv gating_debug.json metrics.json; do
            f=$(find tmp/trade -maxdepth 6 -type f -name "$name" | head -n1 || true)
            if [ -n "$f" ]; then
              cp -f "$f" "_out_4u/$name" || true
              echo "collected $name from $f"
            fi
          done

      - name: Post-run sanity (warn if empty)
        run: |
          set -euo pipefail
          python - <<'PY'
          import os
          paths = [
              "_out_4u/summary.json",
              "_out_4u/preds_test.csv",
              "_out_4u/trades.csv",
              "_out_4u/gating_debug.json",
              "_out_4u/run/gating_debug.json",
              "_out_4u/logs/stdout.log",
          ]
          for p in paths:
              if not os.path.exists(p):
                  print(f"::warning::missing {p}")
                  continue
              sz = os.path.getsize(p)
              if sz <= 2 and not p.endswith(".log"):
                  print(f"::warning::empty artifact: {p} ({sz} bytes)")
          PY

      - name: Upload artifacts (entire folder)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest_v1.0.8_outputs
          path: _out_4u/**
          if-no-files-found: warn