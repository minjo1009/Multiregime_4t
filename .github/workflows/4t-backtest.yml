name: 4u Backtest (pure bash)

on:
  workflow_dispatch:
    inputs:
      run_args:
        description: '추가 실행 인수 (예: --start 2024-01-01 --end 2025-01-01)'
        required: false
        default: ''
      results_branch:
        description: '결과 커밋 브랜치'
        required: false
        default: 'backtest-results'
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  backtest:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      SRC_DIR: ${{ github.workspace }}/src
      DATA_DIR: ${{ github.workspace }}/data
      OUT_DIR:  ${{ github.workspace }}/_out
      LOG_DIR:  ${{ github.workspace }}/_logs
      RESULTS_BRANCH: ${{ inputs.results_branch }}
    steps:
      - name: Checkout (no external action)
        shell: bash
        env:
          REPO:  ${{ github.repository }}
          SHA:   ${{ github.sha }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -Eeuo pipefail
          mkdir -p "$LOG_DIR"
          echo "Repo: $REPO" | tee -a "$LOG_DIR/context.txt"
          echo "SHA : $SHA"  | tee -a "$LOG_DIR/context.txt"
          echo "TZ  : $TZ"   | tee -a "$LOG_DIR/context.txt"

          git init
          git remote add origin "https://x-access-token:${TOKEN}@github.com/${REPO}.git"
          git -c protocol.version=2 fetch --depth=1 origin "$SHA"
          git checkout --force FETCH_HEAD

      - name: Prepare folders
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "$SRC_DIR" "$DATA_DIR" "$OUT_DIR" "$LOG_DIR"
          ls -la | tee -a "$LOG_DIR/steps.txt"

      - name: Unpack code (trend4u.zip) → src/
        shell: bash
        run: |
          set -Eeuo pipefail
          if [[ -f trend4u.zip ]]; then
            echo "Using trend4u.zip" | tee -a "$LOG_DIR/steps.txt"
            rm -rf _code_tmp && mkdir -p _code_tmp
            unzip -q trend4u.zip -d _code_tmp
            if   [[ -d _code_tmp/trend4u ]]; then
              rsync -a _code_tmp/trend4u/ "$SRC_DIR"/trend4u/
            elif [[ -d _code_tmp/src ]]; then
              rsync -a _code_tmp/src/ "$SRC_DIR"/
            else
              rsync -a _code_tmp/ "$SRC_DIR"/
            fi
            rm -rf _code_tmp
          elif [[ -d src ]]; then
            rsync -a src/ "$SRC_DIR"/
          elif [[ -d trend4u ]]; then
            rsync -a trend4u/ "$SRC_DIR"/trend4u/
          else
            echo "::error::trend4u.zip, src/, trend4u/ 중 아무것도 없음"; exit 1
          fi

          # trend4p/__init__.py 과거 문법오류 안전패치 (코드 내용은 보존)
          INIT="$SRC_DIR/trend4u/trend4p/__init__.py"
          if [[ -f "$INIT" ]]; then
            sed -i '1s/^[[:space:]]*\.[[:space:]]*__all__/__all__/' "$INIT" || true
            grep -q "__all__" "$INIT" || printf "__all__=['data_utils','features_4u','labeling','model_4u','execution_4u','selector_4u']\n" >> "$INIT"
          fi

          echo "[src tree]"
          (cd "$SRC_DIR" && find . -maxdepth 3 -type d -print | sort) | tee -a "$LOG_DIR/src_tree.txt"

      # ★ 여기서부터 모듈 경로 오버라이드(코드팩 미수정)
      - name: Make trend4p importable (no code change)
        shell: bash
        run: |
          set -Eeuo pipefail
          # 1) PYTHONPATH에 src와 src/trend4u 모두 추가
          echo "PYTHONPATH=$SRC_DIR:$SRC_DIR/trend4u" >> "$GITHUB_ENV"
          echo "Added to PYTHONPATH: $SRC_DIR and $SRC_DIR/trend4u" | tee -a "$LOG_DIR/steps.txt"

          # 2) 안전빵: src/trend4p 심볼릭 링크(이미 존재해도 OK)
          if [[ -d "$SRC_DIR/trend4u/trend4p" && ! -e "$SRC_DIR/trend4p" ]]; then
            ln -s "$SRC_DIR/trend4u/trend4p" "$SRC_DIR/trend4p"
            echo "symlink created: $SRC_DIR/trend4p -> trend4u/trend4p" | tee -a "$LOG_DIR/steps.txt"
          fi

      - name: Prepare data (ETHUSDT_1min_2020_2025.zip or CSV)
        shell: bash
        run: |
          set -Eeuo pipefail
          if [[ -f ETHUSDT_1min_2020_2025.zip ]]; then
            unzip -q ETHUSDT_1min_2020_2025.zip -d "$DATA_DIR"
          else
            shopt -s nullglob
            CSV=(ETHUSDT_1min_2020_2025.csv *.csv)
            if [[ ${#CSV[@]} -gt 0 ]]; then
              mkdir -p "$DATA_DIR"; cp -f "${CSV[@]}" "$DATA_DIR"/
            else
              echo "::warning::데이터 ZIP/CSV 없음"
            fi
          fi
          (cd "$DATA_DIR" && ls -la || true) | tee -a "$LOG_DIR/steps.txt"
          head -n 5 "$(find "$DATA_DIR" -type f -name '*.csv' | head -n1)" 2>/dev/null | tee "$LOG_DIR/sample_data_head.txt" || true

      - name: Install deps (python3 -m pip)
        shell: bash
        run: |
          set -Eeuo pipefail
          python3 --version | tee -a "$LOG_DIR/versions.txt"
          if   [[ -f requirements.txt ]]; then
            python3 -m pip install --upgrade pip && python3 -m pip install -r requirements.txt
          elif [[ -f "$SRC_DIR/requirements.txt" ]]; then
            python3 -m pip install --upgrade pip && python3 -m pip install -r "$SRC_DIR/requirements.txt"
          elif [[ -f pyproject.toml ]]; then
            python3 -m pip install --upgrade pip && python3 -m pip install .
          else
            python3 -m pip install --upgrade pip && python3 -m pip install numpy pandas matplotlib ta scikit-learn python-dateutil pytz
          fi

      # ★ 프리플라이트: 실제 실행 전 import 검사로 'trend4p' 문제 즉시 잡기
      - name: Preflight import check
        shell: bash
        run: |
          set -Eeuo pipefail
          python3 - <<'PY'
import os, sys
print("PYTHONPATH:", os.environ.get("PYTHONPATH"))
# 둘 다 가능해야 함: trend4p, trend4u.run_4u
try:
    import trend4p
    print("OK import trend4p from:", getattr(trend4p, "__file__", "n/a"))
except Exception as e:
    print("FAIL import trend4p:", repr(e)); raise
try:
    import trend4u.run_4u as R
    print("OK import trend4u.run_4u from:", getattr(R, "__file__", "n/a"))
except Exception as e:
    print("WARN import trend4u.run_4u:", repr(e))
PY

      - name: Run backtest
        shell: bash
        env:
          DATA_DIR: ${{ github.workspace }}/data
          OUT_DIR:  ${{ github.workspace }}/_out
        run: |
          set -Eeuo pipefail
          # 위 단계에서 GITHUB_ENV에 저장한 PYTHONPATH 적용됨
          echo "PYTHONPATH=$PYTHONPATH" | tee -a "$LOG_DIR/steps.txt"
          set +e
          python3 -m trend4u.run_4u ${{ inputs.run_args }} 2>&1 | tee "$LOG_DIR/backtest_stdout.txt"
          rc=${PIPESTATUS[0]}
          set -e
          echo "exit_code=$rc" | tee -a "$LOG_DIR/steps.txt"
          echo "$rc" > "$LOG_DIR/exit_code.txt"

      - name: Collect artifacts → _out/
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "$OUT_DIR"
          find "$GITHUB_WORKSPACE" -maxdepth 3 -type f \( -name 'train_test_summary.json' -o -name 'backtest_summary.json' -o -name 'equity_curve*.csv' -o -name 'trades*.csv' -o -name 'report*.html' -o -name 'fig_*.png' \) -print0 | while IFS= read -r -d '' p; do cp "$p" "$OUT_DIR"/ || true; done
          (cd "$OUT_DIR" && ls -la || true) | tee -a "$LOG_DIR/steps.txt"

      - name: Publish results to branch (no external action)
        if: always()
        shell: bash
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -Eeuo pipefail
          BR="$RESULTS_BRANCH"
          RUN_DIR="_runs/${GITHUB_RUN_ID}"
          TMP="$(mktemp -d)"
          mkdir -p "$TMP/${RUN_DIR}"
          rsync -a "$OUT_DIR"/ "$TMP/${RUN_DIR}/" || true
          rsync -a "$LOG_DIR"/ "$TMP/${RUN_DIR}/logs/" || true
          ( cd "$TMP"
            git init
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git remote add origin "https://x-access-token:${TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
            git fetch origin "$BR" || true
            git checkout -B "$BR"
            git add .
            git commit -m "Backtest run ${GITHUB_RUN_ID} (SHA ${GITHUB_SHA})" || true
            git push -f origin "$BR"
          )
          echo "pushed: $BR / $RUN_DIR" | tee -a "$LOG_DIR/steps.txt"

      - name: Job summary
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          {
            echo "## 4u Backtest — Summary"
            if [[ -f "$OUT_DIR/train_test_summary.json" ]]; then
              echo ""; echo '```json'; sed -n '1,200p' "$OUT_DIR/train_test_summary.json"; echo '```'
            else
              echo "- No train_test_summary.json generated."
            fi
            echo ""; echo "### Logs"
            echo "- **context.txt**";  echo '```'; sed -n '1,120p' "$LOG_DIR/context.txt" 2>/dev/null; echo '```'
            echo "- **exit_code**: $(cat "$LOG_DIR/exit_code.txt" 2>/dev/null || echo 'n/a')"
          } >> "$GITHUB_STEP_SUMMARY"