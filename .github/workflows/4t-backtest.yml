name: 4u Backtest (pure bash)

on:
  workflow_dispatch:
    inputs:
      code_zip:
        description: '코드 ZIP (기본: trend4u.zip)'
        required: false
      data_zip:
        description: '데이터 ZIP (기본: ETHUSDT_1min_2020_2025.zip)'
        required: false
  push:
    paths:
      - 'trend4u.zip'
      - 'ETHUSDT_1min_2020_2025.zip'
      - '.github/workflows/4t-backtest.yml'

jobs:
  backtest:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      LOG_DIR: _logs
      OUT_DIR: _out
      SRC_DIR: src
      DATA_DIR: data
    steps:
      - name: Checkout (no external action)
        run: |
          set -Eeuo pipefail
          git -c advice.detachedHead=false fetch --depth=1 origin "${GITHUB_REF_NAME:-main}"
          git checkout FETCH_HEAD
          git rev-parse --short HEAD

      - name: Prepare folders
        run: |
          set -Eeuo pipefail
          mkdir -p "$LOG_DIR" "$OUT_DIR" "$SRC_DIR" "$DATA_DIR"
          {
            echo "Repo: $GITHUB_REPOSITORY"
            echo "SHA : $(git rev-parse HEAD)"
            echo "TZ  : $TZ"
          } | tee "$LOG_DIR/context.txt"

      - name: Unpack code (trend4u.zip) → src/
        env:
          WANT_CODE: ${{ github.event.inputs.code_zip }}
        run: |
          set -Eeuo pipefail
          CODE_ZIP="${WANT_CODE:-}"
          if [[ -z "${CODE_ZIP}" ]]; then
            CODE_ZIP="$(ls -1 trend4u*.zip 2>/dev/null | head -n1 || true)"
          fi
          if [[ -z "${CODE_ZIP}" || ! -f "${CODE_ZIP}" ]]; then
            echo "ERROR: trend4u.zip not found at repo root." >&2
            ls -la || true
            exit 1
          fi
          echo "Using code zip: ${CODE_ZIP}"
          unzip -q "${CODE_ZIP}" -d _code_tmp
          # 유연하게 src 채우기
          if [[ -d _code_tmp/src ]]; then
            rsync -a _code_tmp/src/ "$SRC_DIR"/
          elif [[ -d _code_tmp/trend4u ]]; then
            rsync -a _code_tmp/ "$SRC_DIR"/
          else
            rsync -a _code_tmp/ "$SRC_DIR"/
          fi
          rm -rf _code_tmp
          echo "SRC tree:"
          (cd "$SRC_DIR" && ls -la && find . -maxdepth 2 -type d)

      - name: Hotfix package init & imports (trend4p import error)
        run: |
          set -Eeuo pipefail
          # 필수 디렉터리/파일 보장
          mkdir -p "$SRC_DIR/trend4u" "$SRC_DIR/trend4u/trend4p"
          touch "$SRC_DIR/trend4u/__init__.py"
          # trend4p/__init__.py 문법오류 자동 교정
          if [[ -f "$SRC_DIR/trend4u/trend4p/__init__.py" ]]; then
            awk '{
              if ($0 ~ /^\.?__all__\s*=/) { print "__all__ = [\"data_utils\",\"features_4u\",\"labeling\",\"model_4u\",\"execution_4u\",\"selector_4u\"]" }
              else print $0
            }' "$SRC_DIR/trend4u/trend4p/__init__.py" > "$SRC_DIR/trend4u/trend4p/__init__.py.fixed"
            mv "$SRC_DIR/trend4u/trend4p/__init__.py.fixed" "$SRC_DIR/trend4u/trend4p/__init__.py"
          else
            cat > "$SRC_DIR/trend4u/trend4p/__init__.py" <<'PY'
__all__ = ["data_utils","features_4u","labeling","model_4u","execution_4u","selector_4u"]
PY
          fi

          # run_4u.py 내 절대임포트 → 패키지/상대임포트로 변환
          if [[ -f "$SRC_DIR/trend4u/run_4u.py" ]]; then
            sed -i -E \
              -e 's/^from[ ]+trend4p\./from trend4u.trend4p./g' \
              -e 's/^import[ ]+trend4p/import trend4u.trend4p as trend4p/g' \
              "$SRC_DIR/trend4u/run_4u.py"
            # 보호적: 상단에 sys.path 가드 추가(중복추가 방지)
            awk 'BEGIN{added=0}
                 NR==1 && added==0{
                   print "import os, sys"
                   print "p=os.path.abspath(os.path.join(os.path.dirname(__file__),\"..\"))"
                   print "if p not in sys.path: sys.path.insert(0,p)"
                   added=1
                 }
                 { print $0 }' "$SRC_DIR/trend4u/run_4u.py" > "$SRC_DIR/trend4u/run_4u.py.fixed"
            mv "$SRC_DIR/trend4u/run_4u.py.fixed" "$SRC_DIR/trend4u/run_4u.py"
          fi

          # 핵심 서브모듈들에서도 동일 교정
          for f in $(grep -RIl --exclude-dir="__pycache__" '^from[ ]\+trend4p\.' "$SRC_DIR/trend4u" || true); do
            sed -i -E 's/^from[ ]+trend4p\./from trend4u.trend4p./g' "$f"
          done

      - name: Prepare data (ETHUSDT_1min_2020_2025.zip → data/)
        env:
          WANT_DATA: ${{ github.event.inputs.data_zip }}
        run: |
          set -Eeuo pipefail
          DATA_ZIP="${WANT_DATA:-}"
          if [[ -z "${DATA_ZIP}" ]]; then
            DATA_ZIP="$(ls -1 ETH*1min*2025*.zip 2>/dev/null | head -n1 || true)"
            [[ -z "${DATA_ZIP}" ]] && DATA_ZIP="$(ls -1 ETHUSDT_1min_2020_2025.zip 2>/dev/null | head -n1 || true)"
          fi
          if [[ -z "${DATA_ZIP}" || ! -f "${DATA_ZIP}" ]]; then
            echo "WARNING: data zip not found; continuing (코드가 자체 경로를 가질 수도 있음)."
          else
            echo "Using data zip: ${DATA_ZIP}"
            unzip -q "${DATA_ZIP}" -d "$DATA_DIR"
          fi
          echo "DATA tree:"; (cd "$DATA_DIR" && ls -la || true)

      - name: Install deps (python3 -m pip)
        run: |
          set -Eeuo pipefail
          python3 -V | tee -a "$LOG_DIR/versions.txt"
          python3 -m pip install --upgrade pip
          if [[ -f "requirements.txt" ]]; then
            python3 -m pip install -r requirements.txt
          elif [[ -f "$SRC_DIR/requirements.txt" ]]; then
            python3 -m pip install -r "$SRC_DIR/requirements.txt"
          else
            python3 -m pip install numpy pandas matplotlib ta scikit-learn python-dateutil pytz
          fi

      - name: Run backtest
        env:
          PYTHONPATH: ${{ github.workspace }}/src:${{ github.workspace }}/src/trend4u
        run: |
          set -Eeuo pipefail
          echo "PYTHONPATH=${PYTHONPATH}" | tee -a "$LOG_DIR/steps.txt"
          # 사전 임포트 검증
          python3 - <<'PY'
import sys, importlib
print("sys.path[0:3] =", sys.path[0:3])
import trend4u, trend4u.trend4p as t4p
print("imports OK:", trend4u.__name__, t4p.__name__)
PY
          # 엔트리 실행(모듈 방식 권장)
          if [[ -f "$SRC_DIR/trend4u/run_4u.py" ]]; then
            python3 -m trend4u.run_4u 2>&1 | tee "$LOG_DIR/backtest_stdout.txt"
          else
            echo "ERROR: $SRC_DIR/trend4u/run_4u.py not found." >&2
            exit 1
          fi

      - name: Collect artifacts → _out/
        run: |
          set -Eeuo pipefail
          find . -maxdepth 3 -type f \( \
            -name 'train_test_summary.json' -o \
            -name 'backtest_summary.json' -o \
            -name 'equity_curve*.csv' -o \
            -name 'trades*.csv' -o \
            -name 'report*.html' -o \
            -name 'fig_*.png' \
          \) -print0 | while IFS= read -r -d '' p; do
            mkdir -p "$OUT_DIR"
            cp "$p" "$OUT_DIR"/ || true
          done
          # 산출물 없을 때도 summary 노출
          if [[ ! -e "$OUT_DIR/backtest_summary.json" ]]; then
            echo '{"note":"No backtest_summary.json generated."}' > "$OUT_DIR/backtest_summary.json"
          fi
          echo "OUT tree:"; (cd "$OUT_DIR" && ls -la || true)

      # (선택) 브랜치 커밋/푸시는 조직 정책상 외부 액션 없이 생략