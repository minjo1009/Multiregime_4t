name: 4u Backtest (pure bash)

on:
  workflow_dispatch:
    inputs:
      run_args:
        description: '직접 전달할 실행 인수 (예: --data data/ETHUSDT_1min_2020_2025.csv --train_start 2024-01-01 --train_end 2024-12-31 --test_start 2025-01-01 --test_end 2025-03-31)'
        required: false
        default: ''
      results_branch:
        description: '결과 푸시 브랜치'
        required: false
        default: 'backtest-results'

permissions:
  contents: write

jobs:
  backtest:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      SRC_DIR: ${{ github.workspace }}/src
      DATA_DIR: ${{ github.workspace }}/data
      OUT_DIR:  ${{ github.workspace }}/_out
      LOG_DIR:  ${{ github.workspace }}/_logs
      RESULTS_BRANCH: ${{ inputs.results_branch }}
    steps:
      - name: Checkout (no external action)
        shell: bash
        env:
          REPO:  ${{ github.repository }}
          SHA:   ${{ github.sha }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -Eeuo pipefail
          mkdir -p "$LOG_DIR"
          echo "Repo: $REPO" | tee -a "$LOG_DIR/context.txt"
          echo "SHA : $SHA"  | tee -a "$LOG_DIR/context.txt"
          echo "TZ  : $TZ"   | tee -a "$LOG_DIR/context.txt"
          git init
          git remote add origin "https://x-access-token:${TOKEN}@github.com/${REPO}.git"
          git -c protocol.version=2 fetch --depth=1 origin "$SHA"
          git checkout --force FETCH_HEAD

      - name: Prepare folders
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "$SRC_DIR" "$DATA_DIR" "$OUT_DIR" "$LOG_DIR"
          ls -la | tee -a "$LOG_DIR/steps.txt"

      - name: Unpack code (trend4u.zip) → src/
        shell: bash
        run: |
          set -Eeuo pipefail
          if [[ -f trend4u.zip ]]; then
            echo "Using trend4u.zip" | tee -a "$LOG_DIR/steps.txt"
            rm -rf _code_tmp && mkdir -p _code_tmp
            unzip -q trend4u.zip -d _code_tmp
            if [[ -d _code_tmp/trend4u ]]; then
              rsync -a _code_tmp/trend4u/ "$SRC_DIR"/trend4u/
            elif [[ -d _code_tmp/src ]]; then
              rsync -a _code_tmp/src/ "$SRC_DIR"/
            else
              rsync -a _code_tmp/ "$SRC_DIR"/
            fi
            rm -rf _code_tmp
          elif [[ -d src ]]; then
            rsync -a src/ "$SRC_DIR"/
          elif [[ -d trend4u ]]; then
            rsync -a trend4u/ "$SRC_DIR"/trend4u/
          else
            echo "::error::trend4u.zip, src/, trend4u/ 중 아무것도 없음"
            exit 1
          fi
          # __init__.py 선행 마침표 핫픽스 (문법오류 방지)
          INIT="$SRC_DIR/trend4u/trend4p/__init__.py"
          if [[ -f "$INIT" ]]; then
            sed -i '1s/^[[:space:]]*\.[[:space:]]*__all__/__all__/' "$INIT" || true
            grep -q "__all__" "$INIT" || printf "__all__=['data_utils','features_4u','labeling','model_4u','execution_4u','selector_4u']\n" >> "$INIT"
          fi
          echo "[src tree]"
          (cd "$SRC_DIR" && find . -maxdepth 3 -type f | sort | tee -a "$LOG_DIR/src_tree.txt")

      - name: Prepare data (ETHUSDT_1min_2020_2025.*)
        shell: bash
        run: |
          set -Eeuo pipefail
          if [[ -f ETHUSDT_1min_2020_2025.zip ]]; then
            unzip -q ETHUSDT_1min_2020_2025.zip -d "$DATA_DIR"
          else
            shopt -s nullglob
            CSV=(ETHUSDT_1min_2020_2025.csv *.csv)
            [[ ${#CSV[@]} -gt 0 ]] && cp -f "${CSV[@]}" "$DATA_DIR"/
          fi
          (cd "$DATA_DIR" && ls -la || true) | tee -a "$LOG_DIR/steps.txt"

      - name: Install deps (python3 -m pip)
        shell: bash
        run: |
          set -Eeuo pipefail
          python3 --version | tee -a "$LOG_DIR/versions.txt"
          python3 -m pip install --upgrade pip
          if [[ -f requirements.txt ]]; then
            python3 -m pip install -r requirements.txt
          elif [[ -f "$SRC_DIR/requirements.txt" ]]; then
            python3 -m pip install -r "$SRC_DIR/requirements.txt"
          elif [[ -f pyproject.toml ]]; then
            python3 -m pip install .
          else
            python3 -m pip install numpy pandas matplotlib ta scikit-learn python-dateutil pytz
          fi

      - name: Run backtest
        shell: bash
        env:
          DATA_DIR: ${{ github.workspace }}/data
          OUT_DIR:  ${{ github.workspace }}/_out
          USER_RUN_ARGS: ${{ inputs.run_args }}
        run: |
          set -Eeuo pipefail
          export PYTHONPATH="${PYTHONPATH:-${GITHUB_WORKSPACE}/src}:${GITHUB_WORKSPACE}/src/trend4u"
          echo "PYTHONPATH=$PYTHONPATH" | tee -a "$LOG_DIR/steps.txt"

          # 1) 실행 인수를 사용자가 줬다면 그대로 사용
          RUN_ARGS="$USER_RUN_ARGS"

          # 2) 비어있으면 CSV를 찾아서 날짜 범위 자동 추론 -> 인자 생성
          if [[ -z "$RUN_ARGS" ]]; then
            CSV_FILE="$(find "$DATA_DIR" -type f -name '*.csv' | head -n1 || true)"
            if [[ -z "$CSV_FILE" ]]; then
              echo "::error::데이터 CSV를 찾지 못했습니다. data/*.csv 확인"
              exit 2
            fi

            # pandas로 컬럼 자동탐지( timestamp/date/datetime/open_time 등 ) 후 기간 분할
            python3 - <<'PY' "$CSV_FILE" "$OUT_DIR" > "$LOG_DIR/auto_args.txt"
import sys, pandas as pd, pathlib, numpy as np
csv, out = sys.argv[1], sys.argv[2]
df = pd.read_csv(csv, nrows=200000)  # 헤더/형식 판별에 충분
cands = [c for c in df.columns if str(c).lower() in ('timestamp','time','date','datetime','open_time')]
if not cands:
    # 날짜형으로 변환 가능한 첫 컬럼 탐색
    for c in df.columns:
        try:
            pd.to_datetime(df[c].iloc[:100], errors='raise')
            cands=[c]; break
        except Exception:
            pass
if not cands:
    raise SystemExit("NO_DATETIME_COLUMN")
tcol = cands[0]
ts = pd.to_datetime(df[tcol], errors='coerce').dropna().sort_values()
start = ts.min().date()
end   = ts.max().date()
# 80%를 train, 20%를 test로 분할
cut = ts.iloc[int(len(ts)*0.8)].date()
train_start = start
train_end   = cut
test_start  = (pd.Timestamp(cut)+pd.Timedelta(days=1)).date()
test_end    = end
args = f"--data {csv} --train_start {train_start} --train_end {train_end} --test_start {test_start} --test_end {test_end} --out_dir {out}"
print(args)
PY
            RUN_ARGS="$(cat "$LOG_DIR/auto_args.txt" || true)"
            if [[ -z "$RUN_ARGS" ]]; then
              echo "::error::자동 인자 생성 실패"
              exit 2
            fi
            echo "Auto RUN_ARGS: $RUN_ARGS" | tee -a "$LOG_DIR/steps.txt"
          fi

          # 실행
          set +e
          python3 -m trend4u.run_4u $RUN_ARGS 2>&1 | tee "$LOG_DIR/backtest_stdout.txt"
          rc=${PIPESTATUS[0]}
          set -e
          echo "exit_code=$rc" | tee -a "$LOG_DIR/steps.txt"
          echo "$rc" > "$LOG_DIR/exit_code.txt"

      - name: Collect artifacts → _out/
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "$OUT_DIR"
          find "$GITHUB_WORKSPACE" -maxdepth 3 -type f \( \
            -name 'train_test_summary.json' -o \
            -name 'backtest_summary.json' -o \
            -name 'equity_curve*.csv' -o \
            -name 'trades*.csv' -o \
            -name 'report*.html' -o \
            -name 'fig_*.png' \
          \) -print0 | while IFS= read -r -d '' p; do cp "$p" "$OUT_DIR"/ || true; done
          (cd "$OUT_DIR" && ls -la || true) | tee -a "$LOG_DIR/steps.txt"

      - name: Publish results to branch (no external action)
        if: always()
        shell: bash
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -Eeuo pipefail
          BR="$RESULTS_BRANCH"
          RUN_DIR="_runs/${GITHUB_RUN_ID}"
          TMP="$(mktemp -d)"
          mkdir -p "$TMP/${RUN_DIR}"
          rsync -a "$OUT_DIR"/ "$TMP/${RUN_DIR}/" || true
          rsync -a "$LOG_DIR"/ "$TMP/${RUN_DIR}/logs/" || true
          ( cd "$TMP"
            git init
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git remote add origin "https://x-access-token:${TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
            git fetch origin "$BR" || true
            git checkout -B "$BR"
            git add .
            git commit -m "Backtest run ${GITHUB_RUN_ID} (SHA ${GITHUB_SHA})" || true
            git push -f origin "$BR"
          )

      - name: Job summary
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          {
            echo "## 4u Backtest — Summary"
            if [[ -f "$OUT_DIR/train_test_summary.json" ]]; then
              echo ""
              echo "\`\`\`json"; sed -n '1,200p' "$OUT_DIR/train_test_summary.json"; echo "\`\`\`"
            else
              echo "- No train_test_summary.json generated."
            fi
            echo ""
            echo "### Logs"
            echo "- **context.txt**";  echo '```'; sed -n '1,120p' "$LOG_DIR/context.txt" 2>/dev/null; echo '```'
            echo "- **exit_code**: $(cat "$LOG_DIR/exit_code.txt" 2>/dev/null || echo 'n/a')"
          } >> "$GITHUB_STEP_SUMMARY"