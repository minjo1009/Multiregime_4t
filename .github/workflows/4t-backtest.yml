name: 4t-backtest

on:
  workflow_dispatch:
    inputs:
      train_start:
        description: "Train start (YYYY-MM-DD)"
        required: true
        default: "2025-01-01"
      train_end:
        description: "Train end (YYYY-MM-DD)"
        required: true
        default: "2025-04-30"
      test_start:
        description: "Test start (YYYY-MM-DD)"
        required: true
        default: "2025-05-01"
      test_end:
        description: "Test end (YYYY-MM-DD)"
        required: true
        default: "2025-06-30"
      H:
        description: "Prediction horizon (minutes)"
        required: true
        default: "5"
      fee_bps:
        description: "Fee in bps"
        required: true
        default: "1.0"
      cov_low:
        description: "Covariance band lower"
        required: true
        default: "0.2"
      cov_high:
        description: "Covariance band upper"
        required: true
        default: "0.4"

jobs:
  backtest:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      CODE_ZIP: trend4u.zip
      DATA_ZIP: ETHUSDT_1min_2020_2025.zip
      WORKDIR: ${{ github.workspace }}
      SRC_DIR: ${{ github.workspace }}/src
      DATA_DIR: ${{ github.workspace }}/data
      OUT_DIR:  ${{ github.workspace }}/src/_out_4u/github
      LOG_DIR:  ${{ github.workspace }}/logs

    steps:
      # ❌ actions/checkout, setup-python, upload-artifact 전부 사용 안 함 (조직 정책 회피)
      - name: Prepare folders & echo context
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${SRC_DIR}" "${DATA_DIR}" "${OUT_DIR}" "${LOG_DIR}"
          echo "Repo: $GITHUB_REPOSITORY" | tee -a "${LOG_DIR}/context.txt"
          echo "SHA : $GITHUB_SHA"         | tee -a "${LOG_DIR}/context.txt"
          echo "TZ  : $TZ"                | tee -a "${LOG_DIR}/context.txt"
          python3 -V | tee -a "${LOG_DIR}/versions.txt"
          which python3 | tee -a "${LOG_DIR}/versions.txt"

      - name: Unpack code zip (trend4u.zip) to src/
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "${CODE_ZIP}" ]; then
            echo "ERROR: ${CODE_ZIP} not found at repo root." >&2
            exit 1
          fi
          unzip -q "${CODE_ZIP}" -d "${SRC_DIR}"
          # 코드는 trend4u/ 아래에 존재 (zip 내부 확인 완료)
          test -f "${SRC_DIR}/trend4u/run_4u.py" || { echo "run_4u.py not found"; ls -R "${SRC_DIR}"; exit 1; }

      - name: Hotfix package init (fix SyntaxError in trend4p/__init__.py)
        shell: bash
        run: |
          set -euo pipefail
          INIT_FILE="${SRC_DIR}/trend4u/trend4p/__init__.py"
          if [ -f "${INIT_FILE}" ]; then
            # 잘못된 선행 '.' 제거: ".__all__ = [...]" -> "__all__ = [...]"
            # (우리가 받은 zip에서 발생하던 SyntaxError)
            sed -i 's/^\.\(__all__\s*=.*\)$/\1/' "${INIT_FILE}"
            echo "[PATCHED] ${INIT_FILE}" | tee -a "${LOG_DIR}/patches.txt"
          else
            echo "ERROR: ${INIT_FILE} not found." >&2
            exit 1
          fi

      - name: Unpack data zip (ETHUSDT_1min_2020_2025.zip) to data/
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "${DATA_ZIP}" ]; then
            echo "ERROR: ${DATA_ZIP} not found at repo root." >&2
            exit 1
          fi
          unzip -q "${DATA_ZIP}" -d "${DATA_DIR}"
          echo "Data dir tree:" | tee -a "${LOG_DIR}/data_tree.txt"
          ls -lah "${DATA_DIR}" | tee -a "${LOG_DIR}/data_tree.txt"
          # CSV 자동 탐색
          CSV_PATH="$(find "${DATA_DIR}" -maxdepth 2 -type f -name '*.csv' | head -n 1 || true)"
          if [ -z "${CSV_PATH}" ]; then
            echo "ERROR: No CSV found in ${DATA_DIR}" >&2
            exit 1
          fi
          echo "${CSV_PATH}" > "${DATA_DIR}/.csv_path"

      - name: Install Python deps (fallback minimal if requirements missing)
        shell: bash
        working-directory: ${{ env.SRC_DIR }}/trend4u
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then
            pip3 install --upgrade pip
            pip3 install -r requirements.txt
          else
            pip3 install --upgrade pip
            pip3 install numpy pandas matplotlib ta python-dateutil pytz scikit-learn
          fi

      - name: Run backtest
        shell: bash
        env:
          TRAIN_START: ${{ inputs.train_start }}
          TRAIN_END:   ${{ inputs.train_end }}
          TEST_START:  ${{ inputs.test_start }}
          TEST_END:    ${{ inputs.test_end }}
          H:           ${{ inputs.H }}
          FEE_BPS:     ${{ inputs.fee_bps }}
          COV_LOW:     ${{ inputs.cov_low }}
          COV_HIGH:    ${{ inputs.cov_high }}
        run: |
          set -euo pipefail
          CSV_PATH="$(cat "${DATA_DIR}/.csv_path")"
          cd "${SRC_DIR}/trend4u"
          echo ">>> Using CSV: ${CSV_PATH}"
          echo ">>> Dates: ${TRAIN_START} ~ ${TRAIN_END} | ${TEST_START} ~ ${TEST_END}"
          python3 run_4u.py \
            --data "${CSV_PATH}" \
            --train_start "${TRAIN_START}" --train_end "${TRAIN_END}" \
            --test_start "${TEST_START}"   --test_end "${TEST_END}" \
            --H "${H}" --fee_bps "${FEE_BPS}" \
            --cov_low "${COV_LOW}" --cov_high "${COV_HIGH}" \
            --out_dir "${OUT_DIR}"

      - name: Persist summary + sanity logs to job summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo "### 4u Backtest — Summary" >> "$GITHUB_STEP_SUMMARY"
          if [ -f "${OUT_DIR}/train_test_summary.json" ]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "\`\`\`json" >> "$GITHUB_STEP_SUMMARY"
            cat "${OUT_DIR}/train_test_summary.json" >> "$GITHUB_STEP_SUMMARY"
            echo "\`\`\`" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- No train_test_summary.json generated." >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Logs" >> "$GITHUB_STEP_SUMMARY"
          for f in "${LOG_DIR}/context.txt" "${LOG_DIR}/versions.txt" "${LOG_DIR}/patches.txt" "${LOG_DIR}/data_tree.txt"; do
            if [ -f "$f" ]; then
              echo "" >> "$GITHUB_STEP_SUMMARY"
              echo "**$(basename "$f")**" >> "$GITHUB_STEP_SUMMARY"
              echo "\`\`\`" >> "$GITHUB_STEP_SUMMARY"
              cat "$f" >> "$GITHUB_STEP_SUMMARY"
              echo "\`\`\`" >> "$GITHUB_STEP_SUMMARY"
            fi
          done
