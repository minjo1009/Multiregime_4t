name: 4t-backtest

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: '백테스트 시작일 (예: 2022-01-01)'
        required: false
      end_date:
        description: '백테스트 종료일 (예: 2025-08-23)'
        required: false

jobs:
  backtest:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      CODE_ZIP: trend4u.zip
      DATA_ZIP: ETHUSDT_1min_2020_2025.zip
      CODE_DIR: code
      DATA_DIR: data
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 1

      - name: Set up Python 3.11
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.11'

      - name: Prepare workspace (dirs, logs)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ./logs ./out
          echo "Repo: $GITHUB_REPOSITORY"         | tee -a ./logs/meta.txt
          echo "SHA : $GITHUB_SHA"                | tee -a ./logs/meta.txt
          echo "TZ  : $TZ"                        | tee -a ./logs/meta.txt
          pwd                                     | tee ./logs/pwd.txt
          ls -al                                  | tee ./logs/ls_root.txt

      - name: Validate required files (zips at repo root)
        shell: bash
        run: |
          set -euo pipefail
          [[ -f "$CODE_ZIP" ]] || { echo "코드 zip($CODE_ZIP)이 루트에 없습니다"; exit 1; }
          [[ -f "$DATA_ZIP" ]] || { echo "데이터 zip($DATA_ZIP)이 루트에 없습니다"; exit 1; }

      - name: Unzip code and data
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$CODE_DIR" "$DATA_DIR"
          mkdir -p "$CODE_DIR" "$DATA_DIR"
          unzip -q "$CODE_ZIP" -d "$CODE_DIR"
          unzip -q "$DATA_ZIP" -d "$DATA_DIR" || true
          echo "== CODE TREE =="  | tee -a ./logs/tree.txt
          (cd "$CODE_DIR" && find . -maxdepth 4 -type f | sort) | tee -a ./logs/tree.txt
          echo "== DATA HEAD =="  | tee -a ./logs/tree.txt
          (cd "$DATA_DIR" && find . -maxdepth 2 -type f | head -n 50) | tee -a ./logs/tree.txt

      - name: Install dependencies
        shell: bash
        working-directory: ${{ env.CODE_DIR }}
        run: |
          set -euo pipefail
          python -V | tee -a ../logs/versions.txt
          if [[ -f requirements.txt ]]; then
            pip install -r requirements.txt
          elif [[ -f pyproject.toml ]]; then
            pip install .
          else
            pip install numpy pandas matplotlib ta python-dateutil pytz
          fi

      - name: Run backtest (auto-discovery)
        shell: bash
        working-directory: ${{ env.CODE_DIR }}
        env:
          START_DATE: ${{ github.event.inputs.start_date }}
          END_DATE:   ${{ github.event.inputs.end_date }}
          DATA_DIR:   ${{ github.workspace }}/${{ env.DATA_DIR }}
          OUT_DIR:    ${{ github.workspace }}/out
          LOG_DIR:    ${{ github.workspace }}/logs
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR" "$LOG_DIR"

          try_run() {
            echo "[TRY] $*" | tee -a "$LOG_DIR/runner.txt"
            set +e
            bash -lc "$@" 2>&1 | tee -a "$LOG_DIR/backtest.out"
            local rc=${PIPESTATUS[0]}
            set -e
            return $rc
          }

          # 1) backtest.sh at repo root
          if [[ -f backtest.sh ]]; then
            chmod +x backtest.sh
            try_run "./backtest.sh" && exit 0
          fi

          # 2) scripts/backtest.sh
          if [[ -f scripts/backtest.sh ]]; then
            chmod +x scripts/backtest.sh
            try_run "scripts/backtest.sh" && exit 0
          fi

          # 3) run_backtest.py
          if [[ -f run_backtest.py ]]; then
            try_run "python run_backtest.py --data \"$DATA_DIR\" --out \"$OUT_DIR\" --start \"$START_DATE\" --end \"$END_DATE\"" && exit 0
            try_run "python run_backtest.py --data \"$DATA_DIR\" --out \"$OUT_DIR\"" && exit 0
            try_run "python run_backtest.py" && exit 0
          fi

          # 4) backtest.py
          if [[ -f backtest.py ]]; then
            try_run "python backtest.py --data \"$DATA_DIR\" --out \"$OUT_DIR\" --start \"$START_DATE\" --end \"$END_DATE\"" && exit 0
            try_run "python backtest.py --data \"$DATA_DIR\" --out \"$OUT_DIR\"" && exit 0
            try_run "python backtest.py" && exit 0
          fi

          # 5) main.py (contains 'backtest' keyword)
          if [[ -f main.py ]]; then
            if grep -i -q "backtest" main.py; then
              try_run "python main.py --data \"$DATA_DIR\" --out \"$OUT_DIR\" --start \"$START_DATE\" --end \"$END_DATE\"" && exit 0
              try_run "python main.py --data \"$DATA_DIR\" --out \"$OUT_DIR\"" && exit 0
              try_run "python main.py" && exit 0
            fi
          fi

          echo "백테스트 실행 스크립트를 찾지 못했습니다."
          echo "아래 파일 목록을 확인하세요:" | tee -a "$LOG_DIR/runner.txt"
          find . -maxdepth 3 -type f | sort | tee -a "$LOG_DIR/runner.txt"
          exit 2

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: backtest-logs
          path: |
            logs/**
            code/logs/**
          if-no-files-found: warn
          retention-days: 7

      - name: Upload results (out/**)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: backtest-results
          path: out/**
          if-no-files-found: error
          retention-days: 7
