name: 4t-backtest

on:
  workflow_dispatch:
    inputs:
      code_zip:
        description: 'Code pack zip at repo root'
        required: false
        default: 'trend4t_fix_full.zip'
      data_csv:
        description: 'Data CSV path (root or data/)'
        required: false
        default: 'ETHUSDT_1min_2020_2025.csv'
      train_start:
        description: 'Train start (UTC)'
        required: false
        default: '2025-01-01'
      train_end:
        description: 'Train end (UTC)'
        required: false
        default: '2025-04-30'
      test_start:
        description: 'Test start (UTC)'
        required: false
        default: '2025-05-01'
      test_end:
        description: 'Test end (UTC)'
        required: false
        default: '2025-06-30'
      H:
        description: 'Horizon H'
        required: false
        default: '5'
      fee_bps:
        description: 'Fee in bps (e.g., 1.0)'
        required: false
        default: '1.0'
      cov_low:
        description: 'Coverage lower bound'
        required: false
        default: '0.20'
      cov_high:
        description: 'Coverage upper bound'
        required: false
        default: '0.40'

permissions:
  contents: read

jobs:
  backtest:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Self checkout via git (no actions)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git init .
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git"
          git fetch --depth=1 origin "${{ github.sha }}"
          git checkout --force FETCH_HEAD
          git status --porcelain || true
          ls -la

      - name: Verify code/data exist at repo root or ./data
        run: |
          set -euo pipefail
          CODE_ZIP="${{ inputs.code_zip }}"
          DATA_CSV_INPUT="${{ inputs.data_csv }}"

          # code zip 확인
          if [[ ! -f "$CODE_ZIP" ]]; then
            echo "❌ Code pack zip not found at repo root: $CODE_ZIP"
            echo "현재 위치: $(pwd)"
            ls -la
            exit 2
          fi

          # csv 경로 후보
          if [[ -f "$DATA_CSV_INPUT" ]]; then
            DATA_CSV="$DATA_CSV_INPUT"
          elif [[ -f "data/$DATA_CSV_INPUT" ]]; then
            DATA_CSV="data/$DATA_CSV_INPUT"
          else
            echo "❌ Data CSV not found: tried $DATA_CSV_INPUT and data/$DATA_CSV_INPUT"
            echo "현재 위치: $(pwd)"
            ls -la
            echo "data/ 목록:"
            ls -la data || true
            exit 3
          fi

          echo "✅ Found code zip: $CODE_ZIP"
          echo "✅ Found data csv: $DATA_CSV"

          echo "CODE_ZIP=$CODE_ZIP" >> $GITHUB_ENV
          echo "DATA_CSV=$DATA_CSV" >> $GITHUB_ENV

      - name: Unzip code pack
        run: |
          set -euo pipefail
          unzip -o "$CODE_ZIP" -d .
          echo "📦 Unzipped content:"
          ls -la
          echo "📂 tree (top level):"
          find . -maxdepth 2 -type d -print

      - name: Prepare Python (use system Python)
        run: |
          set -euo pipefail
          python3 -V
          python3 -m venv .venv
          source .venv/bin/activate
          python -V
          python -m pip install --upgrade pip wheel setuptools
          # 필수 패키지 (여기에서 최소 셋만 지정, 나머지는 requirements.txt 있으면 설치)
          python -m pip install "numpy==1.26.4" "pandas==2.2.2" "scikit-learn==1.5.1" "pyarrow>=15" "matplotlib>=3.8"
          if [[ -f requirements.txt ]]; then
            python -m pip install -r requirements.txt
          elif [[ -f trend4p/requirements.txt ]]; then
            python -m pip install -r trend4p/requirements.txt
          fi

      - name: Run backtest (4t)
        id: run_bt
        env:
          TRAIN_START: ${{ inputs.train_start }}
          TRAIN_END:   ${{ inputs.train_end }}
          TEST_START:  ${{ inputs.test_start }}
          TEST_END:    ${{ inputs.test_end }}
          H:           ${{ inputs.H }}
          FEE_BPS:     ${{ inputs.fee_bps }}
          COV_LOW:     ${{ inputs.cov_low }}
          COV_HIGH:    ${{ inputs.cov_high }}
        run: |
          set -euo pipefail
          source .venv/bin/activate

          # 아웃풋 디렉토리
          OUTDIR="_out_4t/github"
          mkdir -p "$OUTDIR"

          # run_4t.py 위치 탐색
          TARGET=""
          if [[ -f "./run_4t.py" ]]; then
            TARGET="./run_4t.py"
          elif [[ -f "./trend4p/run_4t.py" ]]; then
            TARGET="./trend4p/run_4t.py"
          else
            # 광역 탐색
            CAND=$(grep -Rsl --include="run_4t.py" "" . || true)
            if [[ -n "$CAND" ]]; then
              TARGET="$CAND"
            fi
          fi

          if [[ -z "$TARGET" ]]; then
            echo "❌ run_4t.py not found in code pack."
            find . -name "run_4t.py" -print || true
            exit 4
          fi
          echo "▶ Running: $TARGET"

          # 실행
          python "$TARGET" \
            --data "$DATA_CSV" \
            --train_start "${TRAIN_START}" --train_end "${TRAIN_END}" \
            --test_start  "${TEST_START}"  --test_end  "${TEST_END}" \
            --H "${H}" --fee_bps "${FEE_BPS}" --cov_low "${COV_LOW}" --cov_high "${COV_HIGH}" \
            --out_dir "$OUTDIR" \
          | tee "$OUTDIR/run_stdout.txt"

          echo "✅ Backtest finished."

      - name: Summarize to job summary
        if: always()
        run: |
          set -euo pipefail
          OUTDIR="_out_4t/github"
          echo "## 4t Backtest Summary" >> $GITHUB_STEP_SUMMARY
          if [[ -f "$OUTDIR/train_test_summary.json" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat "$OUTDIR/train_test_summary.json" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- (notice) train_test_summary.json not found. See logs below." >> $GITHUB_STEP_SUMMARY
          fi
          if [[ -f "$OUTDIR/run_stdout.txt" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Raw stdout (tail)" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            tail -n 80 "$OUTDIR/run_stdout.txt" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
