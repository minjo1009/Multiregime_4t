name: 4t-backtest-no-actions

on:
  workflow_dispatch:
    inputs:
      train_start:
        description: "Train start (UTC, YYYY-MM-DD)"
        required: true
        default: "2025-01-01"
      train_end:
        description: "Train end (UTC, YYYY-MM-DD)"
        required: true
        default: "2025-04-30"
      test_start:
        description: "Test start (UTC, YYYY-MM-DD)"
        required: true
        default: "2025-05-01"
      test_end:
        description: "Test end (UTC, YYYY-MM-DD)"
        required: true
        default: "2025-06-30"
      H:
        description: "Forecast horizon"
        required: true
        default: "5"
      fee_bps:
        description: "Fee in bps"
        required: true
        default: "1.0"
      cov_low:
        description: "Coverage lower bound"
        required: true
        default: "0.20"
      cov_high:
        description: "Coverage upper bound"
        required: true
        default: "0.40"
      code_zip:
        description: "Code pack zip name in repo root"
        required: true
        default: "4t_hotfix_pack.zip"
      data_csv:
        description: "Data csv name in repo root"
        required: true
        default: "ETHUSDT_1min_2020_2025.csv"

jobs:
  backtest:
    runs-on: ubuntu-latest
    env:
      OUT_DIR: _out_4t/github
    steps:
      - name: Show runner info
        run: |
          uname -a
          which git || true
          which python3 || true
          python3 --version || true

      - name: Manual checkout (no actions)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p "$GITHUB_WORKSPACE"
          cd "$GITHUB_WORKSPACE"
          git init
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@${GITHUB_SERVER_URL#https://}/${GITHUB_REPOSITORY}.git"
          git fetch --depth=1 origin "${GITHUB_SHA}"
          git checkout --force FETCH_HEAD
          git rev-parse --short HEAD
          ls -al

      - name: Validate inputs and files
        shell: bash
        run: |
          set -euo pipefail
          CODE_ZIP="${{ github.event.inputs.code_zip }}"
          DATA_CSV="${{ github.event.inputs.data_csv }}"
          [[ -f "$CODE_ZIP" ]] || { echo "Code pack zip not found in repo root: $CODE_ZIP"; exit 2; }
          [[ -f "$DATA_CSV" ]] || { echo "Data csv not found in repo root: $DATA_CSV"; exit 3; }
          echo "OK: found $CODE_ZIP and $DATA_CSV"

      - name: Unzip code pack
        shell: bash
        run: |
          set -euo pipefail
          CODE_ZIP="${{ github.event.inputs.code_zip }}"
          rm -rf trend4p run_4t.py requirements.txt
          unzip -o "$CODE_ZIP"
          echo "Unzipped content:"
          ls -al
          test -f run_4t.py || echo "run_4t.py not found (ok if using module entry)"
          test -d trend4p || { echo "trend4p/ package missing in zip"; exit 4; }
          python3 - << 'PY'
import importlib.util, sys, os
want = ['trend4p/__init__.py',
        'trend4p/data_utils.py',
        'trend4p/features_4t.py',
        'trend4p/model_4t.py',
        'trend4p/execution_4t.py']
miss = [p for p in want if not os.path.exists(p)]
assert not miss, f"Missing in code pack: {miss}"
print("Module layout OK")
PY

      - name: Prepare Python
        shell: bash
        run: |
          set -euo pipefail
          python3 -m pip install --upgrade pip
          # requirements.txt 가 없을 수도 있어 안전장치로 핵심만 설치
          if [ -f requirements.txt ]; then
            python3 -m pip install -r requirements.txt
          else
            python3 -m pip install pandas==2.2.2 numpy==1.26.4 scikit-learn==1.5.1 scipy==1.13.1
          fi

      - name: Quick data sanity (open_time, monotonicity)
        shell: bash
        run: |
          set -euo pipefail
          DATA_CSV="${{ github.event.inputs.data_csv }}"
          python3 - << PY
import pandas as pd, sys
p = "${{ github.event.inputs.data_csv }}"
df = pd.read_csv(p, nrows=1000)
cols = set(df.columns.str.lower())
need = {'open_time','open','high','low','close','volume'}
miss = [c for c in need if c not in cols]
assert not miss, f"CSV missing columns: {miss}; have={sorted(cols)}"
print("CSV headers OK:", sorted(cols))
PY

      - name: Run backtest (4t)
        shell: bash
        env:
          TRAIN_S: ${{ github.event.inputs.train_start }}
          TRAIN_E: ${{ github.event.inputs.train_end }}
          TEST_S:  ${{ github.event.inputs.test_start }}
          TEST_E:  ${{ github.event.inputs.test_end }}
          H:       ${{ github.event.inputs.H }}
          FEE:     ${{ github.event.inputs.fee_bps }}
          COV_L:   ${{ github.event.inputs.cov_low }}
          COV_H:   ${{ github.event.inputs.cov_high }}
          DATA_CSV: ${{ github.event.inputs.data_csv }}
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR/logs"
          # 엔트리 우선순위: run_4t.py 있으면 그걸, 없으면 trend4p 내부 러너
          if [ -f run_4t.py ]; then
            python3 run_4t.py \
              --data "$DATA_CSV" \
              --train_start "$TRAIN_S" --train_end "$TRAIN_E" \
              --test_start "$TEST_S"   --test_end  "$TEST_E" \
              --H "$H" --fee_bps "$FEE" --cov_low "$COV_L" --cov_high "$COV_H" \
              --out_dir "$OUT_DIR" 2>&1 | tee "$OUT_DIR/logs/run.txt"
          else
            python3 - << 'PY' 2>&1 | tee "_out_4t/github/logs/run.txt"
import json, os, sys
from trend4p.execution_4t import backtest
out = backtest(
    data_path="${{ github.event.inputs.data_csv }}",
    train_start="${{ github.event.inputs.train_start }}",
    train_end="${{ github.event.inputs.train_end }}",
    test_start="${{ github.event.inputs.test_start }}",
    test_end="${{ github.event.inputs.test_end }}",
    H=int("${{ github.event.inputs.H }}"),
    fee_bps=float("${{ github.event.inputs.fee_bps }}"),
    cov_band=(float("${{ github.event.inputs.cov_low }}"), float("${{ github.event.inputs.cov_high }}"))
)
os.makedirs("_out_4t/github", exist_ok=True)
with open("_out_4t/github/train_test_summary.json","w") as f:
    json.dump(out, f, indent=2)
print(json.dumps(out, indent=2))
PY
          fi
          echo "List outputs:"
          ls -al "$OUT_DIR" || true
          test -f "$OUT_DIR/train_test_summary.json" || { echo "No summary produced"; exit 5; }

      - name: Commit & push artifacts (no upload-artifact)
        if: always()
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          BR="artifacts/run-${GITHUB_RUN_NUMBER}"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b "$BR"
          git add -f "$OUT_DIR"
          git commit -m "Add 4t outputs for run ${GITHUB_RUN_NUMBER}"
          git push -u origin "$BR"
          echo "::notice title=Artifacts::Pushed to branch $BR"
