name: 4t-backtest

on:
  workflow_dispatch:

env:
  CODE_ZIP: trend4t_hotfix_pack_u3.zip
  DATA_ZIP: ETHUSDT_1min_2020_2025.zip
  CSV_NAME: ETHUSDT_1min_2020_2025.csv
  OUT_DIR: _out_4t/github
  TRAIN_START: "2025-01-01"
  TRAIN_END:   "2025-04-30"
  TEST_START:  "2025-05-01"
  TEST_END:    "2025-06-30"
  H: "5"

jobs:
  backtest:
    runs-on: ubuntu-latest
    steps:
      # 1) 체크아웃 (풀 SHA 고정)
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955  # actions/checkout v4.3.0

      # 2) 파이썬 설치 (풀 SHA 고정)
      - name: Setup Python 3.11
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # actions/setup-python v5.6.0
        with:
          python-version: "3.11"

      # 3) 리포 상태 확인
      - name: Show repo
        run: |
          set -euo pipefail
          pwd
          ls -al

      # 4) 코드/데이터 ZIP 풀기 + 경로 정렬
      - name: Unpack code & data
        shell: bash
        run: |
          set -euo pipefail
          echo "CODE_ZIP=$CODE_ZIP DATA_ZIP=$DATA_ZIP"

          # 코드 ZIP 확인/해제
          test -f "$CODE_ZIP" || { echo "❌ Code zip not found at repo root: $CODE_ZIP"; exit 2; }
          rm -rf code_tmp
          mkdir -p code_tmp
          unzip -o "$CODE_ZIP" -d code_tmp >/dev/null

          # run_4t.py 위치 찾아서 최상위로 복사
          if [ -f code_tmp/run_4t.py ]; then
            rsync -a code_tmp/ .
          else
            inner=$(find code_tmp -maxdepth 3 -type f -name "run_4t.py" | head -n1 || true)
            if [ -n "$inner" ]; then
              rsync -a "$(dirname "$inner")"/ .
            else
              echo "❌ run_4t.py not found inside code zip"; exit 3;
            fi
          fi
          test -f run_4t.py || { echo "❌ run_4t.py missing after unzip"; exit 4; }
          test -d trend4p || { echo "❌ trend4p/ package missing after unzip"; ls -al; exit 5; }

          # 데이터 ZIP 확인/해제
          mkdir -p data
          if [ -f "$DATA_ZIP" ]; then
            unzip -o "$DATA_ZIP" -d data >/dev/null || true
          fi
          # 혹시 루트에 CSV가 있으면 data/ 로 이동
          if [ -f "$CSV_NAME" ]; then mv -f "$CSV_NAME" "data/$CSV_NAME"; fi

          # 자동 탐색/리네임 (대소문자/이름 변형 대응)
          if [ ! -f "data/$CSV_NAME" ]; then
            found=$(ls data 2>/dev/null | grep -i 'ethusdt_1min' | head -n1 || true)
            if [ -n "$found" ]; then mv -f "data/$found" "data/$CSV_NAME"; fi
          fi

          echo "== After unzip =="
          ls -al
          echo "== data/ =="
          ls -al data || true

          test -f "data/$CSV_NAME" || { echo "❌ CSV not found: data/$CSV_NAME"; exit 6; }

      # 5) 의존성 설치 (requirements.txt 없을 때도 동작)
      - name: Install dependencies
        run: |
          set -euo pipefail
          python -V
          python -m pip install -U pip setuptools wheel
          # 핵심 패키지 고정 설치
          pip install "numpy" "pandas" "scikit-learn==1.5.2" "scipy" "lightgbm" "xgboost" "joblib" "matplotlib" "pyarrow"
          # requirements.txt 가 존재하면 추가 설치
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          python - <<'PY'
          import numpy, pandas, sklearn
          print("OK:", numpy.__version__, pandas.__version__, sklearn.__version__)
          PY

      # 6) 백테스트 실행 (실패해도 아티팩트는 올리도록 플래그 저장)
      - name: Run backtest
        continue-on-error: true
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          TRAIN_START: ${{ env.TRAIN_START }}
          TRAIN_END:   ${{ env.TRAIN_END }}
          TEST_START:  ${{ env.TEST_START }}
          TEST_END:    ${{ env.TEST_END }}
          H:           ${{ env.H }}
          CSV_NAME:    ${{ env.CSV_NAME }}
        run: |
          set -euxo pipefail
          mkdir -p "$OUT_DIR"
          python run_4t.py \
            --data "data/$CSV_NAME" \
            --train_start "$TRAIN_START" --train_end "$TRAIN_END" \
            --test_start  "$TEST_START"  --test_end  "$TEST_END" \
            --H "$H" \
            --out_dir "$OUT_DIR" | tee "$OUT_DIR/run.log" || echo "PYTHON_FAILED=1" >> $GITHUB_ENV

          # 요약 JSON이 없으면 스텁 생성(업로드 실패 방지)
          python - <<'PY'
          import os, glob, json
          out = os.environ.get("OUT_DIR","_out_4t/github")
          pats = glob.glob(out+'/**/train_test_summary*.json', recursive=True)
          if not pats:
            os.makedirs(out, exist_ok=True)
            with open(os.path.join(out, "summary_stub.json"), "w") as f:
              json.dump({"note":"summary missing; see run.log", "out_dir": out}, f, indent=2)
          PY

      # 7) 산출물 업로드 (풀 SHA 고정)
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # upload-artifact v4.6.2
        with:
          name: _out_4t
          path: |
            _out_4t/github/**
            **/train_test_summary*.json
            **/logs/**

      # 8) 마지막에 실패 신호가 있으면 잡을 실패로 표시
      - name: Mark job failed if python failed
        if: env.PYTHON_FAILED == '1'
        run: |
          echo "❌ Backtest script reported failure (see artifacts run.log)."
          exit 1
