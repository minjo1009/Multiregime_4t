name: 4t-backtest

on:
  workflow_dispatch:
    inputs:
      train_start:
        description: "Train start (YYYY-MM-DD)"
        required: true
        default: "2025-01-01"
      train_end:
        description: "Train end (YYYY-MM-DD)"
        required: true
        default: "2025-04-30"
      test_start:
        description: "Test start (YYYY-MM-DD)"
        required: true
        default: "2025-05-01"
      test_end:
        description: "Test end (YYYY-MM-DD)"
        required: true
        default: "2025-06-30"
      H:
        description: "Forecast horizon (minutes)"
        required: true
        default: "5"
      fee_bps:
        description: "Fee in bps"
        required: false
        default: "1.0"

permissions:
  contents: write   # outputs 브랜치로 결과 push

jobs:
  backtest:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    env:
      TRAIN_START: ${{ github.event.inputs.train_start }}
      TRAIN_END:   ${{ github.event.inputs.train_end }}
      TEST_START:  ${{ github.event.inputs.test_start }}
      TEST_END:    ${{ github.event.inputs.test_end }}
      H:           ${{ github.event.inputs.H }}
      FEE_BPS:     ${{ github.event.inputs.fee_bps || '1.0' }}

    steps:
      - name: Clone current repository (no marketplace actions)
        shell: bash
        run: |
          set -euxo pipefail
          git config --global init.defaultBranch main
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions"
          git clone --depth 1 "https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}" .
          echo "Current path:"
          pwd
          ls -la

      - name: Unpack code & data
        shell: bash
        run: |
          set -euxo pipefail
          # 코드팩 파일명은 네가 올려둔 이름으로 맞춘다
          CODE_ZIP="trend4t_fix_full_hotfix.zip"
          [ -f "$CODE_ZIP" ] || CODE_ZIP="trend4t_fix_full.zip"
          unzip -o "$CODE_ZIP" -d .
          mkdir -p data

          # 데이터 압축이름과 위치 자동 인식
          if [ -f "ETHUSDT_1min_2020_2025.zip" ]; then
            unzip -o "ETHUSDT_1min_2020_2025.zip" -d data || true
          fi
          if [ -f "ETHUSDT_1min_2020_2025.csv" ] && [ ! -f "data/ETHUSDT_1min_2020_2025.csv" ]; then
            mv "ETHUSDT_1min_2020_2025.csv" "data/ETHUSDT_1min_2020_2025.csv"
          fi

          echo "Repo root:"
          ls -la
          echo "data/:"
          ls -la data || true
          echo "trend4p/:"
          ls -la trend4p

      - name: Setup Python (venv + pip)
        shell: bash
        run: |
          set -euxo pipefail
          python3 -V
          python3 -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip wheel setuptools
          # requirements.txt가 있으면 우선 설치
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt || true
          fi
          # 누락 대비 필수 패키지 보강
          pip install numpy pandas scikit-learn scipy joblib

      - name: Run 4t backtest
        shell: bash
        run: |
          set -euxo pipefail
          . .venv/bin/activate

          OUT_DIR="_out_4t/github"
          mkdir -p "${OUT_DIR}"

          DATA_CSV="data/ETHUSDT_1min_2020_2025.csv"
          if [ ! -f "${DATA_CSV}" ]; then
            echo "❌ Data CSV not found at ${DATA_CSV}"
            echo "현재 위치:" && pwd
            echo "루트 목록:" && ls -la
            echo "data/ 목록:" && ls -la data || true
            exit 3
          fi

          # 수익 관련 옵션을 run_4t.py가 받는다면 함께 넘겨라. (여기선 out_dir/H 중심)
          python run_4t.py \
            --data "${DATA_CSV}" \
            --train_start "${TRAIN_START}" --train_end "${TRAIN_END}" \
            --test_start  "${TEST_START}"  --test_end  "${TEST_END}" \
            --H "${H}" --out_dir "${OUT_DIR}" | tee "${OUT_DIR}/run.log"

          echo -e "### 4t Backtest outputs\n" >> "$GITHUB_STEP_SUMMARY"
          if [ -f "${OUT_DIR}/train_test_summary.json" ]; then
            echo -e "\n\`\`\`json" >> "$GITHUB_STEP_SUMMARY"
            cat "${OUT_DIR}/train_test_summary.json" >> "$GITHUB_STEP_SUMMARY"
            echo -e "\n\`\`\`" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No train_test_summary.json generated." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Commit outputs to 'outputs' branch (no actions/artifacts)
        if: always()
        shell: bash
        run: |
          set -euxo pipefail
          git checkout -B outputs
          git add _out_4t/github || true
          git commit -m "Add 4t backtest outputs $(date -u +%Y%m%d-%H%M%S)" || true
          git push -f "https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}" outputs
