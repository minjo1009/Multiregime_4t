name: 4t-backtest

on:
  workflow_dispatch:
    inputs:
      train_start:
        description: Train start (UTC, YYYY-MM-DD)
        required: true
        default: "2025-01-01"
      train_end:
        description: Train end
        required: true
        default: "2025-04-30"
      test_start:
        description: Test start
        required: true
        default: "2025-05-01"
      test_end:
        description: Test end
        required: true
        default: "2025-06-30"

jobs:
  backtest:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # 1) Checkout (pinned full SHA)
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a107f1f871

      # 2) Setup Python 3.11 (pinned)
      - name: Setup Python
        uses: actions/setup-python@5ffd6e94f9a7b3e83d30db4f2f1825d6dedf0d1f
        with:
          python-version: '3.11'

      # 3) Cache pip (pinned)
      - name: Cache pip
        uses: actions/cache@3624ceb22c1c5a301c8db4169662070a689d9ea8
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4) Install deps (requirements.txt가 없더라도 필수 최소 패키지 강제 설치)
      - name: Install Python deps
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f trend4p/requirements.txt ]; then
            pip install -r trend4p/requirements.txt
          else
            # 최소 필수 (trend4t 코드가 사용하는 표준 스택)
            pip install numpy pandas scipy scikit-learn joblib
          fi

      # 5) Prepare workspace: unzip code/data, 표준 위치로 정규화, 출력폴더 준비
      - name: Prepare code & data
        run: |
          set -euxo pipefail
          mkdir -p data _out_4t/github/logs

          # 코드팩 해제 (리포 루트에 있는 trend4t_fix_full.zip)
          CODE_ZIP="trend4t_fix_full.zip"
          if [ ! -f "$CODE_ZIP" ]; then
            echo "❌ Code pack not found at repo root: $CODE_ZIP"; exit 2
          fi
          unzip -o "$CODE_ZIP" -d .

          # 데이터 ZIP 해제 + CSV 이름 정규화
          # (리포 루트에 ETHUSDT_1min_2020_2025.zip 가정)
          DATA_ZIP="ETHUSDT_1min_2020_2025.zip"
          if [ -f "$DATA_ZIP" ]; then
            CSV_IN_ZIP="$(unzip -Z1 "$DATA_ZIP" | grep -i '\.csv$' | head -n1 || true)"
            if [ -z "$CSV_IN_ZIP" ]; then
              echo "❌ No CSV found inside $DATA_ZIP"; exit 3
            fi
            unzip -o "$DATA_ZIP" "$CSV_IN_ZIP" -d data/
            if [ "$CSV_IN_ZIP" != "ETHUSDT_1min_2020_2025.csv" ]; then
              mv -f "data/$CSV_IN_ZIP" "data/ETHUSDT_1min_2020_2025.csv"
            fi
          else
            # 혹시 CSV를 루트에 직접 올렸다면 data/ 로 이동
            if [ -f "ETHUSDT_1min_2020_2025.csv" ]; then
              mv -f ETHUSDT_1min_2020_2025.csv data/
            fi
          fi

          # 최종 데이터 존재 확인
          if [ ! -f "data/ETHUSDT_1min_2020_2025.csv" ]; then
            echo "❌ Data CSV not found: data/ETHUSDT_1min_2020_2025.csv"; exit 4
          fi

          echo "== Repo root =="
          ls -la
          echo "== data =="
          ls -la data
          echo "== trend4p =="
          ls -la trend4p || true

      # 6) Run backtest (run_4t.py 진입점, --out_dir/--outdir 모두 대응)
      - name: Run backtest
        id: runbt
        continue-on-error: true
        env:
          TRAIN_S: ${{ github.event.inputs.train_start }}
          TRAIN_E: ${{ github.event.inputs.train_end }}
          TEST_S:  ${{ github.event.inputs.test_start  }}
          TEST_E:  ${{ github.event.inputs.test_end    }}
        run: |
          set -euxo pipefail
          echo "Python version:"
          python -V
          python -c "import numpy, pandas, sklearn, scipy; print('numpy', numpy.__version__, 'pandas', pandas.__version__)"

          # 우선 --out_dir 시도
          set +e
          python run_4t.py \
            --data data/ETHUSDT_1min_2020_2025.csv \
            --train_start "$TRAIN_S" --train_end "$TRAIN_E" \
            --test_start "$TEST_S"   --test_end  "$TEST_E" \
            --out_dir _out_4t/github 2>&1 | tee _out_4t/github/logs/backtest_stdout.try1.txt
          RT=$?
          set -e

          if [ $RT -ne 0 ]; then
            echo "First attempt failed with --out_dir. Trying --outdir ..."
            set +e
            python run_4t.py \
              --data data/ETHUSDT_1min_2020_2025.csv \
              --train_start "$TRAIN_S" --train_end "$TRAIN_E" \
              --test_start "$TEST_S"   --test_end  "$TEST_E" \
              --outdir _out_4t/github 2>&1 | tee _out_4t/github/logs/backtest_stdout.try2.txt
            RT=$?
            set -e
          fi

          echo "Exit code: $RT" | tee _out_4t/github/logs/exit_code.txt

          # 요약 JSON이 없으면 stdout에서 최소 요약 생성(방어)
          if [ ! -s "_out_4t/github/train_test_summary.json" ]; then
            python - <<'PY'
import json, re, pathlib
out = pathlib.Path("_out_4t/github/train_test_summary.json")
log = pathlib.Path("_out_4t/github/logs")
cand = list(log.glob("backtest_stdout.try*.txt"))
data = {"note":"auto-extracted summary (fallback)"}
if cand:
    s = cand[-1].read_text(errors="ignore")
    def grab(key):
        m = re.search(rf'"?{key}"?\s*:\s*([0-9\.\-eE]+)', s)
        return float(m.group(1)) if m else None
    for k in ["coverage","acc","mcc","total_return","monthly_return","H","n_trades","regime_gate_rate","edge"]:
        v = grab(k)
        if v is not None: data[k] = v
out.write_text(json.dumps(data, ensure_ascii=False, indent=2))
PY
          fi

          # 최종 종료코드 반영
          exit $RT

      # 7) Upload artifacts (pinned)
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8
        with:
          name: out_4t_${{ github.run_id }}
          path: |
            "_out_4t/github/**"
            "**/train_test_summary*.json"
            "**/logs/**"
          if-no-files-found: warn
