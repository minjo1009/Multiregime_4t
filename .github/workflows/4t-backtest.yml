name: 4u Backtest (pure bash)

on:
  workflow_dispatch:
    inputs:
      data_csv:
        description: '데이터 CSV 경로 (예: data/ETHUSDT_1min_2020_2025.csv). 비우면 자동 탐색'
        required: false
        default: ''
      train_start:
        description: '훈련 시작 (YYYY-MM-DD)'
        required: false
        default: '2020-01-01'
      train_end:
        description: '훈련 종료 (YYYY-MM-DD)'
        required: false
        default: '2024-01-01'
      test_start:
        description: '테스트 시작 (YYYY-MM-DD)'
        required: false
        default: '2024-01-01'
      test_end:
        description: '테스트 종료 (YYYY-MM-DD)'
        required: false
        default: '2025-01-01'
      run_args:
        description: '추가 인수 (옵션: --fee_bps, --cov_low, --cov_high 등)'
        required: false
        default: ''
      results_branch:
        description: '결과 커밋 브랜치'
        required: false
        default: 'backtest-results'

permissions:
  contents: write

jobs:
  backtest:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      SRC_DIR: ${{ github.workspace }}/src
      DATA_DIR: ${{ github.workspace }}/data
      OUT_DIR:  ${{ github.workspace }}/_out
      LOG_DIR:  ${{ github.workspace }}/_logs
      RESULTS_BRANCH: ${{ inputs.results_branch }}
    steps:
      - name: Checkout (no external action)
        shell: bash
        env:
          REPO: ${{ github.repository }}
          SHA:  ${{ github.sha }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -Eeuo pipefail
          mkdir -p "$LOG_DIR"
          echo "Repo: $REPO" | tee -a "$LOG_DIR/context.txt"
          echo "SHA : $SHA"  | tee -a "$LOG_DIR/context.txt"
          echo "TZ  : $TZ"   | tee -a "$LOG_DIR/context.txt"
          git init
          git remote add origin "https://x-access-token:${TOKEN}@github.com/${REPO}.git"
          git -c protocol.version=2 fetch --depth=1 origin "$SHA"
          git checkout --force FETCH_HEAD

      - name: Prepare folders
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "$SRC_DIR" "$DATA_DIR" "$OUT_DIR" "$LOG_DIR"
          ls -la > "$LOG_DIR/root_ls.txt" || true

      - name: Unpack code (trend4u.zip) → src/
        shell: bash
        run: |
          set -Eeuo pipefail
          if [[ -f trend4u.zip ]]; then
            rm -rf _code_tmp && mkdir -p _code_tmp
            unzip -q trend4u.zip -d _code_tmp
            if [[ -d _code_tmp/trend4u ]]; then
              rsync -a _code_tmp/trend4u/ "$SRC_DIR"/trend4u/
            elif [[ -d _code_tmp/src ]]; then
              rsync -a _code_tmp/src/ "$SRC_DIR"/
            else
              rsync -a _code_tmp/ "$SRC_DIR"/
            fi
            rm -rf _code_tmp
          elif [[ -d src ]]; then
            rsync -a src/ "$SRC_DIR"/
          elif [[ -d trend4u ]]; then
            rsync -a trend4u/ "$SRC_DIR"/trend4u/
          else
            echo "::error::trend4u.zip, src/, trend4u/ 중 아무것도 없음"
            exit 1
          fi
          # 과거 zip 일부에서 있었던 ". __all__" 문법오류가 있을 때만 교정 (팩 자체 내용은 유지)
          INIT="$SRC_DIR/trend4u/trend4p/__init__.py"
          if [[ -f "$INIT" ]] && grep -q '^[[:space:]]*\.[[:space:]]*__all__' "$INIT"; then
            sed -i '1s/^[[:space:]]*\.[[:space:]]*__all__/__all__/' "$INIT" || true
          fi
          (cd "$SRC_DIR" && find . -maxdepth 3 -type f | sort) > "$LOG_DIR/src_tree.txt" || true

      - name: Prepare data (ETHUSDT_1min_2020_2025.zip or CSV)
        shell: bash
        run: |
          set -Eeuo pipefail
          if [[ -f ETHUSDT_1min_2020_2025.zip ]]; then
            unzip -q ETHUSDT_1min_2020_2025.zip -d "$DATA_DIR"
          fi
          # 루트에 있는 CSV도 복사
          shopt -s nullglob
          CSVS=( *.csv )
          if [[ ${#CSVS[@]} -gt 0 ]]; then
            cp -f "${CSVS[@]}" "$DATA_DIR"/
          fi
          (cd "$DATA_DIR" && ls -la || true) | tee -a "$LOG_DIR/steps.txt"

      - name: Install deps (python3 -m pip)
        shell: bash
        run: |
          set -Eeuo pipefail
          python3 --version | tee -a "$LOG_DIR/versions.txt"
          if [[ -f requirements.txt ]]; then
            python3 -m pip install --upgrade pip
            python3 -m pip install -r requirements.txt
          elif [[ -f "$SRC_DIR/requirements.txt" ]]; then
            python3 -m pip install --upgrade pip
            python3 -m pip install -r "$SRC_DIR/requirements.txt"
          elif [[ -f pyproject.toml ]]; then
            python3 -m pip install --upgrade pip
            python3 -m pip install .
          else
            python3 -m pip install --upgrade pip
            python3 -m pip install numpy pandas matplotlib ta scikit-learn python-dateutil pytz
          fi

      - name: Run backtest
        shell: bash
        env:
          DATA_DIR: ${{ github.workspace }}/data
          OUT_DIR:  ${{ github.workspace }}/_out
        run: |
          set -Eeuo pipefail
          export PYTHONPATH="${PYTHONPATH:-${GITHUB_WORKSPACE}/src}:${GITHUB_WORKSPACE}/src/trend4u"
          echo "PYTHONPATH=$PYTHONPATH" | tee -a "$LOG_DIR/steps.txt"

          # 1) 데이터 CSV 결정: 입력 > 존재 검사 > 자동 탐색
          CSV_IN="${{ inputs.data_csv }}"
          if [[ -n "$CSV_IN" ]]; then
            DATA_CSV="$CSV_IN"
          else
            DATA_CSV="$(find "$DATA_DIR" -type f -name '*.csv' | head -n1 || true)"
          fi
          if [[ -z "${DATA_CSV:-}" || ! -f "$DATA_CSV" ]]; then
            echo "::error::CSV 데이터를 찾지 못했습니다. data/ 이하에 CSV가 있어야 합니다."
            find "$DATA_DIR" -maxdepth 2 -type f -name '*.csv' || true
            exit 2
          fi

          # 2) 날짜 인수 구성 (입력 없으면 기본값 사용)
          TR_S="${{ inputs.train_start }}"
          TR_E="${{ inputs.train_end }}"
          TE_S="${{ inputs.test_start }}"
          TE_E="${{ inputs.test_end }}"

          # 3) 실행
          set +e
          python3 -m trend4u.run_4u \
            --data "$DATA_CSV" \
            --train_start "$TR_S" --train_end "$TR_E" \
            --test_start "$TE_S"  --test_end "$TE_E" \
            ${{ inputs.run_args }} \
            2>&1 | tee "$LOG_DIR/backtest_stdout.txt"
          rc=${PIPESTATUS[0]}
          set -e
          echo "exit_code=$rc" | tee -a "$LOG_DIR/steps.txt"
          echo "$rc" > "$LOG_DIR/exit_code.txt"

      - name: Collect artifacts → _out/
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "$OUT_DIR"
          find "$GITHUB_WORKSPACE" -maxdepth 3 -type f \( \
            -name 'train_test_summary.json' -o \
            -name 'backtest_summary.json' -o \
            -name 'equity_curve*.csv' -o \
            -name 'trades*.csv' -o \
            -name 'report*.html' -o \
            -name 'fig_*.png' \
          \) -print0 | while IFS= read -r -d '' p; do cp "$p" "$OUT_DIR"/ || true; done
          (cd "$OUT_DIR" && ls -la || true) > "$LOG_DIR/out_tree.txt" || true

      - name: Publish results to branch (no external action)
        if: always()
        shell: bash
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -Eeuo pipefail
          BR="$RESULTS_BRANCH"
          RUN_DIR="_runs/${GITHUB_RUN_ID}"
          TMP="$(mktemp -d)"
          mkdir -p "$TMP/${RUN_DIR}"
          rsync -a "$OUT_DIR"/ "$TMP/${RUN_DIR}/" || true
          rsync -a "$LOG_DIR"/ "$TMP/${RUN_DIR}/logs/" || true
          ( cd "$TMP"
            git init
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git remote add origin "https://x-access-token:${TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
            git fetch origin "$BR" || true
            git checkout -B "$BR"
            git add .
            git commit -m "Backtest run ${GITHUB_RUN_ID} (SHA ${GITHUB_SHA})" || true
            git push -f origin "$BR"
          )
          echo "pushed: $BR / $RUN_DIR" | tee -a "$LOG_DIR/steps.txt"

      - name: Job summary
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          {
            echo "## 4u Backtest — Summary"
            if [[ -f "$OUT_DIR/train_test_summary.json" ]]; then
              echo ""
              echo "\`\`\`json"; sed -n '1,200p' "$OUT_DIR/train_test_summary.json"; echo "\`\`\`"
            else
              echo "- No train_test_summary.json generated."
            fi
            echo ""
            echo "### Logs"
            echo "- **context.txt**";  echo '```'; sed -n '1,120p' "$LOG_DIR/context.txt" 2>/dev/null; echo '```'
            echo "- **exit_code**: $(cat "$LOG_DIR/exit_code.txt" 2>/dev/null || echo 'n/a')"
          } >> "$GITHUB_STEP_SUMMARY"