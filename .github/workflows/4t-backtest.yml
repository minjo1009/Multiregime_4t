name: ETH Backtest (trend4u.zip + 1min data)

on:
  workflow_dispatch:
    inputs:
      backtest_args:
        description: "추가 백테스트 인자 (예: --from 2023-01-01 --to 2025-08-01)"
        required: false
        default: ""
  push:
    branches: [ main, master ]
    paths:
      - 'trend4u.zip'
      - '*.zip'
      - '.github/workflows/eth-backtest.yml'
      - 'requirements.txt'

permissions:
  contents: read

concurrency:
  group: eth-backtest-${{ github.ref }}
  cancel-in-progress: false

jobs:
  backtest:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    env:
      CODE_ZIP: trend4u.zip
      DATA_ZIP_GLOB: '*ETH*1min*.zip'
      FALLBACK_REQS: 'numpy pandas matplotlib ta ccxt backtrader scipy statsmodels'
      PYTHON_VERSION: '3.11'
      OUTDIR: runs/outputs
      LOGDIR: runs/logs

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: false

      - name: Validate required ZIPs exist
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f "$CODE_ZIP" ]]; then
            echo "::error title=Missing code zip::trend4u.zip not found at repo root."
            exit 1
          fi
          # 데이터 ZIP은 파일명이 다를 수 있으므로 glob로 검색
          DATA_ZIP=$(ls $DATA_ZIP_GLOB 2>/dev/null | head -n1 || true)
          if [[ -z "${DATA_ZIP}" ]]; then
            echo "::error title=Missing data zip::No ETH 1-min data zip found (pattern: $DATA_ZIP_GLOB)."
            exit 1
          fi
          echo "DATA_ZIP=${DATA_ZIP}" >> $GITHUB_ENV

      - name: Show ZIP sizes (GitHub 100MB 제한 점검)
        shell: bash
        run: |
          ls -lh "$CODE_ZIP" "${DATA_ZIP}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Unzip code & data
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p work/code work/data
          # code
          bsdtar -xf "$CODE_ZIP" -C work/code
          # data
          bsdtar -xf "${DATA_ZIP}" -C work/data
          echo "CODE_ROOT=$(realpath work/code)" >> $GITHUB_ENV
          echo "DATA_ROOT=$(realpath work/data)" >> $GITHUB_ENV

      - name: Locate entry script
        id: entry
        shell: bash
        run: |
          set -euo pipefail
          cd "$CODE_ROOT"
          # 우선순위: run_backtest.py > backtest.py > main.py > any *backtest*.py
          CAND=""
          for f in run_backtest.py backtest.py main.py; do
            [[ -f "$f" ]] && { CAND="$f"; break; }
          done
          if [[ -z "$CAND" ]]; then
            CAND=$(ls -1 **/*backtest*.py 2>/dev/null | head -n1 || true)
          fi
          if [[ -z "$CAND" ]]; then
            echo "::error title=Entry script not found::Could not locate backtest entry script. Ensure your zip contains run_backtest.py or backtest.py."
            echo "found_tree:"
            ls -R .
            exit 1
          fi
          echo "ENTRY=$CAND" >> $GITHUB_OUTPUT
          echo "ENTRY_ABS=$(realpath "$CAND")" >> $GITHUB_ENV

      - name: Prepare output folders
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$OUTDIR" "$LOGDIR"

      - name: Install requirements (auto-fallback)
        shell: bash
        working-directory: ${{ env.CODE_ROOT }}
        run: |
          set -euo pipefail
          if [[ -f requirements.txt ]]; then
            echo "Installing from requirements.txt"
            python -m pip install -U pip
            python -m pip install -r requirements.txt
          else
            echo "requirements.txt not found. Installing fallback set:"
            python -m pip install -U pip
            python -m pip install $FALLBACK_REQS
          fi

      - name: Export PYTHONPATH
        shell: bash
        run: |
          echo "PYTHONPATH=${PYTHONPATH}:${CODE_ROOT}" >> $GITHUB_ENV

      - name: Run backtest
        shell: bash
        working-directory: ${{ env.CODE_ROOT }}
        run: |
          set -euo pipefail
          echo "== Entry: $ENTRY_ABS =="
          echo "== Data root: $DATA_ROOT =="
          ARGS="${{ github.event.inputs.backtest_args }}"
          LOG="${LOGDIR}/backtest_$(date +%Y%m%d_%H%M%S).log"
          # 환경변수로 데이터 경로 전달 (코드에서 읽을 수 있도록 일반적인 이름도 함께 제공)
          export DATA_DIR="$DATA_ROOT"
          export ETH_1MIN_DIR="$DATA_ROOT"
          echo "Running: python \"$ENTRY_ABS\" $ARGS"
          python "$ENTRY_ABS" $ARGS 2>&1 | tee "$LOG"
          # 관례적으로 결과 디렉토리 검색 후 OUTDIR로 모읍니다.
          # 결과물 예상 경로들: results, output, outputs, reports, figs, charts, logs
          for d in results output outputs reports figs charts logs metrics; do
            [[ -d "$d" ]] && rsync -a "$d"/ "$GITHUB_WORKSPACE/$OUTDIR"/"$d"/
          done
          # PNG/CSV/JSON 등 흩어진 결과물도 수집
          find . -maxdepth 3 -type f \( -iname '*.png' -o -iname '*.csv' -o -iname '*.json' -o -iname '*.html' \) -print0 | xargs -0 -I{} bash -c 'dst="${GITHUB_WORKSPACE}/${OUTDIR}/misc"; mkdir -p "$dst"; cp -f "{}" "$dst"/'
          # 로그 복사
          cp -f "$LOG" "$GITHUB_WORKSPACE/$LOGDIR"/

      - name: Summarize
        if: always()
        shell: bash
        run: |
          echo "## Backtest Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Code zip: \`${CODE_ZIP}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Data zip: \`${DATA_ZIP}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Entry script: \`${{ steps.entry.outputs.ENTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Outputs dir: \`${OUTDIR}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifact preview (first 10 files)" >> $GITHUB_STEP_SUMMARY
          find "${OUTDIR}" -type f | head -n 10 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Logs" >> $GITHUB_STEP_SUMMARY
          echo "- Stored at \`${LOGDIR}\` and in the uploaded artifact." >> $GITHUB_STEP_SUMMARY

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backtest-artifacts
          path: |
            ${{ env.OUTDIR }}/
            ${{ env.LOGDIR }}/
          if-no-files-found: warn
          retention-days: 14
