name: trade4v run (v3.3 + diagnostics)

on:
  workflow_dispatch:
    inputs:
      train_start: { description: "훈련 시작(UTC)", required: true, default: "2025-01-01 00:00:00" }
      train_end:   { description: "훈련 종료(UTC)", required: true, default: "2025-04-30 23:59:00" }
      test_start:  { description: "테스트 시작(UTC)", required: true, default: "2025-05-01 00:00:00" }
      test_end:    { description: "테스트 종료(UTC)", required: true, default: "2025-06-30 23:59:00" }
      H:           { description: "예측지평(분)", required: true, default: "15" }
      fee_bps:     { description: "수수료(bp)", required: true, default: "1.0" }
      slip_bps:    { description: "슬리피지(bp)", required: true, default: "0.5" }
      ev_margin_bps: { description: "EV 마진(bp) (예비)", required: true, default: "1.0" }
      K_day:       { description: "일별 Top-K 맵 (rid:K,...)", required: true, default: "0:10,1:15,2:30" }

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v5.0.0

      - name: Setup Python 3.11
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        with:
          python-version: "3.11"

      - name: Install deps (minimal)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import sys, subprocess
          subprocess.check_call([sys.executable,"-m","pip","install","-q","--upgrade","pip","setuptools","wheel"])
          base=["numpy","pandas","pyarrow","scipy","scikit-learn","statsmodels"]
          subprocess.check_call([sys.executable,"-m","pip","install","-q",*base])
          PY

      # === 여기서 중첩 trade4v/trade4v 폴더를 자동 평탄화 ===
      - name: Unzip project (with re-root)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p __extracted
          if [ -f trade4v.zip ]; then
            unzip -o -q trade4v.zip -d __extracted
          fi
          # 케이스1: __extracted/trade4v/run_4u.py
          if [ -f "__extracted/trade4v/run_4u.py" ]; then
            rm -rf trade4v || true
            mv __extracted/trade4v ./trade4v
          # 케이스2: __extracted/trade4v/trade4v/run_4u.py (중첩)
          elif [ -f "__extracted/trade4v/trade4v/run_4u.py" ]; then
            rm -rf trade4v || true
            mv __extracted/trade4v/trade4v ./trade4v
          # 케이스3: 루트에 run_4u.py만 있을 때
          elif [ -f "__extracted/run_4u.py" ]; then
            rm -rf trade4v || true
            mkdir -p trade4v
            mv __extracted/* trade4v/
          fi
          # 마지막 안전망: run_4u.py가 어디에 있든 패키지 루트 찾아서 trade4v로 맞춤
          if [ ! -f "trade4v/run_4u.py" ]; then
            FOUND=$(find __extracted -maxdepth 3 -type f -name "run_4u.py" | head -n1 || true)
            if [ -n "$FOUND" ]; then
              ROOT=$(dirname "$FOUND")
              rm -rf trade4v || true
              mkdir -p trade4v
              cp -R "$ROOT"/. trade4v/
            fi
          fi
          # 최종 확인
          test -f trade4v/run_4u.py || { echo "FATAL: run_4u.py not found"; find . -maxdepth 4 -name run_4u.py; exit 2; }

      - name: Prepare ETH 1m data
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          CSV=$(ls -1 data/*.csv 2>/dev/null | head -n1 || true)
          if [ -z "${CSV}" ] && ls -1 *.zip 2>/dev/null | grep -q 'ETHUSDT_1min_'; then
            ZIP=$(ls -1 ETHUSDT_1min_*.zip | head -n1)
            unzip -o -q "$ZIP" -d data
            CSV=$(ls -1 data/*.csv | head -n1)
          fi
          if [ -z "${CSV}" ] && ls -1 *.csv 2>/dev/null | grep -q 'ETHUSDT_1min_'; then
            CSV=$(ls -1 ETHUSDT_1min_*.csv | head -n1)
            mv "$CSV" data/
            CSV="data/$(basename "$CSV")"
          fi
          if [ -z "${CSV}" ]; then
            echo "ERROR: CSV 데이터가 필요합니다 (예: data/ETHUSDT_1min_2020_2025.csv)"; exit 2
          fi
          echo "Using CSV: ${CSV}"
          python - "$CSV" <<'PY'
          import sys, pandas as pd
          p=sys.argv[1]
          df=pd.read_csv(p)
          rn={}
          for k in list(df.columns):
            kl=k.strip().lower()
            if kl in ("open time","opentime","time","timestamp"): rn[k]="open_time"
            elif kl=="open": rn[k]="open"
            elif kl=="high": rn[k]="high"
            elif kl=="low": rn[k]="low"
            elif kl in ("close","close price","price"): rn[k]="close"
            elif kl in ("volume","vol"): rn[k]="volume"
          if rn: df=df.rename(columns=rn)
          if "open_time" not in df.columns: raise SystemExit("open_time 컬럼이 필요합니다.")
          df.to_csv("normalized.csv", index=False)
          PY

      # === 패키지 루트 자동 검출 후 실행 (경로/중첩 방어) ===
      - name: Run backtest (v3.3, capture logs)
        shell: bash
        env:
          CSV: normalized.csv
          TRAIN_S: ${{ inputs.train_start }}
          TRAIN_E: ${{ inputs.train_end }}
          TEST_S:  ${{ inputs.test_start }}
          TEST_E:  ${{ inputs.test_end }}
          H:       ${{ inputs.H }}
          FEE:     ${{ inputs.fee_bps }}
          SLIP:    ${{ inputs.slip_bps }}
          KDAY:    ${{ inputs.K_day }}
          OUT:     _out_4u
          QTP: "0.90"
          QSL: "0.60"
          OVERLAP_MODE: "cap"
          MAX_CONC: "2"
          MIN_GAP: "5"
          STRICT_QA: "0"
          PYTHONFAULTHANDLER: "1"
        run: |
          set -euo pipefail
          mkdir -p "$OUT/run"
          # 패키지 루트 탐지
          PKGROOT=$(dirname "$(find trade4v -type f -name run_4u.py | head -n1)")
          echo "PKGROOT=$PKGROOT"
          export PYTHONPATH="$PKGROOT:$(pwd)"
          set +e
          python -u "$PKGROOT/run_4u.py" \
            --data "$CSV" \
            --train_start "$TRAIN_S" --train_end "$TRAIN_E" \
            --test_start "$TEST_S"   --test_end "$TEST_E" \
            --H "$H" \
            --fee_bps "$FEE" --slip_bps "$SLIP" \
            --K_day "$KDAY" \
            --q_tp "$QTP" --q_sl "$QSL" \
            --overlap_mode "$OVERLAP_MODE" --max_concurrent "$MAX_CONC" --min_gap_bars "$MIN_GAP" \
            --strict_qa "$STRICT_QA" \
            --out_dir "$OUT" \
          2>&1 | tee "$OUT/run/run.log"
          RC=${PIPESTATUS[0]}
          echo "[backtest-exit-code] $RC" | tee -a "$OUT/run/run.log"
          # 실패해도 다음 단계(진단)는 실행
          exit 0

      - name: Run diagnostics (best-effort)
        if: always()
        shell: bash
        env:
          KDAY:    ${{ inputs.K_day }}
          H:       ${{ inputs.H }}
        run: |
          set -euo pipefail
          PKGROOT=$(dirname "$(find trade4v -type f -name run_4u.py | head -n1)")
          export PYTHONPATH="$PKGROOT:$(pwd)"
          if [ -f "_out_4u/run/preds_test.csv" ]; then
            python -m trade4v.diag.run_diag \
              --preds _out_4u/run/preds_test.csv \
              --metrics _out_4u/run/metrics_oos.json \
              --k_day "$KDAY" --H "$H" || true
          else
            echo "no preds_test.csv, diagnostics skipped" | tee -a _out_4u/run/run.log
          fi

      - name: Upload outputs
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: _out_4u
          path: |
            _out_4u/**
            !**/__pycache__/**