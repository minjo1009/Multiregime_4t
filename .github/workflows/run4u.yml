name: trade4v run (v3.3.1 + diagnostics; PR-safe)

on:
  workflow_dispatch:
    inputs:
      train_start: { description: "훈련 시작(UTC)", required: true, default: "2025-01-01 00:00:00" }
      train_end:   { description: "훈련 종료(UTC)", required: true, default: "2025-04-30 23:59:00" }
      test_start:  { description: "테스트 시작(UTC)", required: true, default: "2025-05-01 00:00:00" }
      test_end:    { description: "테스트 종료(UTC)", required: true, default: "2025-06-30 23:59:00" }
      H:           { description: "예측지평(분)", required: true, default: "15" }
      fee_bps:     { description: "수수료(bp)", required: true, default: "1.0" }
      slip_bps:    { description: "슬리피지(bp)", required: true, default: "0.5" }
      ev_margin_bps: { description: "EV 마진(bp) (예비)", required: true, default: "1.0" }
      K_day:       { description: "일별 Top-K 맵 (rid:K,...)", required: true, default: "0:10,1:15,2:30" }

  pull_request:
    branches: [ main ]
    paths:
      - ".github/workflows/run4u.yml"
      - "trade4v.zip"
      - "data/**"

concurrency:
  group: trade4v-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # PR에서도 통과시키는 아주 가벼운 검증 잡
  preflight:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v5.0.0
      - name: Sanity
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          test -f .github/workflows/run4u.yml && echo "YAML present ✅"
          echo "Preflight OK."

  # 실제 백테스트는 '수동 실행'일 때만 돌린다
  backtest:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs: preflight
    permissions:
      contents: read
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332

      - name: Setup Python 3.11
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"

      - name: Install deps (minimal)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import sys, subprocess
          subprocess.check_call([sys.executable,"-m","pip","install","-q","--upgrade","pip","setuptools","wheel"])
          base = ["numpy","pandas","pyarrow","scipy","scikit-learn","statsmodels"]
          subprocess.check_call([sys.executable,"-m","pip","install","-q", *base])
          PY

      - name: Unzip project (robust flatten)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p __extracted
          if [ -f trade4v.zip ]; then unzip -o -q trade4v.zip -d __extracted; fi
          ROOT=""
          for d in __extracted/trade4v __extracted ./trade4v . ; do
            if [ -f "$d/trade4v/run_4u.py" ]; then ROOT="$d/trade4v"; break; fi
            if [ -f "$d/run_4u.py" ]; then ROOT="$d"; break; fi
            if [ -d "$d/trade4v" ] && [ -f "$d/trade4v/run_4u.py" ]; then ROOT="$d/trade4v"; break; fi
          done
          rm -rf trade4v || true
          if [ -n "${ROOT}" ]; then
            if [ -d "${ROOT}/trade4v" ]; then
              mkdir -p trade4v; shopt -s dotglob
              mv "${ROOT}/trade4v"/* trade4v/ || true
            else
              cp -r "${ROOT}" ./trade4v
            fi
          fi
          if [ -d trade4v/trade4v ]; then
            shopt -s dotglob; mv trade4v/trade4v/* trade4v/; rmdir trade4v/trade4v
          fi
          test -f trade4v/run_4u.py || { echo "run_4u.py not found after flatten"; ls -R; exit 2; }
          ls -al trade4v | head -n 50

      - name: Hotfix v3.3.1 (unique session labels)
        shell: bash
        run: |
          set -euo pipefail
          patch_one () {
            local P="$1"
            if [ -f "$P" ]; then
              python - "$P" <<'PY'
import sys, re, pathlib
p = pathlib.Path(sys.argv[1])
s = p.read_text(encoding="utf-8")
s = re.sub(
    r"sess\s*=\s*pd\.cut\(\s*hr\s*,\s*bins=\[[^\]]+\]\s*,\s*labels=\[[^\]]+\]\s*,\s*include_lowest=True\)\.astype\(int\)",
    "sess = pd.cut(hr, bins=[-1,7,13,24], labels=[0,1,2], include_lowest=True).astype(int)",
    s, flags=re.S
)
p.write_text(s, encoding="utf-8")
print(f"[patched] {p}")
PY
            fi
          }
          patch_one trade4v/trend4p/utils.py
          patch_one trade4v/trade4v/trend4p/utils.py

      - name: Prepare ETH 1m data (normalize headers)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          CSV=$(ls -1 data/*.csv 2>/dev/null | head -n1 || true)
          if [ -z "${CSV}" ] && ls -1 *.zip 2>/dev/null | grep -q 'ETHUSDT_1min_'; then
            ZIP=$(ls -1 ETHUSDT_1min_*.zip | head -n1)
            unzip -o -q "$ZIP" -d data
            CSV=$(ls -1 data/*.csv | head -n1)
          fi
          if [ -z "${CSV}" ] && ls -1 *.csv 2>/dev/null | grep -q 'ETHUSDT_1min_'; then
            CSV=$(ls -1 ETHUSDT_1min_*.csv | head -n1); mv "$CSV" data/; CSV="data/$(basename "$CSV")"
          fi
          if [ -z "${CSV}" ]; then echo "ERROR: CSV 필요(data/ETHUSDT_1min_*.csv)"; exit 2; fi
          echo "Using CSV: ${CSV}"
          python - "$CSV" <<'PY'
          import sys, pandas as pd
          p=sys.argv[1]; df=pd.read_csv(p)
          rename={}
          for k in list(df.columns):
            kl=k.strip().lower()
            if kl in ("open time","opentime","time","timestamp"): rename[k]="open_time"
            elif kl=="open":  rename[k]="open"
            elif kl=="high":  rename[k]="high"
            elif kl=="low":   rename[k]="low"
            elif kl in ("close","close price","price"): rename[k]="close"
            elif kl in ("volume","vol"): rename[k]="volume"
          if rename: df=df.rename(columns=rename)
          if "open_time" not in df.columns: raise SystemExit("open_time 컬럼이 필요합니다.")
          df.to_csv("normalized.csv", index=False)
          PY

      - name: Run backtest (v3.3.1)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}/trade4v:${{ github.workspace }}
          CSV: normalized.csv
          TRAIN_S: ${{ inputs.train_start }}
          TRAIN_E: ${{ inputs.train_end }}
          TEST_S:  ${{ inputs.test_start }}
          TEST_E:  ${{ inputs.test_end }}
          H:       ${{ inputs.H }}
          FEE:     ${{ inputs.fee_bps }}
          SLIP:    ${{ inputs.slip_bps }}
          KDAY:    ${{ inputs.K_day }}
          OUT:     _out_4u
          QTP: "0.90"
          QSL: "0.60"
          OVERLAP_MODE: "cap"
          MAX_CONC: "2"
          MIN_GAP: "5"
          STRICT_QA: "0"
        run: |
          set -euo pipefail
          mkdir -p "$OUT"
          PY=trade4v/run_4u.py; [ -f "$PY" ] || PY=trade4v/trade4v/run_4u.py
          [ -f "$PY" ] || { echo "run_4u.py not found"; ls -R; exit 2; }
          echo "Using script: $PY"
          python "$PY" \
            --data "$CSV" \
            --train_start "$TRAIN_S" --train_end "$TRAIN_E" \
            --test_start "$TEST_S"   --test_end "$TEST_E" \
            --H "$H" \
            --fee_bps "$FEE" --slip_bps "$SLIP" \
            --K_day "$KDAY" \
            --q_tp "$QTP" --q_sl "$QSL" \
            --overlap_mode "$OVERLAP_MODE" --max_concurrent "$MAX_CONC" --min_gap_bars "$MIN_GAP" \
            --strict_qa "$STRICT_QA" \
            --out_dir "$OUT"
          ls -al "$OUT" || true
          ls -al "$OUT/run" || true

      - name: Run diagnostics (S1/S2/gating)
        if: ${{ always() && github.event_name == 'workflow_dispatch' }}
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}/trade4v:${{ github.workspace }}
          KDAY:    ${{ inputs.K_day }}
          H:       ${{ inputs.H }}
        run: |
          set -euo pipefail
          if [ -f "_out_4u/run/preds_test.csv" ]; then
            python -m trade4v.diag.run_diag \
              --preds _out_4u/run/preds_test.csv \
              --metrics _out_4u/run/metrics_oos.json \
              --k_day "$KDAY" --H "$H" || true
            echo "diag_report.json (head):"
            test -f "_out_4u/run/diag_report.json" && head -n 100 "_out_4u/run/diag_report.json" || true
          else
            echo "WARN: preds_test.csv 미존재 → 진단 생략"
          fi

      - name: Upload outputs (artifact)
        if: ${{ always() && github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: _out_4u
          path: |
            _out_4u/**
            !**/__pycache__/**