name: trade4v run (v3.3 + diagnostics, pinned path)

on:
  workflow_dispatch: {}

jobs:
  backtest:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1) Checkout (full-length SHA pinned)
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11

      # 2) Python setup (pinned)
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          set -euo pipefail
          python -V
          python -m pip install --upgrade pip
          pip install "pandas==2.2.2" "numpy==1.26.4"

      # 3) Unzip project — 중첩 폴더도 자동 인식 + PYTHONPATH 고정
      - name: Unzip project (PIN path)
        shell: bash
        run: |
          set -euo pipefail
          rm -rf __extracted
          mkdir -p __extracted
          test -f trade4v.zip || { echo "trade4v.zip not found in repo root"; exit 1; }
          unzip -q -o "trade4v.zip" -d "__extracted"

          # run_4u.py 탐색(중첩 폴더 대응)
          RUNPY=$(find __extracted -maxdepth 3 -type f -name run_4u.py | head -n1 || true)
          if [ -z "${RUNPY:-}" ]; then
            echo "run_4u.py not found. Layout:"; ls -R __extracted; exit 1
          fi
          PKGDIR=$(dirname "$RUNPY")     # .../trade4v
          PKGROOT=$(dirname "$PKGDIR")   # trade4v 상위

          echo "RUNPY=$RUNPY"
          echo "PKGDIR=$PKGDIR"
          echo "PKGROOT=$PKGROOT"

          # env에 고정  (PYTHONPATH가 비어있을 수 있으므로 디폴트 확장 사용)
          {
            echo "RUNPY=$RUNPY"
            echo "PKGDIR=$PKGDIR"
            echo "PKGROOT=$PKGROOT"
            echo "PYTHONPATH=$PKGROOT:$PKGDIR:${PYTHONPATH:-}"
          } >> "$GITHUB_ENV"

      # 4) 데이터 준비 (첫 csv 사용, 없으면 루트 zip 풀기) + 헤더 정규화
      - name: Prepare data
        shell: bash
        run: |
          set -euo pipefail
          OUT="_out_4u"; mkdir -p "$OUT"
          mkdir -p data
          ls -1 data/*.csv >/dev/null 2>&1 || {
            ZIP=$(ls -1 ETHUSDT_1min_*.zip 2>/dev/null | head -n1 || true)
            if [ -n "${ZIP:-}" ]; then unzip -q -o "$ZIP" -d data; fi
          }
          CSV=$(ls -1 data/*.csv | head -n1)
          echo "Using CSV: $CSV"
          python - <<'PY'
          import pandas as pd, glob
          src = sorted(glob.glob("data/*.csv"))[0]
          df = pd.read_csv(src)
          for c in ["time","open_time","timestamp","date"]:
            if c in df.columns:
              if c!="time": df = df.rename(columns={c:"time"})
              break
          df.to_csv("normalized.csv", index=False)
          print("normalized.csv saved", len(df))
          PY

      # 5) 백테스트 실행 (고정 경로 사용)
      - name: Run backtest (v3.3, capture logs)
        shell: bash
        env:
          TRAIN_S: "2025-01-01 00:00:00"
          TRAIN_E: "2025-04-30 23:59:00"
          TEST_S:  "2025-05-01 00:00:00"
          TEST_E:  "2025-06-30 23:59:00"
          H: "15"
          FEE_BPS: "1.0"
          SLIP_BPS: "0.5"
          KDAY: "0:10,1:15,2:30"
          QTP: "0.90"
          QSL: "0.60"
          OUT: "_out_4u"
        run: |
          set -euo pipefail
          echo "CSV: normalized.csv"
          echo "RUNPY=$RUNPY"
          echo "PKGDIR=$PKGDIR"
          echo "PKGROOT=$PKGROOT"
          echo "TRAIN_S: $TRAIN_S  TRAIN_E: $TRAIN_E"
          echo "TEST_S : $TEST_S   TEST_E : $TEST_E"
          echo "H=$H  FEE=$FEE_BPS  SLIP=$SLIP_BPS  KDAY=$KDAY  QTP=$QTP  QSL=$QSL"
          python "$RUNPY" \
            --data "normalized.csv" \
            --train_start "$TRAIN_S" --train_end "$TRAIN_E" \
            --test_start "$TEST_S"  --test_end  "$TEST_E" \
            --H "$H" \
            --fee_bps "$FEE_BPS" --slip_bps "$SLIP_BPS" \
            --K_day "$KDAY" \
            --q_tp "$QTP" --q_sl "$QSL" \
            --out_dir "$OUT"

      # 6) 진단 (있으면 실행, 없으면 스킵)
      - name: Run diagnostics (best-effort)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "_out_4u/run/preds_test.csv" ]; then
            python -m trade4v.diag.run_diag \
              --preds _out_4u/run/preds_test.csv \
              --k_day "0:10,1:15,2:30" \
              --H 15 || true
          else
            echo "no preds_test.csv, diagnostics skipped" | tee -a _out_4u/run/run.log
          fi

      # 7) 결과 업로드 (pinned)
      - name: Upload outputs
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
        with:
          name: _out_4u
          path: |
            _out_4u/**
            normalized.csv