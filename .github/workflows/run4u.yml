name: trade4v run (v3.3.5-robust • dispatch-only)

on:
  workflow_dispatch:
    inputs:
      data_csv:   { default: 'data/*.csv' }
      train_start:{ default: '2025-01-01 00:00:00' }
      train_end:  { default: '2025-04-30 23:59:00' }
      test_start: { default: '2025-05-01 00:00:00' }
      test_end:   { default: '2025-06-30 23:59:00' }
      H:          { default: '15' }
      fee_bps:    { default: '1.0' }
      slip_bps:   { default: '0.5' }
      k_day:      { default: '0:10,1:15,2:30' }
      strict_qa:  { default: '0' }

permissions:
  contents: read

jobs:
  backtest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab0f6f9c3f8b7497d1e5d00bbc

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with: { python-version: '3.11' }

      - name: Install deps (soft)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -q --upgrade pip
          pip install -q pandas pyarrow numpy scipy scikit-learn statsmodels

      - name: Unzip project (robust)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p __extracted
          if ls *.zip 1>/dev/null 2>&1; then unzip -o -q "*.zip" -d __extracted || true; fi
          ROOT=""
          for d in __extracted/trade4v __extracted ./trade4v . ; do
            if [ -f "$d/trade4v/run_4u.py" ]; then ROOT="$d/trade4v"; break; fi
            if [ -f "$d/run_4u.py" ]; then ROOT="$d"; break; fi
          done
          rm -rf trade4v || true
          if [ -n "${ROOT}" ]; then
            [ -d "${ROOT}/trade4v" ] && { mkdir -p trade4v; shopt -s dotglob; mv "${ROOT}/trade4v"/* trade4v/; } || cp -r "${ROOT}" trade4v
          fi
          [ -d trade4v/trade4v ] && { shopt -s dotglob; mv trade4v/trade4v/* trade4v/; rmdir trade4v/trade4v; } || true
          test -f trade4v/run_4u.py || { echo "FATAL: trade4v/run_4u.py not found"; exit 2; }
          ls -al trade4v | head -n 60

      - name: Prepare ETH 1m data
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          CSV_IN='${{ inputs.data_csv }}'
          if [[ "$CSV_IN" == *"*"* ]]; then CSV=$(ls -1 $CSV_IN 2>/dev/null | head -n1 || true); else CSV="$CSV_IN"; fi
          if [ -z "${CSV:-}" ] || [ ! -f "$CSV" ]; then echo "FATAL: CSV not found"; exit 3; fi
          echo "Using CSV: $CSV"
          python - "$CSV" <<'PY'
import pandas as pd, os, sys
p=sys.argv[1]; df=pd.read_csv(p)
rn={}
for k in list(df.columns):
    kl=k.strip().lower()
    if kl in ("open time","opentime","time","timestamp"): rn[k]="open_time"
    elif kl in ("close","close price","price"): rn[k]="close"
    elif kl in ("volume","vol"): rn[k]="volume"
    elif kl in ("open","high","low"): rn[k]=kl
if rn: df=df.rename(columns=rn)
assert "open_time" in df.columns, "open_time missing"
df.to_csv("normalized.csv", index=False)
print("normalized.csv written", len(df))
PY
          echo "csv=normalized.csv" >> $GITHUB_OUTPUT

      - name: Hotfix: pandas.cut labels & index-safe range
        shell: bash
        run: |
          set -euo pipefail
          F="trade4v/trend4p/utils.py"
          [ -f "$F" ] && sed -i 's/labels=\[0,1,2,2\], include_lowest=True)/labels=[0,1,2,2], include_lowest=True, ordered=False)/' "$F" || true
          F1="trade4v/trend4p/range_model.py"
          if [ -f "$F1" ]; then
            python - "$F1" <<'PY'
import sys, re, pathlib
p=pathlib.Path(sys.argv[1]); s=p.read_text(encoding='utf-8')
s=re.sub(r"def\s+make_range_targets\s*\(.*?\)\s*:\n(?:.*?\n)*?return\s+r\..*",
         "def make_range_targets(df,H):\n import pandas as pd\n r=pd.Series(df['ret1']).abs().rolling(H,min_periods=H).sum().shift(-H)\n return r.values", s, flags=re.S)
pat=r"def\s+apply_quantile_tables\s*\(.*?\)\s*:\n(?:.*?\n)*?(?=^def\s|^class\s|\Z)"
repl='''def apply_quantile_tables(df,tables,q_tp=0.9,q_sl=0.6,key_cols=('sess','regime_id'),eps=1e-6):
 import numpy as np, pandas as pd
 tp=pd.Series(eps,index=df.index,dtype=float); sl=pd.Series(eps,index=df.index,dtype=float)
 for key,gd in df.groupby(list(key_cols),dropna=False):
  tab=tables.get(key)
  if tab is None:
   v=gd['vol'].clip(lower=eps).values; tp.loc[gd.index]=v; sl.loc[gd.index]=v
  else:
   med=float(np.nanmedian(gd['vol'].values)) if len(gd)>0 else eps
   tp.loc[gd.index]=max(float(tab.get(0.9,med)),eps)
   sl.loc[gd.index]=max(float(tab.get(0.6,med)),eps)
 return tp.values, sl.values
'''
s, n = re.subn(pat, repl, s, flags=re.M|re.S); 
p.write_text(s, encoding='utf-8')
print("[OK] patched range_model")
PY
          fi

      - name: Run backtest
        env:
          PYTHONPATH: ${{ github.workspace }}/trade4v:${{ github.workspace }}
          QTP: "0.90"
          QSL: "0.60"
          OVERLAP_MODE: "cap"
          MAX_CONC: "2"
          MIN_GAP: "5"
          STRICT_QA: ${{ inputs.strict_qa }}
        shell: bash
        run: |
          set -euo pipefail
          python "trade4v/run_4u.py" \
            --data "${{ steps.prep.outputs.csv }}" \
            --train_start "${{ inputs.train_start }}" --train_end "${{ inputs.train_end }}" \
            --test_start  "${{ inputs.test_start }}"  --test_end  "${{ inputs.test_end }}" \
            --H "${{ inputs.H }}" \
            --fee_bps "${{ inputs.fee_bps }}" --slip_bps "${{ inputs.slip_bps }}" \
            --k_day "${{ inputs.k_day }}" \
            --out_dir "_out_4u" || true
          ls -al _out_4u || true; ls -al _out_4u/run || true

      - name: Diagnostics
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "_out_4u/preds_test.csv" ]; then
            python -m trade4v.diag.run_diag \
              --preds "_out_4u/preds_test.csv" \
              --metrics "_out_4u/metrics_oos.json" \
              --k_day "${{ inputs.k_day }}" \
              --H "${{ inputs.H }}" || true
          else
            echo "WARN: preds_test.csv 없음 → 진단 생략"
          fi

      - name: Upload outputs
        if: always()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8
        with:
          name: _out_4u
          path: _out_4u
          if-no-files-found: warn