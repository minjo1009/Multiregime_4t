name: trade4v run (v3.3 + diagnostics, pinned path)

on:
  workflow_dispatch: {}

jobs:
  backtest:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1) Checkout (full-length SHA pin)
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11

      # 2) Python
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -V
          python - <<'PY'
          import sys; print("site:", "\n".join(sys.path[:3]))
          PY
          python -m pip install --upgrade pip
          pip install "pandas==2.2.2" "numpy==1.26.4"

      # 3) Unzip project to a deterministic path and PIN to that path
      - name: Unzip project (PIN path)
        shell: bash
        run: |
          set -euo pipefail
          rm -rf __extracted
          mkdir -p __extracted
          test -f trade4v.zip || { echo "trade4v.zip not found in repo root"; exit 1; }
          unzip -q -o "trade4v.zip" -d "__extracted"
          test -f "__extracted/trade4v/run_4u.py" || { echo "run_4u.py not found under __extracted/trade4v/"; ls -R __extracted; exit 1; }
          echo "== Using pinned script ==" 
          head -n 20 "__extracted/trade4v/run_4u.py" | sed -n '1,20p'
          echo "== Using ev.py signature =="
          grep -n "def bps_to_frac" "__extracted/trade4v/trend4p/ev.py" || true
          export PYTHONPATH="$PWD/__extracted/trade4v:$PYTHONPATH"
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV

      # 4) Prepare data (pick first CSV; normalize header to time/close if needed)
      - name: Prepare data
        shell: bash
        run: |
          set -euo pipefail
          OUT="_out_4u"; mkdir -p "$OUT"
          mkdir -p data
          # If zipped raw is provided in repo root, unzip to data/
          ls -1 data/*.csv >/dev/null 2>&1 || {
            ZIP=$(ls -1 ETHUSDT_1min_*.zip 2>/dev/null | head -n1 || true)
            if [ -n "${ZIP:-}" ]; then unzip -q -o "$ZIP" -d data; fi
          }
          CSV=$(ls -1 data/*.csv | head -n1)
          echo "Using CSV: $CSV"
          python - <<'PY'
          import pandas as pd, sys, os, glob
          src = sorted(glob.glob("data/*.csv"))[0]
          df  = pd.read_csv(src)
          # normalize time column
          for c in ["time","open_time","timestamp","date"]:
            if c in df.columns:
              if c!="time": df = df.rename(columns={c:"time"})
              break
          df.to_csv("normalized.csv", index=False)
          print("normalized.csv saved:", len(df))
          PY

      # 5) Run backtest with the **pinned** script path (no find/head)
      - name: Run backtest (v3.3, capture logs)
        shell: bash
        env:
          TRAIN_S: "2025-01-01 00:00:00"
          TRAIN_E: "2025-04-30 23:59:00"
          TEST_S:  "2025-05-01 00:00:00"
          TEST_E:  "2025-06-30 23:59:00"
          H: "15"
          FEE_BPS: "1.0"
          SLIP_BPS: "0.5"
          KDAY: "0:10,1:15,2:30"
          QTP: "0.90"
          QSL: "0.60"
          OUT: "_out_4u"
        run: |
          set -euo pipefail
          echo "CSV: normalized.csv"
          echo "TRAIN_S: $TRAIN_S"
          echo "TRAIN_E: $TRAIN_E"
          echo "TEST_S : $TEST_S"
          echo "TEST_E : $TEST_E"
          echo "H: $H"
          echo "FEE: $FEE_BPS"
          echo "SLIP: $SLIP_BPS"
          echo "KDAY: $KDAY"
          echo "OUT: $OUT"
          echo "QTP: $QTP"
          echo "QSL: $QSL"
          python "__extracted/trade4v/run_4u.py" \
            --data "normalized.csv" \
            --train_start "$TRAIN_S" --train_end "$TRAIN_E" \
            --test_start "$TEST_S"  --test_end  "$TEST_E" \
            --H "$H" \
            --fee_bps "$FEE_BPS" --slip_bps "$SLIP_BPS" \
            --K_day "$KDAY" \
            --q_tp "$QTP" --q_sl "$QSL" \
            --out_dir "$OUT"

      # 6) Diagnostics (best-effort)
      - name: Run diagnostics (best-effort)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "_out_4u/run/preds_test.csv" ]; then
            python -m trade4v.diag.run_diag \
              --preds _out_4u/run/preds_test.csv \
              --k_day "0:10,1:15,2:30" \
              --H 15 || true
          else
            echo "no preds_test.csv, diagnostics skipped" | tee -a _out_4u/run/run.log
          fi

      # 7) Upload outputs
      - name: Upload outputs
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
        with:
          name: _out_4u
          path: |
            _out_4u/**
            normalized.csv