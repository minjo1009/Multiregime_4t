name: Precheck CSV (v1.0.9-strict)

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: "Code zip at repo root (unused here)"
        required: false
        default: "trade_v1.0.8.zip"
      DATA_ZIP:
        description: "Data zip at repo root"
        required: true
        default: "ETHUSDT_1min_2020_2025.zip"
      CSV_GLOB:
        description: "Glob inside unzipped DATA_DIR"
        required: true
        default: "*ETHUSDT*1min*2020*2025*.csv"

permissions:
  contents: read

env:
  PY: "3.11"
  RUN_DIR: tmp/trade
  DATA_DIR: tmp/data
  OUT_DIR: _out_4u/run
  # === FULL SHAs ONLY (strict) ===
  CHECKOUT_SHA: 11bd71901b2cbc3cb3cbbf5b1b973078d1b96b7a
  SETUP_PYTHON_SHA: a26af69be951a213d495a4c3e4e4022e16d87065
  UPLOAD_ARTIFACT_SHA: ea165f8d65b6e0b1f71c5e3cd2a1f1e166d0ad2d

jobs:
  preflight:
    runs-on: ubuntu-latest
    steps:
      - name: Validate pinned SHAs (exists)
        shell: bash
        run: |
          set -euo pipefail
          hex40='^[0-9a-f]{40}$'
          check(){ n="$1"; s="$2"; u="https://api.github.com/repos/actions/${n}/tarball/${s}"; curl -fsIL "$u" >/dev/null; }
          for n in checkout setup-python upload-artifact; do
            s="$(echo "${n}_SHA" | tr '-' '_' | tr '[:lower:]' '[:upper:]')"
            v="${!s}"
            [[ "$v" =~ $hex40 ]] || { echo "❌ PinnedSHA: $n not 40-hex"; exit 86; }
            check "$n" "$v" || { echo "❌ PinnedSHA: $n@$v not found"; exit 86; }
          done
          echo "✅ Pinned SHAs OK"

      - name: Checkout (pinned, strict)
        uses: actions/checkout@11bd71901b2cbc3cb3cbbf5b1b973078d1b96b7a

      - name: Setup Python (pinned, strict)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PY }}

      - name: Install deps (minimal)
        shell: bash
        run: |
          set -euo pipefail
          python3 -m pip -q install -U pip
          if [ -f requirements.txt ]; then
            python3 -m pip -q install -r requirements.txt
          else
            python3 -m pip -q install pandas numpy scikit-learn pyyaml
          fi

      - name: Prepare dirs & unzip data
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "${DATA_DIR}" "${OUT_DIR}"
          mkdir -p "${DATA_DIR}" "${OUT_DIR}"
          unzip -o "${{ github.event.inputs.DATA_ZIP }}" -d "${DATA_DIR}" >/dev/null

      - name: Write detect_csv.py
        shell: bash
        run: |
          set -euo pipefail
          cat > detect_csv.py <<'PY'
          import os, sys, glob
          base = os.environ["DATA_DIR"]
          pat  = os.environ.get("CSV_GLOB_IN","").strip()
          matches = glob.glob(os.path.join(base, "**", pat), recursive=True) if pat else []
          if not matches:
              matches = glob.glob(os.path.join(base, "**", "*.csv"), recursive=True)
          if not matches:
              print(f"ERROR: No CSV found under {base}", file=sys.stderr); sys.exit(2)
          print(os.path.abspath(matches[0]))
          PY

      - name: Detect CSV & export CSV_PATH
        shell: bash
        env:
          CSV_GLOB_IN: ${{ github.event.inputs.CSV_GLOB }}
        run: |
          set -euo pipefail
          ABS="$(python3 detect_csv.py)"
          echo "CSV_PATH=${ABS}" | tee -a "$GITHUB_ENV"
          echo "Using CSV_PATH=${ABS}"

      - name: Write preflight.py
        shell: bash
        run: |
          set -euo pipefail
          cat > preflight.py <<'PY'
          import os, sys, pandas as pd
          p = os.environ.get("CSV_PATH")
          if not p or not os.path.exists(p):
              print("ERROR: CSV_PATH missing or not exists:", p); sys.exit(3)
          df = pd.read_csv(p, nrows=2)
          need = {'open_time','open','high','low','close','volume'}
          cols = {str(c).lower() for c in df.columns}
          miss = need - cols
          if miss:
              print("ERROR: Missing base columns:", sorted(miss)); sys.exit(4)
          print("OK: Columns present:", sorted(cols))
          PY

      - name: Preflight columns
        shell: bash
        run: |
          set -euo pipefail
          python3 preflight.py

      - name: Upload artifacts (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e0b1f71c5e3cd2a1f1e166d0ad2d
        with:
          name: precheck-output
          path: |
            ${{ env.OUT_DIR }}/