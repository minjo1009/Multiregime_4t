name: Precheck CSV (v1.0.8)

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Code zip at repo root
        required: true
        default: trade_v1.0.8.zip
      DATA_ZIP:
        description: Data zip at repo root
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_GLOB:
        description: CSV glob inside data dir
        required: true
        default: "*ETHUSDT*1min*2020*2025*.csv"
      PY:
        description: Python version
        required: true
        default: "3.11"

permissions:
  contents: read

jobs:
  preflight:
    runs-on: ubuntu-latest
    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_DIR: _out_4u/run
      PY: ${{ github.event.inputs.PY }}

    steps:
      - name: Checkout (safe tag)
        uses: actions/checkout@v4

      - name: Setup Python (safe tag)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY }}

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python3 -m pip -q install -U pip
          if [ -f requirements.txt ]; then
            python3 -m pip -q install -r requirements.txt
          else
            python3 -m pip -q install pandas numpy pyyaml
          fi

      - name: Prepare dirs & unzip data
        shell: bash
        env:
          DATA_ZIP: ${{ github.event.inputs.DATA_ZIP }}
        run: |
          set -euo pipefail
          rm -rf "$RUN_DIR" "$DATA_DIR" "$OUT_DIR"
          mkdir -p "$RUN_DIR" "$DATA_DIR" "$OUT_DIR"
          unzip -o "$DATA_ZIP" -d "$DATA_DIR" >/dev/null
          ls -al "$DATA_DIR" | sed -n '1,120p'

      - name: Detect CSV path
        shell: bash
        env:
          CSV_GLOB_IN: ${{ github.event.inputs.CSV_GLOB }}
        run: |
          set -euo pipefail
          cat > detect_csv.py <<'PY'
          import os, glob, sys
          base = os.environ['DATA_DIR']
          pat  = os.environ.get('CSV_GLOB_IN','').strip()
          c = []
          if pat:
              c = glob.glob(os.path.join(base,'**',pat), recursive=True)
          if not c:
              c = glob.glob(os.path.join(base,'**','*.csv'), recursive=True)
          if not c:
              print(f"ERROR: no CSV found under {base}", file=sys.stderr)
              sys.exit(44)
          c.sort()
          print(os.path.abspath(c[0]))
          PY
          CSV_PATH=$(python3 detect_csv.py)
          echo "CSV_PATH=$CSV_PATH" >> "$GITHUB_ENV"
          echo "Using CSV_PATH=$CSV_PATH"

      - name: Preflight required columns
        shell: bash
        run: |
          set -euo pipefail
          cat > preflight.py <<'PY'
          import os, sys, pandas as pd
          p = os.environ.get("CSV_PATH")
          if not p or not os.path.exists(p):
              print(f"ERROR: CSV_PATH missing or not exists: {p}", file=sys.stderr)
              sys.exit(45)
          df = pd.read_csv(p, nrows=2)
          need = {'open_time','open','high','low','close','volume'}
          cols = {c.lower() for c in df.columns}
          miss = sorted(need - cols)
          if miss:
              print("ERROR: missing base columns:", miss, file=sys.stderr)
              sys.exit(46)
          print("Columns OK:", sorted(df.columns))
          PY
          python3 preflight.py