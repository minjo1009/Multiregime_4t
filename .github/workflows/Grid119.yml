name: Grid119

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Repo path to code zip (root)
        required: true
        default: trade_v1.1.9p1.zip
      DATA_ZIP:
        description: Repo path to data zip (root)
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_FILE:
        description: CSV filename after unzip
        required: true
        default: ETHUSDT_1min_2020_2025.csv

jobs:
  grid:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        TP:   [0.0025, 0.0030, 0.0035, 0.0042]
        SL:   [0.0015, 0.0018, 0.0020, 0.0022]
        HOLD: [4, 6, 8]
        THRS: [[3.5, 3.3, 3.0], [4.0, 3.8, 3.5]]
    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_BASE: _out_119
      PYVER: '3.11'

    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PYVER }}

      - name: Guard SHAs (upload/download)
        shell: bash
        run: |
          set -euo pipefail
          UPL=ea165f8d65b6e75b540449e92b4886f43607fa02
          DNL=d3f86a106a0bac45b974a628896c90dbdf5c8093
          git ls-remote https://github.com/actions/upload-artifact "$UPL" | grep -q "$UPL" || { echo "::error::upload-artifact SHA not found"; exit 61; }
          git ls-remote https://github.com/actions/download-artifact "$DNL" | grep -q "$DNL" || { echo "::error::download-artifact SHA not found"; exit 61; }
          [[ ${#UPL} -eq 40 && ${#DNL} -eq 40 ]] || { echo "::error::not full-length SHA"; exit 62; }
          echo "[ok] action SHAs verified"

      - name: Resolve ZIPs
        shell: bash
        run: |
          set -euo pipefail
          res(){ local in="$1" out="$2" p=""; local base="$(basename "$in")";
            if [[ -f "$in" ]]; then p="${GITHUB_WORKSPACE}/$in";
            else p="$(find "${GITHUB_WORKSPACE}" -maxdepth 2 -type f -name "$base" -print -quit || true)"; fi
            [[ -n "$p" && -f "$p" ]] || { echo "::error::ZIP not found: $in"; exit 66; }
            echo "${out}=${p}" >> "$GITHUB_ENV"; echo "[resolved] $in -> $p";
          }
          res "${{ github.event.inputs.CODE_ZIP }}" CODE_ZIP_ABS
          res "${{ github.event.inputs.DATA_ZIP }}" DATA_ZIP_ABS

      - name: Unpack code/data & locate runner
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$RUN_DIR" "$DATA_DIR" "${GITHUB_WORKSPACE}/${OUT_BASE}"
          unzip -q "$CODE_ZIP_ABS" -d "$RUN_DIR"
          unzip -q "$DATA_ZIP_ABS" -d "$DATA_DIR"
          RUN_PY="$(find "$RUN_DIR" -maxdepth 3 -type f -name 'run_4u.py' -print -quit || true)"
          [[ -n "$RUN_PY" ]] || { echo "::error::run_4u.py not found in code zip"; exit 67; }
          echo "RUN_PY=$RUN_PY" >> "$GITHUB_ENV"

      - name: CSV path + preflight (required columns, n_rows)
        shell: bash
        run: |
          set -euo pipefail
          CSV="${GITHUB_WORKSPACE}/${DATA_DIR}/${{ github.event.inputs.CSV_FILE }}"
          if [[ ! -f "$CSV" ]]; then
            F="$(find "$DATA_DIR" -type f -name "${{ github.event.inputs.CSV_FILE }}" -print -quit || true)"
            [[ -n "$F" ]] || { echo "::error::CSV not found: ${{ github.event.inputs.CSV_FILE }}"; exit 64; }
            CSV="${GITHUB_WORKSPACE}/${F}"
          fi
          echo "CSV_PATH=$CSV" >> "$GITHUB_ENV"
          HDR="$(head -n1 "$CSV")"
          for c in open_time open high low close volume; do
            echo "$HDR" | grep -q "\b$c\b" || { echo "::error::missing column: $c"; exit 75; }
          done
          NROWS=$(($(wc -l < "$CSV") - 1))
          echo "N_ROWS=$NROWS" >> "$GITHUB_ENV"
          echo "[csv] $CSV"
          echo "[rows] $NROWS"

      - name: Params & OUT_DIR (per-matrix combo)
        shell: bash
        run: |
          set -euo pipefail
          US="${{ matrix.THRS[0] }}"; EU="${{ matrix.THRS[1] }}"; AS="${{ matrix.THRS[2] }}"
          echo "TP=${{ matrix.TP }}"      >> "$GITHUB_ENV"
          echo "SL=${{ matrix.SL }}"      >> "$GITHUB_ENV"
          echo "HOLD=${{ matrix.HOLD }}"  >> "$GITHUB_ENV"
          echo "THR_US=$US"  >> "$GITHUB_ENV"
          echo "THR_EU=$EU"  >> "$GITHUB_ENV"
          echo "THR_ASIA=$AS" >> "$GITHUB_ENV"
          TAG="tp${{ matrix.TP }}_sl${{ matrix.SL }}_h${{ matrix.HOLD }}_us${US}_eu${EU}_as${AS}"
          OUT_DIR="${OUT_BASE}/$TAG"
          echo "RUN_TAG=$TAG"   >> "$GITHUB_ENV"
          echo "OUT_DIR=$OUT_DIR" >> "$GITHUB_ENV"
          mkdir -p "${GITHUB_WORKSPACE}/${OUT_DIR}"
          echo "[tag] $TAG"

      - name: Write conf/config.effective.yml (printf; no heredoc)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$RUN_DIR/conf"
          CONF="$RUN_DIR/conf/config.effective.yml"
          : > "$CONF"
          printf '%s\n' 'thr_by_session:'            >> "$CONF"
          printf '%s\n' "  US: ${THR_US}"            >> "$CONF"
          printf '%s\n' "  EU: ${THR_EU}"            >> "$CONF"
          printf '%s\n' "  ASIA: ${THR_ASIA}"        >> "$CONF"
          printf '%s\n' "tp_pct: ${TP}"              >> "$CONF"
          printf '%s\n' "sl_pct: ${SL}"              >> "$CONF"
          printf '%s\n' "hold_bars: ${HOLD}"         >> "$CONF"
          printf '%s\n' "z_window: 288"              >> "$CONF"
          sha256sum "$CONF" | awk '{print "[conf] sha256="$1}'

      - name: Install deps (pip + jq)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip >/dev/null
          pip install pandas numpy pyyaml >/dev/null
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi

      - name: Run backtest (v1.1.9p1 engine expected)
        shell: bash
        run: |
          set -euo pipefail
          export PYTHONPATH="$RUN_DIR"
          python "$RUN_PY" --data_path "$CSV_PATH" --out_dir "${GITHUB_WORKSPACE}/${OUT_DIR}"

      - name: Guards (placeholders/null forbid + n_trades_ratio â‰¤ 0.60)
        shell: bash
        run: |
          set -euo pipefail
          S="${GITHUB_WORKSPACE}/${OUT_DIR}/summary.json"
          test -s "$S" || { echo "::error::summary.json missing"; exit 78; }
          jq -e '((.placeholders // false) | not) and (.hit_rate!=null) and (.profit_factor!=null) and (.n_trades!=null) and (.mcc!=null)' "$S" >/dev/null \
            || { echo "::error::invalid summary (placeholders or null metrics)"; cat "$S"; exit 78; }
          nt=$(jq -r '.n_trades' "$S"); nr="${N_ROWS}"
          ratio=$(awk -v nt="$nt" -v nr="$nr" 'BEGIN{ if(nr>0){printf "%.6f", nt/nr}else{print "NaN"} }')
          echo "[ratio] n_trades/n_rows=$ratio"
          awk -v r="$ratio" 'BEGIN{exit !(r<=0.60)}' || { echo "::error::n_trades_ratio>0.60"; exit 79; }

      - name: Upload per-run artifact (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: out_${{ env.RUN_TAG }}
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/trades.csv
            ${{ env.OUT_DIR }}/gating_debug.json
          if-no-files-found: warn

  aggregate:
    needs: [grid]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts (pinned)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          path: all_runs

      - name: Ensure jq
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi

      - name: Build leaderboards + gates
        shell: bash
        run: |
          set -euo pipefail
          echo "artifact,tp_pct,sl_pct,hold_bars,thr_US,thr_EU,thr_ASIA,hit_rate,profit_factor,mcc,n_trades" > leaderboard.csv
          while IFS= read -r -d '' s; do
            dir="$(dirname "$s")"; tag="$(basename "$dir")"
            gj="$dir/gating_debug.json"
            thr_US=""; thr_EU=""; thr_ASIA=""
            [[ -f "$gj" ]] && thr_US="$(jq -r '.thr_by_session.US // empty' "$gj")" && thr_EU="$(jq -r '.thr_by_session.EU // empty' "$gj")" && thr_ASIA="$(jq -r '.thr_by_session.ASIA // empty' "$gj")"
            tp="$(jq -r '.tp_pct' "$s")"; sl="$(jq -r '.sl_pct' "$s")"; hold="$(jq -r '.hold_bars' "$s")"
            hit="$(jq -r '.hit_rate' "$s")"; pf="$(jq -r '.profit_factor' "$s")"; mcc="$(jq -r '.mcc // empty' "$s")"; nt="$(jq -r '.n_trades' "$s")"
            echo "$tag,$tp,$sl,$hold,$thr_US,$thr_EU,$thr_ASIA,$hit,$pf,$mcc,$nt" >> leaderboard.csv
          done < <(find all_runs -type f -name summary.json -print0)

          { head -n 1 leaderboard.csv; tail -n +2 leaderboard.csv | sort -t, -k9,9nr -k8,8nr -k10,10nr; } > leaderboard.sorted.csv
          awk -F, 'NR==1 || ($9>=1.2 && $8>=0.55 && $11>=50)' leaderboard.sorted.csv > top_candidates_stage1.csv
          awk -F, 'NR==1 || ($9>=1.5 && $8>=0.65 && $10>=0.5)' leaderboard.sorted.csv > top_candidates_stage2.csv

      - name: Upload leaderboards (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest119_grid_results
          path: |
            leaderboard.csv
            leaderboard.sorted.csv
            top_candidates_stage1.csv
            top_candidates_stage2.csv