name: Grid119L

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: code zip at repo root
        required: true
        default: trade_v1.1.9.3.zip
      DATA_ZIP:
        description: data zip at repo root
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_FILE:
        description: csv filename after unzip
        required: true
        default: ETHUSDT_1min_2020_2025.csv
      MAX_RATIO:
        description: max n_trades/n_rows (e.g., 0.35)
        required: true
        default: "0.35"
      FEES:
        description: roundtrip fee (e.g., 0.0004)
        required: true
        default: "0.0004"

jobs:
  grid:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        TP:   [0.0025, 0.0030, 0.0035, 0.0042]
        SL:   [0.0015, 0.0018, 0.0020, 0.0022]
        HOLD: [4, 6, 8]
        GAP:  [3, 5, 8]
        THRS: ["4.0,3.8,3.5","4.5,4.2,3.8"]
    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_BASE: _out_119L
      PYVER: '3.11'

    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PYVER }}

      - name: Resolve ZIPs
        shell: bash
        run: |
          set -euo pipefail
          res(){ local in="$1" out="$2" p=""; local base="$(basename "$in")";
            if [[ -f "$in" ]] ; then p="${GITHUB_WORKSPACE}/$in";
            else p="$(find "${GITHUB_WORKSPACE}" -maxdepth 2 -type f -name "$base" -print -quit || true)"; fi
            [[ -n "$p" && -f "$p" ]] || { echo "::error::ZIP not found: $in"; exit 66; }
            echo "${out}=${p}" >> "$GITHUB_ENV"; echo "[resolved] $in -> $p";
          }
          res "${{ github.event.inputs.CODE_ZIP }}" CODE_ZIP_ABS
          res "${{ github.event.inputs.DATA_ZIP }}" DATA_ZIP_ABS

      - name: Unpack code/data & locate runner
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$RUN_DIR" "$DATA_DIR"
          unzip -q "$CODE_ZIP_ABS" -d "$RUN_DIR"
          unzip -q "$DATA_ZIP_ABS" -d "$DATA_DIR"
          RUN_PY="$(find "$RUN_DIR" -maxdepth 4 -type f -name 'run_4u.py' -print -quit || true)"
          [[ -n "$RUN_PY" ]] || { echo "::error::run_4u.py not found in code zip"; exit 67; }
          echo "RUN_PY=$RUN_PY" >> "$GITHUB_ENV"

      - name: CSV preflight
        shell: bash
        run: |
          set -euo pipefail
          CSV="${GITHUB_WORKSPACE}/${DATA_DIR}/${{ github.event.inputs.CSV_FILE }}"
          if [[ ! -f "$CSV" ]]; then
            F="$(find "$DATA_DIR" -type f -name '${{ github.event.inputs.CSV_FILE }}' -print -quit || true)"
            [[ -n "$F" ]] || { echo "::error::CSV not found: ${{ github.event.inputs.CSV_FILE }}"; exit 64; }
            CSV="${GITHUB_WORKSPACE}/${F}"
          fi
          echo "CSV_PATH=$CSV" >> "$GITHUB_ENV"
          HDR="$(head -n1 "$CSV")"
          for c in open_time open high low close volume; do
            echo "$HDR" | grep -q "\b$c\b" || { echo "::error::missing column: $c"; exit 75; }
          done
          NROWS=$(($(wc -l < "$CSV") - 1))
          echo "N_ROWS=$NROWS" >> "$GITHUB_ENV"

      - name: Params & OUT_DIR
        shell: bash
        run: |
          set -euo pipefail
          IFS=',' read -r US EU ASIA <<< "${{ matrix.THRS }}"
          TAG="tp${{ matrix.TP }}_sl${{ matrix.SL }}_h${{ matrix.HOLD }}_gap${{ matrix.GAP }}_us${US}_eu${EU}_as${ASIA}"
          OUT_DIR="${{ env.OUT_BASE }}/$TAG"
          echo "RUN_TAG=$TAG"     >> "$GITHUB_ENV"
          echo "OUT_DIR=$OUT_DIR" >> "$GITHUB_ENV"
          mkdir -p "${GITHUB_WORKSPACE}/${OUT_DIR}"
          jq -n --argjson n "${N_ROWS}" '{n_rows:$n}' > "${GITHUB_WORKSPACE}/${OUT_DIR}/preflight.json"

      - name: Write conf.effective.yml (printf)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$RUN_DIR/conf"
          CONF="$RUN_DIR/conf/config.effective.yml"
          : > "$CONF"
          IFS=',' read -r US EU ASIA <<< "${{ matrix.THRS }}"
          printf '%s\n' 'thr_by_session:'               >> "$CONF"
          printf '%s\n' "  US: ${US}"                   >> "$CONF"
          printf '%s\n' "  EU: ${EU}"                   >> "$CONF"
          printf '%s\n' "  ASIA: ${ASIA}"               >> "$CONF"
          printf '%s\n' "tp_pct: ${{ matrix.TP }}"      >> "$CONF"
          printf '%s\n' "sl_pct: ${{ matrix.SL }}"      >> "$CONF"
          printf '%s\n' "hold_bars: ${{ matrix.HOLD }}" >> "$CONF"
          printf '%s\n' "z_window: 288"                 >> "$CONF"
          printf '%s\n' "long_only: true"               >> "$CONF"
          printf '%s\n' "pred_pos_means_long: false"    >> "$CONF"
          printf '%s\n' "mcc_mode: trade_vs_not"        >> "$CONF"
          printf '%s\n' "mcc_sample: all_bars"          >> "$CONF"
          printf '%s\n' "xor_tp_sl: true"               >> "$CONF"
          printf '%s\n' "min_gap_bars: ${{ matrix.GAP }}" >> "$CONF"
          printf '%s\n' "fees_roundtrip: ${{ github.event.inputs.FEES }}" >> "$CONF"
          sha256sum "$CONF" | awk '{print "[conf] sha256="$1}'

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip >/dev/null
          pip install pandas numpy pyyaml >/dev/null
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi

      - name: Run engine
        shell: bash
        run: |
          set -euo pipefail
          export PYTHONPATH="$RUN_DIR"
          python "$RUN_PY" --data_path "$CSV_PATH" --out_dir "${GITHUB_WORKSPACE}/${OUT_DIR}"

      - name: Guards
        shell: bash
        run: |
          set -euo pipefail
          S="${GITHUB_WORKSPACE}/${OUT_DIR}/summary.json"
          PF="${GITHUB_WORKSPACE}/${OUT_DIR}/preflight.json"
          jq -e '((.placeholders // false) | not) and (.hit_rate!=null) and (.profit_factor!=null) and (.n_trades!=null) and (.mcc!=null)' "$S" >/dev/null || { echo "::error::bad summary"; cat "$S"; exit 78; }
          nt=$(jq -r '.n_trades' "$S")
          nr=$(jq -r '.n_rows' "$PF")
          ratio=$(awk -v nt="$nt" -v nr="$nr" 'BEGIN{ if(nr>0){printf "%.6f", nt/nr}else{print "NaN"} }')
          echo "[ratio] $ratio"
          awk -v r="$ratio" -v m="${{ github.event.inputs.MAX_RATIO }}" 'BEGIN{exit !(r<=m)}' || { echo "::warning::DENSE_RUN ($ratio)"; }

      - name: Upload per-run (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: out_${{ env.RUN_TAG }}
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/trades.csv
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/preflight.json

  aggregate:
    needs: [grid]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts (pinned)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          path: all_runs

      - name: Ensure jq + python
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi
          python -V

      - name: Build leaderboards + monthly perf
        shell: bash
        run: |
          set -euo pipefail
          echo "artifact,tp,sl,hold,gap,thr_US,thr_EU,thr_ASIA,hit,pf,mcc,n_trades,ratio,monthly_geom" > leaderboard.csv
          FEES="${{ github.event.inputs.FEES }}"
          for s in $(find all_runs -type f -name summary.json | sort); do
            dir="$(dirname "$s")"; tag="$(basename "$dir")"
            pfj="$dir/preflight.json"; gj="$dir/gating_debug.json"
            tp=$(jq -r '.tp_pct' "$s"); sl=$(jq -r '.sl_pct' "$s"); hold=$(jq -r '.hold_bars' "$s")
            hit=$(jq -r '.hit_rate' "$s"); pf=$(jq -r '.profit_factor' "$s"); mcc=$(jq -r '.mcc' "$s"); nt=$(jq -r '.n_trades' "$s")
            nr=$(jq -r '.n_rows' "$pfj")
            ratio=$(awk -v nt="$nt" -v nr="$nr" 'BEGIN{ if(nr>0){printf "%.6f", nt/nr}else{print "NaN"} }')
            US=$(jq -r '.thr_by_session.US // empty' "$gj"); EU=$(jq -r '.thr_by_session.EU // empty' "$gj"); AS=$(jq -r '.thr_by_session.ASIA // empty' "$gj")
            python - <<PY
import pandas as pd, json, sys, numpy as np
from pathlib import Path
dir_path = Path(r"""$dir""")
fees = float(r"""$FEES""")
df = pd.read_csv(dir_path/'trades.csv')
if 'entry_time' in df.columns:
    df['entry_time'] = pd.to_datetime(df['entry_time'], utc=True, errors='coerce')
else:
    df['entry_time'] = pd.NaT
pnl = df['PnL'].astype(float) - fees
df['month'] = df['entry_time'].dt.to_period('M').astype(str)
month_ret = (1.0 + pnl).groupby(df['month']).prod() - 1.0
geom = float(np.prod(1.0 + month_ret.dropna())**(1.0/max(len(month_ret.dropna()),1)) - 1.0) if len(month_ret.dropna())>0 else float('nan')
print(geom if geom==geom else "NaN")
PY
            geom=$(tail -n1)
            echo "$tag,$tp,$sl,$hold,${tag#*_gap}","$US","$EU","$AS","$hit","$pf","$mcc","$nt","$ratio","$geom" >> leaderboard.csv
          done
          awk -F, 'NR==1 || ($13!="" && $13!="NaN" && $12!="" && $12!="NaN" && $12<=0.35 && $10>=1.5 && $9>=0.65 && $11>=0.5)' leaderboard.csv > top_stage1.csv
          awk -F, 'NR==1 || ($13!="" && $13!="NaN" && $12!="" && $12!="NaN" && $12<=0.35 && $10>=1.8 && $9>=0.70 && $11>=0.70)' leaderboard.csv > top_stage2.csv
          { head -n1 leaderboard.csv; tail -n +2 leaderboard.csv | sort -t, -k10,10nr -k9,9nr -k11,11nr; } > leaderboard.sorted.csv
          echo "== Top 10 (PF, WIN, MCC; ratio<=${{ github.event.inputs.MAX_RATIO }}) =="
          ( head -n1 leaderboard.sorted.csv; tail -n +2 leaderboard.sorted.csv | awk -F, '$12!="" && $12!="NaN" && $12<=${{ github.event.inputs.MAX_RATIO }}' | head -n 10 ) | column -s, -t | sed "s/^/  /"
          head -n 11 leaderboard.sorted.csv > top10.csv

      - name: Upload leaderboards (pinned)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: grid119l_results
          path: |
            leaderboard.csv
            leaderboard.sorted.csv
            top_stage1.csv
            top_stage2.csv
            top10.csv
