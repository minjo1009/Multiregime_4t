name: Backtest

on:
  workflow_dispatch:
    inputs:
      trade_zip_path:
        description: "Path to trade pack zip"
        type: string
        default: "trade_v1.0.4a.zip"
      data_zip_path:
        description: "Path to data zip (CSV inside)"
        type: string
        default: "ETHUSDT_1min_2020_2025.zip"

permissions:
  contents: read

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    env:
      TRADE_ZIP: ${{ inputs.trade_zip_path }}
      DATA_ZIP:  ${{ inputs.data_zip_path }}
      RUN_DIR:   tmp/trade
      DATA_DIR:  tmp/data
      OUT_DIR:   _out_4u/run
      CSV_PATH:  tmp/data/ETHUSDT_1min_2020_2025.csv
      OMP_NUM_THREADS: "2"
      OPENBLAS_NUM_THREADS: "2"
      MKL_NUM_THREADS: "2"
      NUMEXPR_NUM_THREADS: "2"

    steps:
      - name: Checkout (pinned SHA)
        uses: actions/checkout@b4ffde65f46336ab0f6b50b3e0e66170ea7b5f59

      - name: Setup Python 3.11 (pinned SHA)
        uses: actions/setup-python@39cd8d4002104aeda3945c78209b8e84c9700a4e
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Prepare working dirs
        run: |
          set -euo pipefail
          rm -rf "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"

      - name: Unzip trade pack
        run: |
          set -euo pipefail
          test -f "${TRADE_ZIP}" || { echo "❌ trade zip not found: ${TRADE_ZIP}"; exit 1; }
          unzip -q "${TRADE_ZIP}" -d "${RUN_DIR}"

      - name: Unzip data pack
        run: |
          set -euo pipefail
          test -f "${DATA_ZIP}" || { echo "❌ data zip not found: ${DATA_ZIP}"; exit 1; }
          unzip -q "${DATA_ZIP}" -d "${DATA_DIR}"

      # ---------- Install deps (여기서 들여쓰기/표현 교정)
      - name: Install requirements
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          pip install --upgrade pip
          pip install -r requirements.txt
          python -c "import sklearn,sys; print('sklearn', sklearn.__version__)"

      # ---------- Sklearn 호환 스모크 테스트 (1.4/1.5 모두 통과)
      - name: CalibratedClassifierCV smoke test
        run: |
          python - <<'PY'
          from sklearn.calibration import CalibratedClassifierCV
          from sklearn.linear_model import LogisticRegression
          try:
              CalibratedClassifierCV(estimator=LogisticRegression())
              print("OK: estimator= (>=1.5)")
          except TypeError:
              CalibratedClassifierCV(base_estimator=LogisticRegression())
              print("OK: base_estimator= (<=1.4)")
          PY

      # ---------- Fingerprint (v1.0.4a 지문)
      - name: Fingerprint check (v1.0.4a gating & cutoff)
        run: |
          set -euo pipefail
          grep -n "Coverage-aligned gating" "${RUN_DIR}/backtest/runner.py"
          grep -n "S1 probability floor cutoff" "${RUN_DIR}/backtest/runner.py"

      # ---------- Preflight CSV
      - name: Preflight CSV
        run: |
          python - <<'PY'
          import pandas as pd, sys, os
          csv = os.environ['CSV_PATH']
          df = pd.read_csv(csv, nrows=2)
          need = {'open_time','open','high','low','close','volume','number_of_trades'}
          missing = need - set(df.columns)
          if missing:
              print("❌ Missing base columns:", missing); sys.exit(1)
          hints = {'taker_buy_base_asset_volume','taker_buy_quote_asset_volume'}
          if not (hints & set(df.columns)):
              print("❌ Need taker_buy_* volume columns"); sys.exit(1)
          print("✅ CSV OK")
          PY

      # ---------- Run backtest
      - name: Run backtest
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python run_4u.py --data_path "${{ env.CSV_PATH }}" --out_dir "${{ env.OUT_DIR }}"
          echo "---- gating debug ----"
          cat "${{ env.OUT_DIR }}/gating_debug.json" || true

      # ---------- Upload artifacts (pinned SHA)
      - name: Upload artifacts (pinned SHA)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest-output
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/charts/
          if-no-files-found: warn
          retention-days: 30
          compression-level: 6