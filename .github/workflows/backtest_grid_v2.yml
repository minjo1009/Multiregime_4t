
name: Backtest-Grid-V2.1
on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: 'Path or URL to V2 code zip (repo root file name allowed)'
        required: true
        default: strategy_v2_codepack_v2.1.2.zip
      DATA_ZIP:
        description: 'Path or URL to data zip (repo root file name allowed)'
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_GLOB:
        description: 'CSV glob (e.g. **/*ETHUSDT*1min*2020*2025*.csv)'
        required: false
        default: "**/*ETHUSDT*1min*2020*2025*.csv"
      SL_ATR:
        description: 'exit.sl_atr constant (matrix covers tp_atr only)'
        required: false
        default: "0.5"

jobs:
  grid:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ofi_thr: [0.15, 0.20, 0.25]
        pthr_tr: [0.60, 0.65]
        tp_atr: [0.70, 0.90]
        r_lo: [0.30, 0.35, 0.40]
        t_hi: [0.60, 0.65, 0.70]
        cooldown: [5, 10]   # reduced to keep total <=256 (3*2*2*3*3*2 = 216)
    steps:
      - name: Install deps (pandas, numpy, pyyaml, numba)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip || true
          pip install pandas numpy pyyaml numba || true

      - name: Acquire code/data (local / URL / repo raw)
        env:
          CODE_ZIP: "${{ github.event.inputs.CODE_ZIP }}"
          DATA_ZIP: "${{ github.event.inputs.DATA_ZIP }}"
        run: |
          set -euo pipefail
          mkdir -p tmp/trade tmp/data _out_4u/run tools
          # CODE_ZIP
          if [ -f "$CODE_ZIP" ]; then CSRC="$CODE_ZIP";           elif echo "$CODE_ZIP" | grep -qiE '^https?://'; then curl -fL "$CODE_ZIP" -o tmp/trade/code.zip; CSRC="tmp/trade/code.zip";           else RCODE="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/$CODE_ZIP"; curl -fL "$RCODE" -o tmp/trade/code.zip; CSRC="tmp/trade/code.zip"; fi
          unzip -q "$CSRC" -d tmp/trade
          # DATA_ZIP
          if [ -f "$DATA_ZIP" ]; then DSRC="$DATA_ZIP";           elif echo "$DATA_ZIP" | grep -qiE '^https?://'; then curl -fL "$DATA_ZIP" -o tmp/data/data.zip; DSRC="tmp/data/data.zip";           else RDATA="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/$DATA_ZIP"; curl -fL "$RDATA" -o tmp/data/data.zip; DSRC="tmp/data/data.zip"; fi
          unzip -q "$DSRC" -d tmp/data
          # guard for namespace packages
          touch tmp/trade/strategy/__init__.py || true
          touch tmp/trade/strategy/v2/__init__.py || true

      - name: Patch params (no heredoc; base64 -> tools/patch.py)
        env:
          OFI_THR: "${{ matrix.ofi_thr }}"
          P_THR_TR: "${{ matrix.pthr_tr }}"
          TP_ATR: "${{ matrix.tp_atr }}"
          SL_ATR: "${{ github.event.inputs.SL_ATR }}"
          R_LO: "${{ matrix.r_lo }}"
          T_HI: "${{ matrix.t_hi }}"
          COOL: "${{ matrix.cooldown }}"
          B64: "CmltcG9ydCBvcywgeWFtbApwPSd0bXAvdHJhZGUvY29uZi9wYXJhbXMudjIueW1sJwp3aXRoIG9wZW4ocCwncicpIGFzIGY6IGNmZz15YW1sLnNhZmVfbG9hZChmKQpjZmcuc2V0ZGVmYXVsdCgnb3JkZXJmbG93Jyx7fSlbJ29maV90aHInXT1mbG9hdChvcy5lbnZpcm9uWydPRklfVEhSJ10pCmNmZy5zZXRkZWZhdWx0KCdlbnRyeScse30pLnNldGRlZmF1bHQoJ3BfdGhyJyx7fSlbJ3RyZW5kJ109ZmxvYXQob3MuZW52aXJvblsnUF9USFJfVFInXSkKY2ZnLnNldGRlZmF1bHQoJ2V4aXQnLHt9KQpjZmdbJ2V4aXQnXVsndHBfYXRyJ109ZmxvYXQob3MuZW52aXJvblsnVFBfQVRSJ10pOyBjZmdbJ2V4aXQnXVsnc2xfYXRyJ109ZmxvYXQob3MuZW52aXJvblsnU0xfQVRSJ10pCmNmZy5zZXRkZWZhdWx0KCdyZWdpbWUnLHt9KQpjZmdbJ3JlZ2ltZSddWydyYW5nZV9sb19wY3RpbGUnXT1mbG9hdChvcy5lbnZpcm9uWydSX0xPJ10pOyBjZmdbJ3JlZ2ltZSddWyd0cmVuZF9oaV9wY3RpbGUnXT1mbG9hdChvcy5lbnZpcm9uWydUX0hJJ10pCmNmZy5zZXRkZWZhdWx0KCdlbnRyeScse30pWydjb29sZG93bl9iYXJzJ109aW50KGZsb2F0KG9zLmVudmlyb25bJ0NPT0wnXSkpCndpdGggb3BlbihwLCd3JykgYXMgZjogeWFtbC5zYWZlX2R1bXAoY2ZnLGYsc29ydF9rZXlzPUZhbHNlKQo="
        run: |
          set -euo pipefail
          mkdir -p tools
          echo "$B64" > tools/p.b64
          python -c "import base64; open('tools/patch.py','wb').write(base64.b64decode(open('tools/p.b64','rb').read()))"
          python tools/patch.py
          echo '---- params.v2.yml ----'; cat tmp/trade/conf/params.v2.yml

      - name: Preflight strict
        env:
          CSV_GLOB: "${{ github.event.inputs.CSV_GLOB }}"
        run: |
          set -euo pipefail
          python tmp/trade/preflight_strict.py --data-root tmp/data --csv-glob "$CSV_GLOB" --outdir _out_4u/run

      - name: Detect entrypoint and run (V2.1)
        env:
          CSV_GLOB: "${{ github.event.inputs.CSV_GLOB }}"
        run: |
          set -euo pipefail
          ENTRY=""
          for c in "tmp/trade/run_4u.py" "tmp/trade/backtest/run_4u.py" "tmp/trade/backtest/runner.py"; do
            if [ -f "$c" ]; then ENTRY="$c"; break; fi
          done
          if [ -z "$ENTRY" ]; then echo "No entrypoint found"; exit 1; fi
          echo "ENTRY=$ENTRY"
          python "$ENTRY" --data-root tmp/data --csv-glob "$CSV_GLOB" --outdir _out_4u/run --params tmp/trade/conf/params.v2.yml

      - name: Grid metrics (no heredoc; base64 -> tools/metrics.py)
        env:
          B64: "CmltcG9ydCBqc29uLCBvcwpzID0ganNvbi5sb2FkKG9wZW4oJ19vdXRfNHUvcnVuL3N1bW1hcnkuanNvbicpKSBpZiBvcy5wYXRoLmV4aXN0cygnX291dF80dS9ydW4vc3VtbWFyeS5qc29uJykgZWxzZSB7fQprZXlzPVsnY3VtX3BubF9jbG9zZV9iYXNlZCcsJ2F2Z19nYXRlcCcsJ3RyZW5kX2ZyYWMnLCdyYW5nZV9mcmFjJywnZW50cmllcycsJ2V4aXRzJ10KbSA9IHtrOnMuZ2V0KGspIGZvciBrIGluIGtleXN9Cmpzb24uZHVtcChtLCBvcGVuKCdfb3V0XzR1L3J1bi9ncmlkX21ldHJpY3MuanNvbicsJ3cnKSwgaW5kZW50PTIpCg=="
        run: |
          set -euo pipefail
          mkdir -p tools
          echo "$B64" > tools/m.b64
          python -c "import base64; open('tools/metrics.py','wb').write(base64.b64decode(open('tools/m.b64','rb').read()))"
          python tools/metrics.py

      - name: Upload artifacts
        uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097
        with:
          name: "v2.1-ofi=${{ matrix.ofi_thr }}-ptr=${{ matrix.pthr_tr }}-tp=${{ matrix.tp_atr }}-rlo=${{ matrix.r_lo }}-thi=${{ matrix.t_hi }}-cool=${{ matrix.cooldown }}"
          path: |
            _out_4u/run/gating_debug.json
            _out_4u/run/summary.json
            _out_4u/run/preds_test.csv
            _out_4u/run/trades.csv
            _out_4u/run/grid_metrics.json
