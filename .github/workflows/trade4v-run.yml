name: trade4v-run
on:
  workflow_dispatch:
    inputs:
      project_zip: { description: "project zip", default: "trade4v.zip", required: true }
      data_zip:    { description: "ETH 1m zip in repo", default: "ETHUSDT_1min_2020_2025.zip", required: true }
      train_range: { description: "train_start,train_end", default: "2025-01-01,2025-04-30", required: true }
      test_range:  { description: "test_start,test_end",  default: "2025-05-01,2025-06-30",  required: true }
      H:           { description: "H forward bars", default: "5", required: true }
      fee_bps:     { description: "one-way fee bps (0.1% = 10)", default: "10", required: true }
      regime:      { description: "vol_window,z_thr", default: "64,1.5", required: true }
      coverage:    { description: "cov_min-cov_max", default: "0.10-0.30", required: true }

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      # ✅ SHA 고정: actions/checkout v4.3.0
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955  # v4.3.0
        # ref: https://github.com/actions/checkout/releases/tag/v4.3.0

      # ✅ SHA 고정: setup-python v5.6.0
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        with: { python-version: "3.11" }

      - name: Unzip project
        run: unzip -q "${{ github.event.inputs.project_zip }}" -d .

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r trade4v/requirements.txt

      - name: Prepare ETH 1m data (normalize headers & time)
        run: |
          unzip -q "${{ github.event.inputs.data_zip }}" -d data
          python - <<'PY'
          import os, glob, pandas as pd, numpy as np
          files = sorted(glob.glob("data/*.csv"))
          assert files, "No CSV inside the uploaded zip"
          src = files[0]
          df = pd.read_csv(src)
          df = df.rename(columns={c: c.strip().lower().replace(" ", "_") for c in df.columns})
          tcol = next((c for c in ["time","open_time","ts","timestamp"] if c in df.columns), None)
          if tcol is None: raise SystemExit("No time/open_time/ts column found")
          s = df[tcol]
          if np.issubdtype(s.dtype, np.number):
            med = float(s.iloc[len(s)//2]); unit = "ms" if med > 1e11 else "s"
            df["time"] = pd.to_datetime(s, unit=unit, utc=True)
          else:
            df["time"] = pd.to_datetime(s, utc=True)
          for c in ["open","high","low","close"]:
            if c not in df.columns: raise SystemExit(f"Missing column: {c}")
          if "volume" not in df.columns:
            cand = [c for c in ["vol","base_volume","quote_asset_volume","volume_usdt","volume_usd"] if c in df.columns]
            if not cand: raise SystemExit("Missing volume column")
            df["volume"] = df[cand[0]]
          df[["time","open","high","low","close","volume"]].to_csv("normalized.csv", index=False)
          PY
          echo "DATA_PATH=normalized.csv" >> $GITHUB_ENV

      - name: Parse compact inputs
        shell: bash
        run: |
          IFS=',' read -r TRAIN_S TRAIN_E <<< "${{ github.event.inputs.train_range }}"
          IFS=',' read -r TEST_S  TEST_E  <<< "${{ github.event.inputs.test_range }}"
          IFS=',' read -r VOLW    ZTHR    <<< "${{ github.event.inputs.regime }}"
          IFS='-' read -r COV_MIN COV_MAX <<< "${{ github.event.inputs.coverage }}"
          echo "TRAIN_S=$TRAIN_S" >> $GITHUB_ENV
          echo "TRAIN_E=$TRAIN_E" >> $GITHUB_ENV
          echo "TEST_S=$TEST_S"   >> $GITHUB_ENV
          echo "TEST_E=$TEST_E"   >> $GITHUB_ENV
          echo "VOLW=$VOLW"       >> $GITHUB_ENV
          echo "ZTHR=$ZTHR"       >> $GITHUB_ENV
          echo "COV_MIN=$COV_MIN" >> $GITHUB_ENV
          echo "COV_MAX=$COV_MAX" >> $GITHUB_ENV

      - name: Run backtest
        run: |
          python trade4v/run_4u.py \
            --data        "${{ env.DATA_PATH }}" \
            --train_start "${{ env.TRAIN_S }}" \
            --train_end   "${{ env.TRAIN_E }}" \
            --test_start  "${{ env.TEST_S }}" \
            --test_end    "${{ env.TEST_E }}" \
            --H           ${{ github.event.inputs.H }} \
            --fee_bps     ${{ github.event.inputs.fee_bps }} \
            --vol_window  "${{ env.VOLW }}" \
            --z_thr       "${{ env.ZTHR }}" \
            --cov_min     "${{ env.COV_MIN }}" \
            --cov_max     "${{ env.COV_MAX }}" \
            --out_dir     _out_4u/github

      # ✅ SHA 고정: upload-artifact v4.6.2
      - name: Upload outputs
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: trade4v-out
          path: _out_4u/github/