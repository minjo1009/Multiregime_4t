name: trade4v-run-s1s2
on:
  workflow_dispatch:
    inputs:
      project_zip:  { description: "project zip in repo", default: "trade4v.zip", required: true }
      data_file:    { description: "ETH 1m zip OR csv in repo", default: "ETHUSDT_1min_2020_2025.csv", required: true }
      train_range:  { description: "train_start,train_end", default: "2025-01-01,2025-04-30", required: true }
      test_range:   { description: "test_start,test_end",  default: "2025-05-01,2025-06-30",  required: true }
      H:            { description: "base H (fallback)", default: "15", required: true }
      H_map:        { description: "per-regime H (e.g. 0:13,1:17,2:25)", default: "0:13,1:17,2:25", required: true }
      bar_map:      { description: "rid:TPbps,SLbps,Hmax;...", default: "0:20,12,15;1:30,20,20;2:70,35,45", required: true }
      k_day:        { description: "Top-K per day per regime", default: "0:3,1:4,2:14", required: true }
      ev_anneal:    { description: "EV-floor multipliers (fee units)", default: "0.0", required: true }
      params_pack:  { description: "fee;slip;size;regime;session;exp  (e.g., fee=10;slip=0;size=kelly,0.02,0.8;regime=64,1.0,2.0;session=AS:1.0,EU:1.0,US:1.0;exp=1,0.7,1.8)", default: "fee=10;slip=0;size=kelly,0.02,0.8;regime=64,1.0,2.0;session=AS:1.0,EU:1.0,US:1.0;exp=1,0.7,1.8", required: true }

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with: { python-version: "3.11" }

      - name: Unzip project
        run: unzip -q "${{ github.event.inputs.project_zip }}" -d .

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r trade4v/requirements.txt

      - name: Resolve & normalize ETH 1m (zip or csv)
        shell: bash
        run: |
          set -euo pipefail
          DATA_IN="${{ github.event.inputs.data_file }}"
          if [[ -f "$DATA_IN" ]]; then
            FOUND="$DATA_IN"
          else
            FOUND=$(find . -maxdepth 2 -type f \( -iname "*.zip" -o -iname "*.csv" \) \
                     | grep -iE 'eth.*(1min|1m)|ethusdt.*(1min|1m)' \
                     | head -n 1 || true)
          fi
          if [[ -z "${FOUND:-}" ]]; then
            echo "❌ No data file found."; ls -la; exit 1
          fi
          echo "✅ Using data file: $FOUND"
          mkdir -p data
          if [[ "$FOUND" == *.zip ]]; then unzip -q "$FOUND" -d data; else cp "$FOUND" data/; fi
          python - <<'PY'
          import glob, pandas as pd, numpy as np
          srcs = sorted(glob.glob("data/*.csv"))
          assert srcs, "No CSV after extraction"
          df = pd.read_csv(srcs[0])
          df = df.rename(columns={c: c.strip().lower().replace(" ", "_") for c in df.columns})
          tcol = next((c for c in ["time","open_time","ts","timestamp"] if c in df.columns), None)
          if tcol is None: raise SystemExit("No time/open_time/ts/timestamp column")
          s = df[tcol]
          if np.issubdtype(s.dtype, np.number):
              med = float(s.iloc[len(s)//2]); unit = "ms" if med > 1e11 else "s"
              df["time"] = pd.to_datetime(s, unit=unit, utc=True)
          else:
              df["time"] = pd.to_datetime(s, utc=True)
          for c in ["open","high","low","close"]:
              assert c in df.columns, f"Missing {c}"
          if "volume" not in df.columns:
              cand = [c for c in ["vol","base_volume","quote_asset_volume","volume_usdt","volume_usd"] if c in df.columns]
              assert cand, "Missing volume"; df["volume"] = df[cand[0]]
          out = df[["time","open","high","low","close","volume"]].sort_values("time").drop_duplicates("time")
          out.to_csv("normalized.csv", index=False)
          PY
          echo "DATA_PATH=normalized.csv" >> $GITHUB_ENV

      - name: Parse ranges & params
        shell: bash
        run: |
          set -euo pipefail
          IFS=',' read -r TRAIN_S TRAIN_E <<< "${{ github.event.inputs.train_range }}"
          IFS=',' read -r TEST_S  TEST_E  <<< "${{ github.event.inputs.test_range }}"
          {
            echo "TRAIN_S=$TRAIN_S"
            echo "TRAIN_E=$TRAIN_E"
            echo "TEST_S=$TEST_S"
            echo "TEST_E=$TEST_E"
          } >> $GITHUB_ENV

          # Defaults
          FEE_BPS="10"; SLIP_BPS="0"
          SIZE_MODE="kelly"; RISK_BUDGET="0.02"; SIZE_MAX="0.8"
          REGIME="64,1.0,2.0"
          SESSION_FEE_MULT="AS:1.0,EU:1.0,US:1.0"
          USE_EXP="1"; SCALE_CLIP="0.7,1.8"

          PARAMS="${{ github.event.inputs.params_pack }}"
          IFS=';' read -ra KV <<< "$PARAMS"
          for pair in "${KV[@]}"; do
            key="${pair%%=*}"; val="${pair#*=}"
            case "$key" in
              fee) FEE_BPS="$val" ;;
              slip) SLIP_BPS="$val" ;;
              size) IFS=',' read -r SIZE_MODE RISK_BUDGET SIZE_MAX <<< "$val" ;;
              regime) REGIME="$val" ;;
              session) SESSION_FEE_MULT="$val" ;;     # e.g., AS:1.0,EU:1.0,US:1.0
              exp) IFS=',' read -r USE_EXP SCALE_LO SCALE_HI <<< "$val"; SCALE_CLIP="$SCALE_LO,$SCALE_HI" ;;
            esac
          done
          {
            echo "FEE_BPS=$FEE_BPS"
            echo "SLIP_BPS=$SLIP_BPS"
            echo "SIZE_MODE=$SIZE_MODE"
            echo "RISK_BUDGET=$RISK_BUDGET"
            echo "SIZE_MAX=$SIZE_MAX"
            echo "REGIME=$REGIME"
            echo "SESSION_FEE_MULT=$SESSION_FEE_MULT"
            echo "USE_EXP=$USE_EXP"
            echo "SCALE_CLIP=$SCALE_CLIP"
          } >> $GITHUB_ENV

      - name: Run backtest (S1+S2 EV-TopK + Expansion)
        env: { PYTHONWARNINGS: "ignore::FutureWarning" }
        shell: bash
        run: |
          set -euo pipefail
          python trade4v/run_4u.py \
            --data        "${DATA_PATH}" \
            --train_start "${TRAIN_S}" \
            --train_end   "${TRAIN_E}" \
            --test_start  "${TEST_S}" \
            --test_end    "${TEST_E}" \
            --H           "${{ github.event.inputs.H }}" \
            --H_map       "${{ github.event.inputs.H_map }}" \
            --fee_bps     "${FEE_BPS}" \
            --slip_bps    "${SLIP_BPS}" \
            --session_fee_mult "${SESSION_FEE_MULT}" \
            --regime      "${REGIME}" \
            --bar_map     "${{ github.event.inputs.bar_map }}" \
            --k_day       "${{ github.event.inputs.k_day }}" \
            --ev_anneal   "${{ github.event.inputs.ev_anneal }}" \
            --size_mode   "${SIZE_MODE}" \
            --risk_budget "${RISK_BUDGET}" \
            --size_max    "${SIZE_MAX}" \
            --use_expansion "${USE_EXP}" \
            --scale_clip    "${SCALE_CLIP}" \
            --out_dir _out_4u/github

      - name: Upload outputs
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with: { name: trade4v-out, path: _out_4u/github/ }
