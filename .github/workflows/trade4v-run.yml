name: trade4v-run
on:
  workflow_dispatch:
    inputs:
      project_zip: { description: "project zip in repo", default: "trade4v.zip", required: true }
      data_zip:    { description: "ETH 1m zip in repo", default: "ETHUSDT_1min_2020_2025.zip", required: true }
      train_range: { description: "train_start,train_end (UTC)", default: "2025-01-01,2025-04-30", required: true }
      test_range:  { description: "test_start,test_end (UTC)",  default: "2025-05-01,2025-06-30",  required: true }
      H:           { description: "H forward bars", default: "7", required: true }
      fee_bps:     { description: "one-way fee bps (0.1% = 10)", default: "10", required: true }
      regime:      { description: "vol_window[,z_low,z_high] or vol_window,z_thr", default: "64,1.0,1.8", required: true }
      goal:        { description: "objective, e.g. pnl,low:400-900,med:300-600,high:150-400", default: "pnl,low:400-900,med:300-600,high:150-400", required: true }

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955  # v4.3.0

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        with:
          python-version: "3.11"

      - name: Unzip project
        run: unzip -q "${{ github.event.inputs.project_zip }}" -d .

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r trade4v/requirements.txt

      - name: Prepare ETH 1m data (normalize headers & time)
        run: |
          unzip -q "${{ github.event.inputs.data_zip }}" -d data
          python - <<'PY'
          import glob, pandas as pd, numpy as np
          srcs = sorted(glob.glob("data/*.csv"))
          assert srcs, "No CSV inside the uploaded zip"
          src = srcs[0]
          df = pd.read_csv(src)
          # normalize column names
          df = df.rename(columns={c: c.strip().lower().replace(" ", "_") for c in df.columns})
          # choose time column
          tcol = next((c for c in ["time","open_time","ts","timestamp"] if c in df.columns), None)
          if tcol is None: raise SystemExit("No time/open_time/ts/timestamp column found")
          s = df[tcol]
          if np.issubdtype(s.dtype, np.number):
            # infer unit for numeric timestamps
            med = float(s.iloc[len(s)//2])
            unit = "ms" if med > 1e11 else "s"
            df["time"] = pd.to_datetime(s, unit=unit, utc=True)
          else:
            df["time"] = pd.to_datetime(s, utc=True)
          for c in ["open","high","low","close"]:
            if c not in df.columns: raise SystemExit(f"Missing column: {c}")
          if "volume" not in df.columns:
            cand = [c for c in ["vol","base_volume","quote_asset_volume","volume_usdt","volume_usd"] if c in df.columns]
            if not cand: raise SystemExit("Missing volume column")
            df["volume"] = df[cand[0]]
          df[["time","open","high","low","close","volume"]].to_csv("normalized.csv", index=False)
          PY
          echo "DATA_PATH=normalized.csv" >> $GITHUB_ENV

      - name: Parse compact inputs
        shell: bash
        run: |
          IFS=',' read -r TRAIN_S TRAIN_E <<< "${{ github.event.inputs.train_range }}"
          IFS=',' read -r TEST_S  TEST_E  <<< "${{ github.event.inputs.test_range }}"
          IFS=',' read -r -a PARTS <<< "${{ github.event.inputs.regime }}"
          VOLW="${PARTS[0]}"
          ZLOW=""
          ZHIGH=""
          ZTHR=""
          if [[ "${#PARTS[@]}" -eq 3 ]]; then
            ZLOW="${PARTS[1]}"; ZHIGH="${PARTS[2]}"
          elif [[ "${#PARTS[@]}" -eq 2 ]]; then
            ZTHR="${PARTS[1]}"
          fi
          echo "TRAIN_S=$TRAIN_S" >> $GITHUB_ENV
          echo "TRAIN_E=$TRAIN_E" >> $GITHUB_ENV
          echo "TEST_S=$TEST_S"   >> $GITHUB_ENV
          echo "TEST_E=$TEST_E"   >> $GITHUB_ENV
          echo "VOLW=$VOLW"       >> $GITHUB_ENV
          echo "ZLOW=$ZLOW"       >> $GITHUB_ENV
          echo "ZHIGH=$ZHIGH"     >> $GITHUB_ENV
          echo "ZTHR=$ZTHR"       >> $GITHUB_ENV

      - name: Run backtest (v1.4 defaults)
        shell: bash
        env:
          PYTHONWARNINGS: "ignore::FutureWarning"
        run: |
          EXTRA_ARGS=""
          if [[ -n "$ZLOW" && -n "$ZHIGH" ]]; then
            EXTRA_ARGS="--z_thr_low $ZLOW --z_thr_high $ZHIGH"
          elif [[ -n "$ZTHR" ]]; then
            EXTRA_ARGS="--z_thr $ZTHR"
          fi
          python trade4v/run_4u.py \
            --data        "${{ env.DATA_PATH }}" \
            --train_start "${{ env.TRAIN_S }}" \
            --train_end   "${{ env.TRAIN_E }}" \
            --test_start  "${{ env.TEST_S }}" \
            --test_end    "${{ env.TEST_E }}" \
            --H           ${{ github.event.inputs.H }} \
            --fee_bps     ${{ github.event.inputs.fee_bps }} \
            --vol_window  "${{ env.VOLW }}" \
            --goal        "${{ github.event.inputs.goal }}" \
            --deoverlap \
            --out_dir _out_4u/github \
            $EXTRA_ARGS

      - name: Upload outputs
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: trade4v-out
          path: _out_4u/github/