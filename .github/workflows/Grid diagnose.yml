name: diagnose-multigrid-v1.1.9

on:
  workflow_dispatch:
    inputs:
      CODE_ZIP:
        description: Repo path to code zip
        required: true
        default: trade_v1.1.9.zip
      DATA_ZIP:
        description: Repo path to data zip
        required: true
        default: ETHUSDT_1min_2020_2025.zip
      CSV_FILE:
        description: CSV filename after unzip
        required: true
        default: ETHUSDT_1min_2020_2025.csv

jobs:
  grid:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        THR:   [3.2, 3.8]
        TP:    [0.0038]
        SL:    [0.0022]
        HOLD:  [6, 8]
        FILTER: [ema, none]
        BE:    [0, 5]
    env:
      RUN_DIR: tmp/trade
      DATA_DIR: tmp/data
      OUT_DIR: _out_4u/run
      PYVER: '3.11'

    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Setup Python (pinned)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ env.PYVER }}

      - name: Resolve ZIPs (root or nested)
        shell: bash
        run: |
          set -euo pipefail
          resolve() {
            local in="$1" outvar="$2" path=""
            if [[ -f "$in" ]]; then path="${GITHUB_WORKSPACE}/$in"
            elif [[ -f "${GITHUB_WORKSPACE}/$in" ]]; then path="${GITHUB_WORKSPACE}/$in"
            else
              local base="$(basename "$in")"
              if [[ -f "${GITHUB_WORKSPACE}/$base" ]]; then path="${GITHUB_WORKSPACE}/$base"
              else
                path="$(find "${GITHUB_WORKSPACE}" -maxdepth 2 -type f -name "$base" -print -quit || true)"
              fi
            fi
            [[ -n "$path" && -f "$path" ]] || { echo "::error::ZIP not found: $in"; exit 66; }
            echo "${outvar}=${path}" >> "$GITHUB_ENV"
            echo "[resolved] $in -> $path"
          }
          resolve "${{ github.event.inputs.CODE_ZIP }}" CODE_ZIP_ABS
          resolve "${{ github.event.inputs.DATA_ZIP }}" DATA_ZIP_ABS

      - name: Unpack code and data
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${RUN_DIR}" "${DATA_DIR}" "${OUT_DIR}"
          unzip -q "${CODE_ZIP_ABS}" -d "${RUN_DIR}"
          unzip -q "${DATA_ZIP_ABS}" -d "${DATA_DIR}"
          # run_4u.py가 하위폴더에 있으면 RUN_DIR 보정
          if [ ! -f "${RUN_DIR}/run_4u.py" ]; then
            CAND="$(find "${RUN_DIR}" -maxdepth 2 -type f -name 'run_4u.py' -print -quit || true)"
            [ -n "$CAND" ] || { echo "::error::run_4u.py not found in code zip"; exit 67; }
            echo "RUN_DIR=$(dirname "$CAND")" >> "$GITHUB_ENV"
            echo "[debug] RUN_DIR corrected -> $(dirname "$CAND")"
          fi
          echo "[debug] data files:"; find "${DATA_DIR}" -maxdepth 2 -type f -name '*.csv' -print || true

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip
          if [ -f "$RUN_DIR/requirements.txt" ]; then
            pip install -r "$RUN_DIR/requirements.txt"
          else
            pip install pandas numpy pyyaml
          fi

      - name: Detect CSV (ABS)
        shell: bash
        run: |
          set -euo pipefail
          CSV="${GITHUB_WORKSPACE}/${{ env.DATA_DIR }}/${{ github.event.inputs.CSV_FILE }}"
          if [ ! -f "$CSV" ]; then
            F="$(find "${{ env.DATA_DIR }}" -type f -name "${{ github.event.inputs.CSV_FILE }}" -print -quit || true)"
            [ -n "$F" ] || { echo "::error::CSV not found: ${{ github.event.inputs.CSV_FILE }}"; exit 64; }
            CSV="${GITHUB_WORKSPACE}/${F}"
          fi
          echo "CSV_PATH=$CSV" >> "$GITHUB_ENV"

      # 1) Override: 최상위 키 + 센티넬 + 해시 기록 (런타임 RUN_DIR 사용)
      - name: Override effective config (hash + preview)
        shell: bash
        run: |
          set -euo pipefail
          echo "[ctx] RUN_DIR=$RUN_DIR"
          python - "$RUN_DIR" "${{ matrix.THR }}" "${{ matrix.HOLD }}" "${{ matrix.TP }}" "${{ matrix.SL }}" "${{ matrix.FILTER }}" "${{ matrix.BE }}" <<'PY'
          import os, sys, pathlib, yaml, hashlib
          run_dir = pathlib.Path(sys.argv[1])
          thr=float(sys.argv[2]); hold=int(sys.argv[3]); tp=float(sys.argv[4]); sl=float(sys.argv[5]); flt=sys.argv[6]; be=int(sys.argv[7])
          conf = run_dir/'conf'; conf.mkdir(parents=True, exist_ok=True)
          eff = conf/'config.effective.yml'
          cfg = {
            'beta': 1.6, 'temp': 6.0,
            'thr_by_session': {'US':thr,'EU':thr,'ASIA':thr},
            'tp_pct': tp, 'sl_pct': sl, 'hold_bars': hold,
            'allow_long': True, 'allow_short': True,
            'fees_bps_per_leg': 3.0, 'calibration': 'isotonic',
            '__debug_tag__': f"thr{thr}_h{hold}_tp{tp}_sl{sl}_f{flt}_be{be}"
          }
          if flt=='ema': cfg['filter_ema_50_200']=True
          if be>0: cfg['breakeven_bars']=be; cfg['breakeven_lock_pct']=0.0
          text = yaml.safe_dump(cfg, sort_keys=False).encode()
          h = hashlib.sha256(text).hexdigest()
          eff.write_bytes(text)
          print("[override] wrote", eff)
          print("[override] sha256:", h)
          print("[override] preview:\\n", text.decode()[:300])
          PY
          CONF_PATH="$RUN_DIR/conf/config.effective.yml"
          echo "PRE_HASH=$(sha256sum "$CONF_PATH" | awk '{print $1}')" >> "$GITHUB_ENV"
          echo "[PRE] conf path = $(realpath "$CONF_PATH")"
          sed -n '1,40p' "$CONF_PATH"

      # 2) bridge 무력화 + 1.1.9 skip-bridge 코드 경로 확인(경고만)
      - name: Lock bridge & check skip-bridge code path (warn-only)
        shell: bash
        run: |
          set -euo pipefail
          echo "[ctx] RUN_DIR=$RUN_DIR"
          test -f "$RUN_DIR/VERSION.txt" && { echo "[version]"; head -n 1 "$RUN_DIR/VERSION.txt"; } || true
          if [ -f "$RUN_DIR/backtest/exit_bridge.py" ]; then rm -f "$RUN_DIR/backtest/exit_bridge.py"; echo "[bridge] exit_bridge.py removed"; fi
          if grep -q "pre-existing config.effective.yml" "$RUN_DIR/run_4u.py"; then
            echo "[check] run_4u.py has skip-bridge logic"
          else
            echo "::warning::run_4u.py skip-bridge string not found (해시 검증으로 진행)"
          fi

      # 3) 실행 (로그 저장만)
      - name: Run backtest (tee log)
        shell: bash
        run: |
          set -euo pipefail
          export PYTHONPATH="$RUN_DIR"
          TAG="thr${{ matrix.THR }}_tp${{ matrix.TP }}_sl${{ matrix.SL }}_h${{ matrix.HOLD }}_f${{ matrix.FILTER }}_be${{ matrix.BE }}"
          mkdir -p "${GITHUB_WORKSPACE}/_diag"
          python "$RUN_DIR/run_4u.py" --data_path "${{ env.CSV_PATH }}" --out_dir "${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}" 2>&1 | tee "${GITHUB_WORKSPACE}/_diag/run_${TAG}.log"
          ls -l "${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}"

      # 4) 실행 후: 해시 비교 + 값 검증 + 라벨링
      - name: Post-run verify (hash compare + value check)
        shell: bash
        run: |
          set -euo pipefail
          CONF_PATH="$RUN_DIR/conf/config.effective.yml"
          POST_HASH="$(sha256sum "$CONF_PATH" | awk '{print $1}')"
          echo "[POST] conf path = $(realpath "$CONF_PATH")"
          echo "[hash] PRE=$PRE_HASH POST=$POST_HASH"
          if [ "$PRE_HASH" != "$POST_HASH" ]; then
            echo "::error::config.effective.yml was OVERWRITTEN after override → 경로/순서 이슈 가능 (bridge/기본생성/다른 디렉토리)."; exit 71
          fi
          SUM="${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}/summary.json"
          GATE="${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}/gating_debug.json"
          THR_EXPECT="${{ matrix.THR }}"; TP_EXPECT="${{ matrix.TP }}"; SL_EXPECT="${{ matrix.SL }}"
          THR_JSON="$(jq -r '.thr_by_session.US // empty' "$GATE" 2>/dev/null || true)"
          TP_JSON="$(jq -r '.tp_pct // empty' "$SUM" 2>/dev/null || true)"
          SL_JSON="$(jq -r '.sl_pct // empty' "$SUM" 2>/dev/null || true)"
          echo "[expected] thr=$THR_EXPECT tp=$TP_EXPECT sl=$SL_EXPECT"
          echo "[actual  ] thr=$THR_JSON  tp=$TP_JSON  sl=$SL_JSON"
          if [ -z "$THR_JSON" ] && [ -z "$TP_JSON" ] && [ -z "$SL_JSON" ]; then
            echo "::error::엔진이 다른 config를 읽었거나 스키마가 전혀 다릅니다 (경로/스키마)."; exit 72
          fi
          if [ "$THR_JSON" != "$THR_EXPECT" ] || [ "$TP_JSON" != "$TP_EXPECT" ] || [ "$SL_JSON" != "$SL_EXPECT" ]; then
            echo "::error::override 적용값과 엔진 출력값 불일치 → '스키마 키 이름' 또는 '엔진이 참조하는 파일 경로' 불일치 가능성.";
            echo "[hint] grep -R \"tp_pct\\|sl_pct\\|thr_by_session\\|hold_bars\" \"$RUN_DIR/backtest\" -n";
            exit 73
          fi
          echo "[ok] override kept (hash match) AND engine outputs match expectations."

      - name: Upload diagnostics/artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: out_thr${{ matrix.THR }}_tp${{ matrix.TP }}_sl${{ matrix.SL }}_h${{ matrix.HOLD }}_f${{ matrix.FILTER }}_be${{ matrix.BE }}
          path: |
            ${{ env.OUT_DIR }}/summary.json
            ${{ env.OUT_DIR }}/gating_debug.json
            ${{ env.OUT_DIR }}/preds_test.csv
            ${{ env.OUT_DIR }}/trades.csv
            ${{ env.OUT_DIR }}/preflight.json
            _diag/run_thr${{ matrix.THR }}_tp${{ matrix.TP }}_sl${{ matrix.SL }}_h${{ matrix.HOLD }}_f${{ matrix.FILTER }}_be${{ matrix.BE }}.log

  aggregate:
    needs: [grid]
    runs-on: ubuntu-latest
    steps:
      - name: Download all run artifacts
        uses: actions/download-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          path: all_runs

      - name: Summarize thr/tp/sl across runs and assert diversity
        shell: bash
        run: |
          set -euo pipefail
          echo "[list]"; find all_runs -type f -name 'summary.json' -maxdepth 3 | sed 's/^/ - /'
          SIG="[]"
          while IFS= read -r sum; do
            gate="$(dirname "$sum")/gating_debug.json"
            thr="$(jq -r '.thr_by_session.US // empty' "$gate" 2>/dev/null || true)"
            tp="$(jq -r '.tp_pct // empty' "$sum" 2>/dev/null || true)"
            sl="$(jq -r '.sl_pct // empty' "$sum" 2>/dev/null || true)"
            SIG="$(jq -nc --arg thr "$thr" --arg tp "$tp" --arg sl "$sl" '$ARGS.named' | jq -s --argjson arr "$SIG" '$arr + [.]')"
          done < <(find all_runs -type f -name 'summary.json' -maxdepth 3)
          echo "[sig_all] $SIG"
          UNIQUE=$(echo "$SIG" | jq -r 'map([.thr,.tp,.sl]|join(",")) | unique | length')
          echo "[unique combos] $UNIQUE"
          if [ "$UNIQUE" -le 1 ]; then
            echo "::error::All runs ended with identical (thr,tp,sl). Likely cause: (1) overwrite order (bridge/other step), (2) wrong schema (top-level vs nested), (3) wrong working directory (different conf used)."; exit 70
          else
            echo "[ok] Overrides diversified across grid."
          fi