      # 1) Override: 최상위 키 + 센티넬 + 해시 기록
      - name: Override effective config (hash + preview)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          python - "${{ matrix.THR }}" "${{ matrix.HOLD }}" "${{ matrix.TP }}" "${{ matrix.SL }}" "${{ matrix.FILTER }}" "${{ matrix.BE }}" <<'PY'
          import os, sys, pathlib, yaml, hashlib
          thr=float(sys.argv[1]); hold=int(sys.argv[2]); tp=float(sys.argv[3]); sl=float(sys.argv[4]); flt=sys.argv[5]; be=int(sys.argv[6])
          RUN=pathlib.Path(os.environ['RUN_DIR']); CONF=RUN/'conf'; CONF.mkdir(parents=True, exist_ok=True)
          eff=CONF/'config.effective.yml'
          cfg={
            'beta': 1.6, 'temp': 6.0,
            'thr_by_session': {'US':thr,'EU':thr,'ASIA':thr},
            'tp_pct': tp, 'sl_pct': sl, 'hold_bars': hold,
            'allow_long': True, 'allow_short': True,
            'fees_bps_per_leg': 3.0, 'calibration': 'isotonic',
            '__debug_tag__': f"thr{thr}_h{hold}_tp{tp}_sl{sl}_f{flt}_be{be}"
          }
          if flt=='ema': cfg['filter_ema_50_200']=True
          if be>0: cfg['breakeven_bars']=be; cfg['breakeven_lock_pct']=0.0
          text=yaml.safe_dump(cfg, sort_keys=False).encode()
          h=hashlib.sha256(text).hexdigest()
          eff.write_bytes(text)
          print("[override] wrote", eff)
          print("[override] sha256:", h)
          print("[override] preview:\n", text.decode()[:300])
          PY
          echo "PRE_HASH=$(sha256sum conf/config.effective.yml | awk '{print $1}')" >> "$GITHUB_ENV"
          echo "[PRE] conf path = $(realpath conf/config.effective.yml)"
          sed -n '1,40p' conf/config.effective.yml

      # 2) bridge 무력화 + 1.1.9 코드를 사용중인지 확인(문구 체크) — 실패해도 경고만
      - name: Lock bridge & check skip-bridge code path (warn-only)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          test -f VERSION.txt && { echo "[version]"; head -n 1 VERSION.txt; } || true
          if [ -f backtest/exit_bridge.py ]; then rm -f backtest/exit_bridge.py; echo "[bridge] exit_bridge.py removed"; fi
          if grep -q "pre-existing config.effective.yml" run_4u.py; then
            echo "[check] run_4u.py has skip-bridge logic"
          else
            echo "::warning::run_4u.py skip-bridge string not found (계속 진행, 해시로 검증)"
          fi

      # 3) 실행 (로그 저장은 유지, skip-bridge 문구 검증은 제거)
      - name: Run backtest (tee log)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          export PYTHONPATH="${PWD}"
          TAG="thr${{ matrix.THR }}_tp${{ matrix.TP }}_sl${{ matrix.SL }}_h${{ matrix.HOLD }}_f${{ matrix.FILTER }}_be${{ matrix.BE }}"
          mkdir -p "${GITHUB_WORKSPACE}/_diag"
          python run_4u.py --data_path "${{ env.CSV_PATH }}" --out_dir "${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}" 2>&1 | tee "${GITHUB_WORKSPACE}/_diag/run_${TAG}.log"
          ls -l "${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}"

      # 4) 실행 후: 해시 비교로 '덮어쓰기 여부' 확정 + 값 불일치 라벨링
      - name: Post-run verify (hash compare + value check)
        shell: bash
        working-directory: ${{ env.RUN_DIR }}
        run: |
          set -euo pipefail
          POST_HASH="$(sha256sum conf/config.effective.yml | awk '{print $1}')"
          echo "[POST] conf path = $(realpath conf/config.effective.yml)"
          echo "[hash] PRE=$PRE_HASH POST=$POST_HASH"
          if [ "$PRE_HASH" != "$POST_HASH" ]; then
            echo "::error::config.effective.yml was OVERWRITTEN after override → 경로/순서 이슈 가능 (bridge/기본 생성/다른 디렉토리)."; exit 71
          fi
          SUM="${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}/summary.json"
          GATE="${GITHUB_WORKSPACE}/${{ env.OUT_DIR }}/gating_debug.json"
          THR_EXPECT="${{ matrix.THR }}"; TP_EXPECT="${{ matrix.TP }}"; SL_EXPECT="${{ matrix.SL }}"
          THR_JSON="$(jq -r '.thr_by_session.US // empty' "$GATE" 2>/dev/null || true)"
          TP_JSON="$(jq -r '.tp_pct // empty' "$SUM" 2>/dev/null || true)"
          SL_JSON="$(jq -r '.sl_pct // empty' "$SUM" 2>/dev/null || true)"
          echo "[expected] thr=$THR_EXPECT tp=$TP_EXPECT sl=$SL_EXPECT"
          echo "[actual  ] thr=$THR_JSON  tp=$TP_JSON  sl=$SL_JSON"
          if [ -z "$THR_JSON" ] && [ -z "$TP_JSON" ] && [ -z "$SL_JSON" ]; then
            echo "::error::엔진이 다른 config를 읽었거나 스키마가 전혀 다릅니다 (경로/스키마)."; exit 72
          fi
          # 값 불일치 시 스키마 원인 라벨 출력
          if [ "$THR_JSON" != "$THR_EXPECT" ] || [ "$TP_JSON" != "$TP_EXPECT" ] || [ "$SL_JSON" != "$SL_EXPECT" ]; then
            echo "::error::override 적용값과 엔진 출력값 불일치 → '스키마 키 이름' 또는 '엔진이 참조하는 파일 경로' 불일치 가능성."; 
            echo "[hint] grep -R \"tp_pct\\|sl_pct\\|thr_by_session\\|hold_bars\" backtest -n  로 실제 키명을 확인하세요."
            exit 73
          fi
          echo "[ok] override kept (hash match) AND engine outputs match expectations."