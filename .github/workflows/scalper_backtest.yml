name: scalper_backtest

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    paths:
      - ".github/workflows/scalper_backtest.yml"
      - "eth_scalp_trader_pack_v0_1.zip"
      - "ETHUSDT_1min_2020_2025.zip"

concurrency:
  group: scalper_backtest-${{ github.ref }}
  cancel-in-progress: true

env:
  PACK_ZIP: eth_scalp_trader_pack_v0_1.zip
  DATA_ZIP: ETHUSDT_1min_2020_2025.zip
  PY_VERSION: "3.11"

jobs:
  backtest:
    runs-on: ubuntu-latest

    steps:
      # ✅ 꼭 실제 커밋 SHA로 바꾸세요 (Marketplace에서 v4 최신 커밋 SHA 복사)
      - name: Checkout
        uses: actions/checkout@<PINNED_SHA_actions_checkout_v4>

      # 캐시 의존성 파일을 미리 만들어 setup-python 캐시가 실패하지 않게 함
      - name: Prepare minimal requirements for cache key
        run: |
          cat > requirements-ci.txt << 'REQ'
          backtrader==1.9.78.123
          pandas>=2.0
          numpy>=1.24
          matplotlib>=3.7
          pandas_ta>=0.3.14b
          yfinance>=0.2
          scikit-learn>=1.3
          scipy>=1.10
          pyarrow>=12
          pyyaml>=6
          REQ

      # ✅ 꼭 실제 커밋 SHA로 바꾸세요 (Marketplace에서 v5 최신 커밋 SHA 복사)
      - name: Setup Python
        uses: actions/setup-python@<PINNED_SHA_actions_setup-python_v5>
        with:
          python-version: ${{ env.PY_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements-ci.txt'

      - name: Install system tools
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt

      - name: Unzip code pack and data
        run: |
          set -euo pipefail
          echo "Unzipping ${PACK_ZIP} and ${DATA_ZIP}..."
          mkdir -p pack data outputs logs
          # 코드팩 해제 (최상위에 여러 파일이 있든 폴더가 있든 pack/ 아래로 모음)
          unzip -o "${PACK_ZIP}" -d pack >/dev/null
          # 데이터 해제: zip에 csv/feather 등 들어있다고 가정
          unzip -o "${DATA_ZIP}" -d data >/dev/null || true
          echo "Layout after unzip:"
          tree -L 2 || true

      - name: Find backtest entrypoint
        id: find_entry
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          candidates=(
            pack/**/*backtest*.py
            pack/**/*Backtest*.py
            pack/**/run*.py
            pack/**/main.py
            pack/**/runner.py
          )
          chosen=""
          for f in "${candidates[@]}"; do
            if [[ -f "$f" ]]; then
              chosen="$f"
              break
            fi
          done
          if [[ -z "${chosen}" ]]; then
            echo "❌ 엔트리 파이썬 파일을 찾지 못했습니다. pack/ 아래 파일명을 확인하세요."
            echo "hint: 파일명에 backtest/run/main/runner 가 포함되어야 자동탐색됩니다."
            exit 1
          fi
          echo "✅ Entrypoint: ${chosen}"
          echo "entry=${chosen}" >> "$GITHUB_OUTPUT"

      - name: Run backtest
        env:
          ENTRY: ${{ steps.find_entry.outputs.entry }}
        run: |
          set -euo pipefail
          echo "Running: ${ENTRY}"
          # 자주 쓰이는 인자 패턴을 자동 시도. 실패 시 점진적 폴백.
          python "${ENTRY}" --data ./data --out ./outputs 2>&1 | tee ./logs/run.log || \
          python "${ENTRY}" --data_dir ./data --output_dir ./outputs 2>&1 | tee -a ./logs/run.log || \
          python "${ENTRY}" 2>&1 | tee -a ./logs/run.log

      - name: Sanity check results
        run: |
          set -e
          echo "Outputs:"
          ls -lah outputs || true
          # 결과 파일이 1개도 없으면 실패로 처리하여 디버깅 용이하게
          cnt=$(ls -1 outputs 2>/dev/null | wc -l || echo 0)
          if [ "$cnt" -eq 0 ]; then
            echo "❌ outputs/ 비어있음. 엔트리 스크립트 인자 또는 데이터 경로를 확인하세요."
            exit 2
          fi

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@<PINNED_SHA_actions_upload-artifact_v4>
        with:
          name: scalper_backtest_outputs
          path: |
            outputs/**/*
            logs/**/*
          if-no-files-found: warn
