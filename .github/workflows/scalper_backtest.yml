name: scalper_backtest

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/scalper_backtest.yml'
      - 'eth_scalp_trader_pack_v0_1.zip'
      - 'ETHUSDT_1min_2020_2025.zip'

permissions:
  contents: read

jobs:
  backtest:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # 1) 리포 체크아웃 (풀 SHA 고정)
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7

      # 2) 기본 검증: zip 두 개가 루트에 있는지 확인
      - name: Verify ZIPs present
        shell: bash
        run: |
          set -euo pipefail
          ls -al
          test -f eth_scalp_trader_pack_v0_1.zip || { echo "❌ eth_scalp_trader_pack_v0_1.zip 없음"; exit 1; }
          test -f ETHUSDT_1min_2020_2025.zip   || { echo "❌ ETHUSDT_1min_2020_2025.zip 없음"; exit 1; }

      # 3) 압축 해제 (코드팩/데이터)
      - name: Unzip code pack and data
        shell: bash
        run: |
          set -euo pipefail
          rm -rf unzipped && mkdir -p unzipped
          unzip -q -o eth_scalp_trader_pack_v0_1.zip   -d unzipped
          unzip -q -o ETHUSDT_1min_2020_2025.zip       -d unzipped
          # zip 내부 폴더 구조를 표준화
          rm -rf eth_scalp_trader_pack_v0_1 ETHUSDT_1min_2020_2025 || true
          cp -R unzipped/eth_scalp_trader_pack_v0_1 ./eth_scalp_trader_pack_v0_1
          mv    unzipped/ETHUSDT_1min_2020_2025      ./ETHUSDT_1min_2020_2025 || true
          echo "----- DIR TREE (top) -----"
          find eth_scalp_trader_pack_v0_1 -maxdepth 2 -type f -print

      # 4) Python 설정(요구사항 파일을 '이미' 갖고 있으므로 캐시 정상 동작)
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: eth_scalp_trader_pack_v0_1/requirements.txt

      # 5) 의존성 설치
      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python -V
          pip install --upgrade pip
          pip install -r eth_scalp_trader_pack_v0_1/requirements.txt

      # 6) 엔트리/설정 sanity check + 데이터 경로 자동 패치
      - name: Sanity checks & patch config
        shell: bash
        run: |
          set -euo pipefail
          test -f eth_scalp_trader_pack_v0_1/run_backtest.py || { echo "❌ run_backtest.py 없음"; ls -R eth_scalp_trader_pack_v0_1; exit 2; }
          test -f eth_scalp_trader_pack_v0_1/config.yml      || { echo "❌ config.yml 없음"; exit 2; }
          # config.yml에 data_dir 키가 있으면 현재 데이터 폴더로 교체
          if grep -Eq '^[[:space:]]*data_dir:' eth_scalp_trader_pack_v0_1/config.yml; then
            sed -i 's|^[[:space:]]*data_dir:.*|data_dir: "./ETHUSDT_1min_2020_2025"|' eth_scalp_trader_pack_v0_1/config.yml
          fi

      # 7) 백테스트 실행 (엔트리 명시, 백업 엔트리까지 폴백)
      - name: Run backtest
        env:
          PYTHONUNBUFFERED: "1"
        shell: bash
        run: |
          set -e
          # 일반 실행 → config 명시 → core/backtester 폴백 순으로 시도
          python -u eth_scalp_trader_pack_v0_1/run_backtest.py \
            || python -u eth_scalp_trader_pack_v0_1/run_backtest.py --config eth_scalp_trader_pack_v0_1/config.yml \
            || python -u eth_scalp_trader_pack_v0_1/core/backtester.py --config eth_scalp_trader_pack_v0_1/config.yml

      # 8) 결과물 업로드 (로그/리포트/CSV/PNG 전부 수집)
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: backtest-results
          if-no-files-found: warn
          path: |
            **/results/**
            **/logs/**
            **/reports/**
            **/*.csv
            **/*.png
