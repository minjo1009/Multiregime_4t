name: Exit/TTL A-B (param v2, pinned)

on:
  workflow_dispatch:
    inputs:
      CODEPACK_ZIP:
        description: "Path to code pack zip (repo-relative)"
        required: true
        default: "trade_v1.1.4.zip"
      CSV_GLOB:
        description: "Glob for CSV under data/ or tmp/data"
        required: true
        default: "**/*ETHUSDT*1min*2020*2025*.csv"
      TTL_A:
        description: "TTL for run A"
        required: true
        default: "1"
      TTL_B:
        description: "TTL for run B"
        required: true
        default: "5000"

jobs:
  abtest:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    env:
      OUT_DIR: _out_4u
    steps:
      - name: Checkout (pinned SHA)
        uses: actions/checkout@11bd71901b5b5b1630b4b23b5b2ac60a8a6e3f2

      - name: Setup Python 3.11 (pinned SHA)
        uses: actions/setup-python@a26af69be951a213e376a39fc6824e9f5b089bc5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Prepare workspace
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p tmp/trade tmp/data "${OUT_DIR}"
          # Unpack code pack
          test -f "${{ github.event.inputs.CODEPACK_ZIP }}" || { echo "Code pack not found"; exit 2; }
          unzip -oq "${{ github.event.inputs.CODEPACK_ZIP }}" -d tmp/trade
          # Find CSV (repo data/ or tmp/data/ or anywhere by glob)
          SEL="$(python - <<'PY'
import glob, os, json, sys
pat = os.environ.get("CSV_GLOB", "${{ github.event.inputs.CSV_GLOB }}")
cands = sorted(set(glob.glob(os.path.join("tmp","data",pat), recursive=True) +
                   glob.glob(os.path.join("data",pat), recursive=True) +
                   glob.glob(pat, recursive=True)))
print(json.dumps({"selected": cands[:1], "count": len(cands)}))
PY
)"
          echo "$SEL"
          CSV_PATH="$(python - <<'PY'
import json, sys
j=json.load(sys.stdin)
print(j["selected"][0] if j["selected"] else "")
PY
<<<"$SEL")"
          if [[ -z "$CSV_PATH" ]]; then
            echo "No CSV matched glob: ${{ github.event.inputs.CSV_GLOB }}"
            exit 2
          fi
          # Mirror into tmp/data
          mkdir -p tmp/data
          cp -f "$CSV_PATH" tmp/data/
          echo "CSV_PATH=$CSV_PATH" | tee ${OUT_DIR}/CSV_PATH.txt

      - name: Create run_engine.py (bridge & normalizer)
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > run_engine.py <<'PY'
import os, sys, json, hashlib, importlib.util, runpy, shutil
from pathlib import Path

ROOT = Path.cwd()
TMP  = ROOT/"tmp"/"trade"
CONF = TMP/"conf"/"config.effective.yml"
DATA = (ROOT/"tmp"/"data")
OUT  = ROOT/Path(os.environ.get("OUT_DIR","_out_4u"))
OUT.mkdir(parents=True, exist_ok=True)

def _sha256(p: Path)->str:
  h=hashlib.sha256()
  with p.open("rb") as f:
    for b in iter(lambda: f.read(65536), b""):
      h.update(b)
  return h.hexdigest()

def overlay_ttl(conf_path: Path, ttl: int):
  # append small yaml fragment; create file/dirs if needed
  conf_path.parent.mkdir(parents=True, exist_ok=True)
  base = ""
  if conf_path.exists():
    base = conf_path.read_text()
  frag = "
exit:
  ttl: {}
".format(ttl)
  conf_path.write_text(base + frag)

def try_run_engine(data_path: Path, config: Path, out_dir: Path):
  # Preferred: tmp/trade/run_4u.py
  r4u = TMP/"run_4u.py"
  eng = TMP/"backtest"/"engine.py"
  runr= TMP/"backtest"/"runner.py"
  if r4u.exists():
    return runpy.run_path(str(r4u), run_name="__main__")
  if eng.exists():
    # engine.py is expected to be executable when -m or run_path
    return runpy.run_path(str(eng), run_name="__main__")
  if runr.exists():
    return runpy.run_path(str(runr), run_name="__main__")
  raise FileNotFoundError("No engine entry (run_4u.py/backtest/engine.py/backtest/runner.py)")

def normalize_outputs(out_dir: Path):
  # common names we accept
  cands = [
    out_dir/"trades.csv",
    ROOT/"trades.csv",
    TMP/"trades.csv",
    TMP/"out"/"trades.csv",
  ]
  for c in cands:
    if c.exists():
      shutil.copy2(c, OUT/"trades.csv")
      return True
  return False

def run_once(ttl: int)->bool:
  data = next(DATA.glob("*.csv"))
  overlay_ttl(CONF, ttl=ttl)
  os.environ["DATA_PATH"] = str(data)
  os.environ["CONFIG"]    = str(CONF)
  os.environ["OUT_DIR"]   = str(OUT)
  try:
    try_run_engine(data, CONF, OUT)
  except SystemExit as e:
    # ignore exit codes from underlying scripts
    pass
  ok = normalize_outputs(OUT)
  if not ok:
    raise FileNotFoundError("trades.csv not produced")
  sha = _sha256(OUT/"trades.csv")
  (OUT/f"trades.ttl{ttl}.sha256").write_text(sha)
  return True

if __name__ == "__main__":
  ttl = int(os.environ.get("TTL","0"))
  print(f"[runner-bridge] TTL={ttl}")
  ok = run_once(ttl)
  print(json.dumps({"ok": ok}))
PY

      - name: Run A (TTL=${{ github.event.inputs.TTL_A }})
        shell: bash
        env:
          TTL: ${{ github.event.inputs.TTL_A }}
        run: |
          set -Eeuo pipefail
          python -u run_engine.py
          cp -f "_out_4u/trades.csv" "_out_4u/trades_A.csv" || { echo "trades_A.csv missing"; exit 2; }

      - name: Clean BETWEEN runs
        shell: bash
        run: |
          set -Eeuo pipefail
          rm -f "_out_4u/trades.csv"

      - name: Run B (TTL=${{ github.event.inputs.TTL_B }})
        shell: bash
        env:
          TTL: ${{ github.event.inputs.TTL_B }}
        run: |
          set -Eeuo pipefail
          python -u run_engine.py
          cp -f "_out_4u/trades.csv" "_out_4u/trades_B.csv" || { echo "trades_B.csv missing"; exit 2; }

      - name: Assert A != B (TTL effect)
        shell: bash
        run: |
          set -Eeuo pipefail
          python - <<'PY'
import hashlib,sys
def h(p):
  s=hashlib.sha256()
  with open(p,'rb') as f:
    for b in iter(lambda:f.read(65536), b''):
      s.update(b)
  print(s.hexdigest())
  return s.hexdigest()
ha=h("_out_4u/trades_A.csv"); hb=h("_out_4u/trades_B.csv")
if ha==hb:
  print("Error: Exit/TTL not applied (A==B)")
  sys.exit(3)
PY

      - name: Upload artifacts (pinned SHA)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: exit_ttl_abtest_outputs
          path: |
            _out_4u/trades_A.csv
            _out_4u/trades_B.csv
            _out_4u/*.sha256
            _out_4u/CSV_PATH.txt
